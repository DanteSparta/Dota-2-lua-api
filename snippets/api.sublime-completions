{
  "scope": "source.lua",

	"completions":
	[
		{ "trigger": "if", "contents": "if (${1:situation}) then\n	${4:--todo}\nend"},
		{ "trigger": "ife", "contents": "if (${1:situation}) then\n	${4:--todo}\nelse\n	${5:--todo}\nend"},
		{ "trigger": "break", "contents": "break"},
		{ "trigger": "do", "contents": "do"},
		{ "trigger": "and", "contents": "and"},
		{ "trigger": "or", "contents": "or"},
		{ "trigger": "not", "contents": "not"},
		{ "trigger": "else", "contents": "else"},
		{ "trigger": "elseif", "contents": "elseif (${1:situation}) then\n	${4:--todo}\nend"},
		{ "trigger": "return", "contents": "return"},
		{ "trigger": "then", "contents": "then"},
		{ "trigger": "then-end", "contents": "then\n	--todo\n	end"},
		{ "trigger": "repeat", "contents": "repeat\n	--${4:--todo}\nuntil (${1:arg})"},
		{ "trigger": "while", "contents": "while (${1:arg}) do\n	--${4:--todo}\nend"},
		{ "trigger": "until", "contents": "until( ${1:arg} )"},
		{ "trigger": "end", "contents": "end"},
		{ "trigger": "in", "contents": "in"},
		{ "trigger": "in-pairs-do", "contents": "in pairs( ${1:table} ) do\n	${2:--todo}\nend"},
		{ "trigger": "in-ipairs-do", "contents": "in ipairs( ${1:table} ) do\n	${2:--todo}\nend"},
		
		{ "trigger": "functionIntel", "contents": "function ${1:functionName}(...)\n	--todo\n	end"},



		{ "trigger": "assert", "contents": "assert( ${1:v} ${2:[, message]} )"},
		{ "trigger": "collectgarbage", "contents": "collectgarbage( ${1:opt} ${2:[, arg]} )"},
		{ "trigger": "dofile", "contents": "dofile"},
		{ "trigger": "error", "contents": "error"},
		{ "trigger": "getfenv", "contents": "getfenv"},
		{ "trigger": "getmetatable", "contents": "getmetatable"},
		{ "trigger": "ipairs", "contents": "ipairs"},
		{ "trigger": "loadfile", "contents": "loadfile"},
		{ "trigger": "loadstring", "contents": "loadstring"},
		{ "trigger": "module", "contents": "module"},
		{ "trigger": "next", "contents": "next"},
		{ "trigger": "pairs", "contents": "pairs"},
		{ "trigger": "pcall", "contents": "pcall (${1:functionname} , ${2:arg1} , ${3:...} )"},
		{ "trigger": "print", "contents": "print(\"print_these_strings_to_console\")"},
		{ "trigger": "rawequal", "contents": "rawequal"},
		{ "trigger": "rawget", "contents": "rawget"},
		{ "trigger": "rawset", "contents": "rawset"},
		{ "trigger": "require", "contents": "require"},
		{ "trigger": "select", "contents": "select"},
		{ "trigger": "setfenv", "contents": "setfenv"},
		{ "trigger": "setmetatable", "contents": "setmetatable(${1:o}, ${2:self})"},
		{ "trigger": "tonumber", "contents": "tonumber"},
		{ "trigger": "tostring", "contents": "tostring"},
		{ "trigger": "type", "contents": "type"},
		{ "trigger": "unpack", "contents": "unpack"},
		{ "trigger": "xpcall", "contents": "xpcall"},


		{ "trigger": "create", "contents": "create"},
		{ "trigger": "resume", "contents": "resume"},
		{ "trigger": "running", "contents": "running"},
		{ "trigger": "status", "contents": "status"},
		{ "trigger": "wrap", "contents": "wrap"},
		{ "trigger": "yield", "contents": "yield"},

		{ "trigger": "coroutine_create", "contents": "coroutine.create"},
		{ "trigger": "coroutine_resume", "contents": "coroutine.resume"},
		{ "trigger": "coroutine_running", "contents": "coroutine.running"},
		{ "trigger": "coroutine_status", "contents": "coroutine.status"},
		{ "trigger": "coroutine_wrap", "contents": "coroutine.wrap"},
		{ "trigger": "coroutine_yield", "contents": "coroutine.yield"},


		{ "trigger": "byte", "contents": "byte( ${1:string} , ${2:int} )"},
		{ "trigger": "char", "contents": "char( ${1:numbers} )"},
		{ "trigger": "dump", "contents": "dump( ${1:string} )"},
		{ "trigger": "find", "contents": "find( ${1:string} , ${2:match string} ${3:, optionalint})"},
		{ "trigger": "format", "contents": "format( \"${1:stringssssss} %d\",${2:arg} )"},
		{ "trigger": "gsub", "contents": "gsub( ${1:string} , ${2:replacedchar} , ${3:replacechar})"},
		{ "trigger": "len", "contents": "len( ${1:string} )"},
		{ "trigger": "lower", "contents": "lower( ${1:string} )"},
		{ "trigger": "match", "contents": "match( ${1:string} )"},
		{ "trigger": "rep", "contents": "rep( ${1:string} , ${2:int copies} )"},
		{ "trigger": "reverse", "contents": "reverse( ${1:string} )"},
		{ "trigger": "sub", "contents": "sub( ${1:string} , ${2:int start} , ${3: int oprionalend} )"},
		{ "trigger": "upper", "contents": "upper( ${1:string} )"},

		{ "trigger": "string_byte", "contents": "string.byte( ${1:string} , ${2:int} )"},
		{ "trigger": "string_char", "contents": "string.char( ${1:numbers} )"},
		{ "trigger": "string_dump", "contents": "string.dump( ${1:string} )"},
		{ "trigger": "string_find", "contents": "string.find( ${1:string} , ${2:match string} ${3:, optionalint})"},
		{ "trigger": "string_format", "contents": "string.format( \"${1:stringssssss} %d\",${2:arg} )"},
		{ "trigger": "string_gsub", "contents": "string.gsub( ${1:string} , ${2:replacedchar} , ${3:replacechar})"},
		{ "trigger": "string_len", "contents": "string.len( ${1:string} )"},
		{ "trigger": "string_lower", "contents": "string.lower( ${1:string} )"},
		{ "trigger": "string_match", "contents": "string.match( ${1:string} )"},
		{ "trigger": "string_rep", "contents": "string.rep( ${1:string} , ${2:int copies} )"},
		{ "trigger": "string_reverse", "contents": "string.reverse( ${1:string} )"},
		{ "trigger": "string_sub", "contents": "string.sub( ${1:string} , ${2:int start} , ${3: int oprionalend} )"},
		{ "trigger": "string_upper", "contents": "string.upper( ${1:string} )"},



		{ "trigger": "concat", "contents": "concat( ${1:table} , ${2:sep} , ${3:start} , ${4:end} )"},
		{ "trigger": "insert", "contents": "insert( ${1:table} , ${2:pos} , ${3:value} )"},
		{ "trigger": "maxn", "contents": "maxn( ${1:table} )"},
		{ "trigger": "remove", "contents": "remove( ${1:table} , ${2:pos} )"},
		{ "trigger": "sort", "contents": "sort( ${1:table} , ${2:comp} )" , "description":"sort the table"},

		{ "trigger": "table_concat", "contents": "table.concat( ${1:table} , ${2:sep} , ${3:start} , ${4:end} )"},
		{ "trigger": "table_insert", "contents": "table.insert( ${1:table} , ${2:pos} , ${3:value} )"},
		{ "trigger": "table_maxn", "contents": "table.maxn( ${1:table} )"},
		{ "trigger": "table_remove", "contents": "table.remove( ${1:table} , ${2:pos} )"},
		{ "trigger": "table_sort", "contents": "table.sort( ${1:table} , ${2:comp} )" , "description":"sort the table"},


		{ "trigger": "pi", "contents": "pi"},
		{ "trigger": "abs", "contents": "abs(${1:arg})"},
		{ "trigger": "ceil", "contents": "ceil(${1:arg})"},
		{ "trigger": "floor", "contents": "floor(${1:arg})"},
		{ "trigger": "max", "contents": "max(${1:args})"},
		{ "trigger": "min", "contents": "min(${1:args})"},
		{ "trigger": "pow", "contents": "pow(${1:x},${2:y})"},
		{ "trigger": "sqrt", "contents": "sqrt(${1:arg})"},
		{ "trigger": "mod", "contents": "mod(${1:arg1},${2:arg2})"},
		{ "trigger": "modf", "contents": "modf(${1:arg})"},
		{ "trigger": "randomseed", "contents": "randomseed(os.time())"},
		{ "trigger": "random", "contents": "random(${1:min},${2:max})"},
		{ "trigger": "rad", "contents": "rad(${1:arg})"},
		{ "trigger": "deg", "contents": "deg(${1:arg})"},
		{ "trigger": "exp", "contents": "exp(${1:arg})"},
		{ "trigger": "log", "contents": "log(${1:arg})"},
		{ "trigger": "log10", "contents": "log10(${1:arg})"},
		{ "trigger": "frexp", "contents": "frexp(${1:arg})"},
		{ "trigger": "ldexp", "contents": "ldexp"},
		{ "trigger": "sin", "contents": "sin(${1:arg})"},
		{ "trigger": "cos", "contents": "cos(${1:arg})"},
		{ "trigger": "tan", "contents": "tan(${1:arg})"},
		{ "trigger": "asin", "contents": "deg(math.asin(${1:arg}))"},
		{ "trigger": "acos", "contents": "deg(math.acos(${1:arg}))"},
		{ "trigger": "atan", "contents": "deg(math.atan(${1:arg}))"},

		{ "trigger": "math_pi", "contents": "math.pi"},
		{ "trigger": "math_abs", "contents": "math.abs(${1:arg})"},
		{ "trigger": "math_ceil", "contents": "math.ceil(${1:arg})"},
		{ "trigger": "math_floor", "contents": "math.floor(${1:arg})"},
		{ "trigger": "math_max", "contents": "math.max(${1:args})"},
		{ "trigger": "math_min", "contents": "math.min(${1:args})"},
		{ "trigger": "math_pow", "contents": "math.pow(${1:x},${2:y})"},
		{ "trigger": "math_sqrt", "contents": "math.sqrt(${1:arg})"},
		{ "trigger": "math_mod", "contents": "math.mod(${1:arg1},${2:arg2})"},
		{ "trigger": "math_modf", "contents": "math.modf(${1:arg})"},
		{ "trigger": "math_randomseed", "contents": "math.randomseed(os.time())"},
		{ "trigger": "math_random", "contents": "math.random(${1:min},${2:max})"},
		{ "trigger": "math_rad", "contents": "math.rad(${1:arg})"},
		{ "trigger": "math_deg", "contents": "math.deg(${1:arg})"},
		{ "trigger": "math_exp", "contents": "math.exp(${1:arg})"},
		{ "trigger": "math_log", "contents": "math.log(${1:arg})"},
		{ "trigger": "math_log10", "contents": "math.log10(${1:arg})"},
		{ "trigger": "math_frexp", "contents": "math.frexp(${1:arg})"},
		{ "trigger": "math_ldexp", "contents": "math.ldexp"},
		{ "trigger": "math_sin", "contents": "math.sin(${1:arg})"},
		{ "trigger": "math_cos", "contents": "math.cos(${1:arg})"},
		{ "trigger": "math_tan", "contents": "math.tan(${1:arg})"},
		{ "trigger": "math_asin", "contents": "math.deg(math.asin(${1:arg}))"},
		{ "trigger": "math_acos", "contents": "math.deg(math.acos(${1:arg}))"},
		{ "trigger": "math_atan", "contents": "math.deg(math.atan(${1:arg}))"},


		{ "trigger": "close", "contents": "close"},
		{ "trigger": "flush", "contents": "flush"},
		{ "trigger": "input", "contents": "input"},
		{ "trigger": "lines", "contents": "lines"},
		{ "trigger": "open", "contents": "open"},
		{ "trigger": "output", "contents": "output"},
		{ "trigger": "popen", "contents": "popen"},
		{ "trigger": "read", "contents": "read"},
		{ "trigger": "tmpfile", "contents": "tmpfile"},
		{ "trigger": "type", "contents": "type"},
		{ "trigger": "write", "contents": "write"},

		{ "trigger": "io_close", "contents": "io.close"},
		{ "trigger": "io_flush", "contents": "io.flush"},
		{ "trigger": "io_input", "contents": "io.input"},
		{ "trigger": "io_lines", "contents": "io.lines"},
		{ "trigger": "io_open", "contents": "io.open"},
		{ "trigger": "io_output", "contents": "io.output"},
		{ "trigger": "io_popen", "contents": "io.popen"},
		{ "trigger": "io_read", "contents": "io.read"},
		{ "trigger": "io_tmpfile", "contents": "io.tmpfile"},
		{ "trigger": "io_type", "contents": "io.type"},
		{ "trigger": "io_write", "contents": "io.write"},


		{ "trigger": "clock", "contents": "clock"},
		{ "trigger": "date", "contents": "date"},
		{ "trigger": "difftime", "contents": "difftime"},
		{ "trigger": "execute", "contents": "execute"},
		{ "trigger": "exit", "contents": "exit"},
		{ "trigger": "getenv", "contents": "getenv"},
		{ "trigger": "remove", "contents": "remove"},
		{ "trigger": "rename", "contents": "rename"},
		{ "trigger": "setlocale", "contents": "setlocale"},
		{ "trigger": "time", "contents": "time"},
		{ "trigger": "tmpname", "contents": "tmpname"},

		{ "trigger": "os_clock", "contents": "os.clock"},
		{ "trigger": "os_date", "contents": "os.date"},
		{ "trigger": "os_difftime", "contents": "os.difftime"},
		{ "trigger": "os_execute", "contents": "os.execute"},
		{ "trigger": "os_exit", "contents": "os.exit"},
		{ "trigger": "os_getenv", "contents": "os.getenv"},
		{ "trigger": "os_remove", "contents": "os.remove"},
		{ "trigger": "os_rename", "contents": "os.rename"},
		{ "trigger": "os_setlocale", "contents": "os.setlocale"},
		{ "trigger": "os_time", "contents": "os.time"},
		{ "trigger": "os_tmpname", "contents": "os.tmpname"},


		{ "trigger": "cpath", "contents": "cpath"},
		{ "trigger": "loaded", "contents": "loaded"},
		{ "trigger": "loadlib", "contents": "loadlib"},
		{ "trigger": "path", "contents": "path"},
		{ "trigger": "preload", "contents": "preload"},
		{ "trigger": "seeall", "contents": "seeall"},

		{ "trigger": "package_cpath", "contents": "package.cpath"},
		{ "trigger": "package_loaded", "contents": "package.loaded"},
		{ "trigger": "package_loadlib", "contents": "package.loadlib"},
		{ "trigger": "package_path", "contents": "package.path"},
		{ "trigger": "package_preload", "contents": "package.preload"},
		{ "trigger": "package_seeall", "contents": "package.seeall"},




		{ "trigger": "CreateParticle(string particleName,int ParticleAttach , Entity owningEntity , Player viewingPlayer)", "contents": "CreateParticle(${1:string particleName},${2:int ParticleAttach},${3:Entity owningEntity},${4:Player viewingPlayer})"},
		{ "trigger": "CreateParticleForPlayer(string particleName,int ParticleAttach , Entity owningEntity , Player viewingPlayer)", "contents": "CreateParticleForPlayer(${1:string particleName},${2:int ParticleAttach},${3:Entity owningEntity},${4:Player viewingPlayer})"},
		{ "trigger": "SetParticleControl(int particleId,int controlIndex , vector controlData)", "contents": "SetParticleControl(${1:int particleId},${2:int controlIndex},${3:vector controlData})"},
		{ "trigger": "ReleaseParticleIndex(int particleId)", "contents": "ReleaseParticleIndex(${1:int particleId})"},


		{ "trigger": "State_Get()", "contents": "State_Get()"},
		{ "trigger": "GetGameModeEntity()", "contents": "GetGameModeEntity()"},
		{ "trigger": "GetGameTime()", "contents": "GetGameTime()"},
		{ "trigger": "GetDifficulty()", "contents": "GetDifficulty()"},
		{ "trigger": "GetCustomGameDifficulty()", "contents": "GetCustomGameDifficulty()"},
		{ "trigger": "Defeated()", "contents": "Defeated()"},
		{ "trigger": "ResetDefeated()", "contents": "ResetDefeated()"},
		{ "trigger": "SetGameWinner(int team)", "contents": "SetGameWinner(${1:int team})"},
		{ "trigger": "MakeTeamLose(int team)", "contents": "MakeTeamLose(${1:int team})"},
		{ "trigger": "ResetMap(int unKnown)", "contents": "ResetMap(${1:int unKnown})"},
		{ "trigger": "GetDroppedItem(int dropIndex)", "contents": "GetDroppedItem(${1:int dropIndex})"},
		{ "trigger": "NumDroppedItems()", "contents": "NumDroppedItems()"},
		{ "trigger": "SendCustomMessage(string stringText,int unKnown , int unKnown)", "contents": "SendCustomMessage(${1:string stringText},${2:int unKnown},${3:int unKnown})"},
		{ "trigger": "SetHeroRespawnEnabled(bool canRespawn)", "contents": "SetHeroRespawnEnabled(${1:bool canRespawn})"},
		{ "trigger": "Playtesting_UpdateCustomKeyValues()", "contents": "Playtesting_UpdateCustomKeyValues()"},
		{ "trigger": "ResetToHeroSelection()", "contents": "ResetToHeroSelection()"},
		{ "trigger": "SetTreeRegrowTime(float seconds)", "contents": "SetTreeRegrowTime(${1:float seconds})"},
		{ "trigger": "SetHeroSelectionTime(float seconds)", "contents": "SetHeroSelectionTime(${1:float seconds})"},
		{ "trigger": "SetPreGameTime(float seconds)", "contents": "SetPreGameTime(${1:float seconds})"},
		{ "trigger": "SetPostGameTime(float seconds)", "contents": "SetPostGameTime(${1:float seconds})"},
		{ "trigger": "SetRuneSpawnTime(float seconds)", "contents": "SetRuneSpawnTime(${1:float seconds})"},
		{ "trigger": "SetSameHeroSelectionEnabled(bool enabled)", "contents": "SetSameHeroSelectionEnabled(${1:bool enabled})"},
		{ "trigger": "SetUseUniversalShopMode(bool enabled)", "contents": "SetUseUniversalShopMode(${1:bool enabled})"},
		{ "trigger": "SetTimeOfDay(float time)", "contents": "SetTimeOfDay(${1:float time})"},
		{ "trigger": "SetOverlayHealthBarUnit(Unit unit,int style)", "contents": "SetOverlayHealthBarUnit(${1:Unit unit},${2:int style})"},
		{ "trigger": "SetHeroMinimapIconSize(int iconSize)", "contents": "SetHeroMinimapIconSize(${1:int iconSize})"},
		{ "trigger": "SetCreepMinimapIconScale(float creepScale)", "contents": "SetCreepMinimapIconScale(${1:float creepScale})"},
		{ "trigger": "SetRuneMinimapIconScale(float runeScale)", "contents": "SetRuneMinimapIconScale(${1:float runeScale})"},
		{ "trigger": "SetSafeToLeave(bool safeToLeave)", "contents": "SetSafeToLeave(${1:bool safeToLeave})"},
		{ "trigger": "SetUseCustomHeroXPValues(bool unKnown)", "contents": "SetUseCustomHeroXPValues(${1:bool unKnown})"},
		{ "trigger": "SetCustomGameDifficulty(int unKnown)", "contents": "SetCustomGameDifficulty(${1:int unKnown})"},
		{ "trigger": "SetGoldTickTime(float unKnown)", "contents": "SetGoldTickTime(${1:float unKnown})"},
		{ "trigger": "SetGoldPerTick(int unKnown)", "contents": "SetGoldPerTick(${1:int unKnown})"},
		{ "trigger": "SetNianFightStartTime(float unKnown)", "contents": "SetNianFightStartTime(${1:float unKnown})"},
		{ "trigger": "GetNianFightStartTime()", "contents": "GetNianFightStartTime()"},
		{ "trigger": "GetMatchSignoutComplete()", "contents": "GetMatchSignoutComplete()"},
		{ "trigger": "DidMatchSignoutTimeOut()", "contents": "DidMatchSignoutTimeOut()"},
		{ "trigger": "GetNianTotalDamageTaken()", "contents": "GetNianTotalDamageTaken()"},


		{ "trigger": "First()", "contents": "First()"},
		{ "trigger": "Next(Entity startFrom)", "contents": "Next(${1:Entity startFrom})"},
		{ "trigger": "CreateByClassname(string className)", "contents": "CreateByClassname(${1:string className})"},
		{ "trigger": "FindByClassname(Entity startFrom,string className)", "contents": "FindByClassname(${1:Entity startFrom},${2:string className})"},
		{ "trigger": "FindAllByClassname(string className)", "contents": "FindAllByClassname(${1:string className})"},
		{ "trigger": "FindByName(Entity startFrom,string entName)", "contents": "FindByName(${1:Entity startFrom},${2:string entName})"},
		{ "trigger": "FindAllByName(string name)", "contents": "FindAllByName(${1:string name})"},
		{ "trigger": "FindInSphere(Entity startFrom,vector origin , float radius)", "contents": "FindInSphere(${1:Entity startFrom},${2:vector origin},${3:float radius})"},
		{ "trigger": "FindAllInSphere(vector origin,float radius)", "contents": "FindAllInSphere(${1:vector origin},${2:float radius})"},
		{ "trigger": "FindByTarget(Entity startFrom,string targetName)", "contents": "FindByTarget(${1:Entity startFrom},${2:string targetName})"},
		{ "trigger": "FindAllByTarget(string targetName)", "contents": "FindAllByTarget(${1:string targetName})"},
		{ "trigger": "FindByModel(Entity startFrom,string modelName)", "contents": "FindByModel(${1:Entity startFrom},${2:string modelName})"},
		{ "trigger": "FindAllByModel(string modelName)", "contents": "FindAllByModel(${1:string modelName})"},
		{ "trigger": "FindByNameNearest(string entityName,vector origin , float radius)", "contents": "FindByNameNearest(${1:string entityName},${2:vector origin},${3:float radius})"},
		{ "trigger": "FindByNameWithin(Entity startFrom,string entityName , vector origin , float radius)", "contents": "FindByNameWithin(${1:Entity startFrom},${2:string entityName},${3:vector origin},${4:float radius})"},
		{ "trigger": "FindAllByNameWithin(string entityName,vector origin , float radius)", "contents": "FindAllByNameWithin(${1:string entityName},${2:vector origin},${3:float radius})"},
		{ "trigger": "FindByClassnameNearest(string className,vector origin , float radius)", "contents": "FindByClassnameNearest(${1:string className},${2:vector origin},${3:float radius})"},
		{ "trigger": "FindByClassnameWithin(Entity startFrom,string className , vector origin , float radius)", "contents": "FindByClassnameWithin(${1:Entity startFrom},${2:string className},${3:vector origin},${4:float radius})"},
		{ "trigger": "FindAllByClassnameWithin(string className,vector origin , float radius)", "contents": "FindAllByClassnameWithin(${1:string className},${2:vector origin},${3:float radius})"},


		{ "trigger": "GetHero(int heroId)", "contents": "GetHero(${1:int heroId})"},
		{ "trigger": "GetHeroCount()", "contents": "GetHeroCount()"},
		{ "trigger": "GetAllHeroes()", "contents": "GetAllHeroes()"},


		{ "trigger": "GetFloat(string varName)", "contents": "GetFloat(${1:string varName})"},
		{ "trigger": "GetStr(string varName)", "contents": "GetStr(${1:string varName})"},
		{ "trigger": "GetBool(string varName)", "contents": "GetBool(${1:string varName})"},
		{ "trigger": "RegisterCommand(string varName,function func , string helpText , int flags)", "contents": "RegisterCommand(${1:string varName},${2:function func},${3:string helpText},${4:int flags(seemsAlwaysToBe0)})"},
		{ "trigger": "RegisterConvar(string name,string default , string helpText , int flags)", "contents": "RegisterConvar(${1:string name},${2:string default},${3:string helpText},${4:int flags})"},
		{ "trigger": "GetCommandClient()", "contents": "GetCommandClient()"},
		{ "trigger": "GetDOTACommandClient()", "contents": "GetDOTACommandClient()"},


		{ "trigger": "ConnectOutput(string unKnown,string unKnown)", "contents": "ConnectOutput(${1:string unKnown},${2:string unKnown})"},
		{ "trigger": "DisconnectOutput(string unKnown,string unKnown)", "contents": "DisconnectOutput(${1:string unKnown},${2:string unKnown})"},
		{ "trigger": "GetHealth()", "contents": "GetHealth()"},
		{ "trigger": "SetHealth(int hp)", "contents": "SetHealth(${1:int hp})"},
		{ "trigger": "GetMaxHealth()", "contents": "GetMaxHealth()"},
		{ "trigger": "SetMaxHealth(int hp)", "contents": "SetMaxHealth(${1:int hp})"},
		{ "trigger": "IsAlive()", "contents": "IsAlive()"},
		{ "trigger": "Remove()", "contents": "Remove()"},
		{ "trigger": "SetModel(string modelName)", "contents": "SetModel(${1:string modelName})"},
		{ "trigger": "GetModelName()", "contents": "GetModelName()"},
		{ "trigger": "EmitSound(string soundName)", "contents": "EmitSound(${1:string soundName})"},
		{ "trigger": "EmitSoundParams(string soundName,int pitch , float volume)", "contents": "EmitSoundParams(${1:string soundName},${2:int pitch},${3:float volume})"},
		{ "trigger": "StopSound(string soundName)", "contents": "StopSound(${1:string soundName})"},
		{ "trigger": "PrecacheSoundScript(string soundName)", "contents": "PrecacheSoundScript(${1:string soundName})"},
		{ "trigger": "GetSoundDuration(string soundName,string actorModelname)", "contents": "GetSoundDuration(${1:string soundName},${2:string actorModelname})"},
		{ "trigger": "GetClassname()", "contents": "GetClassname()"},
		{ "trigger": "GetName()", "contents": "GetName()"},
		{ "trigger": "GetPreTemplateName()", "contents": "GetPreTemplateName()"},
		{ "trigger": "GetAbsOrigin()", "contents": "GetAbsOrigin()"},
		{ "trigger": "SetAbsOrigin(vector vec)", "contents": "SetAbsOrigin(${1:vector vec})"},
		{ "trigger": "GetOrigin()", "contents": "GetOrigin()"},
		{ "trigger": "SetAbsOrigin(vector vec)", "contents": "SetAbsOrigin(${1:vector vec})"},
		{ "trigger": "SetOrigin(vector vec)", "contents": "SetOrigin(${1:vector vec})"},
		{ "trigger": "GetForwardVector()", "contents": "GetForwardVector()"},
		{ "trigger": "GetRightVector()", "contents": "GetRightVector()"},
		{ "trigger": "GetUpVector()", "contents": "GetUpVector()"},
		{ "trigger": "SetForwardVector(vector forward)", "contents": "SetForwardVector(${1:vector forward})"},
		{ "trigger": "GetVelocity()", "contents": "GetVelocity()"},
		{ "trigger": "SetVelocity(vector velocity)", "contents": "SetVelocity(${1:vector velocity})"},
		{ "trigger": "SetAngularVelocity(float pitch,float yaw , float roll)", "contents": "SetAngularVelocity(${1:float pitch},${2:float yaw},${3:float roll})"},
		{ "trigger": "GetAngularVelocity()", "contents": "GetAngularVelocity()"},
		{ "trigger": "GetCenter()", "contents": "GetCenter()"},
		{ "trigger": "EyePosition()", "contents": "EyePosition()"},
		{ "trigger": "SetAngles(float pitch,float yaw , float roll)", "contents": "SetAngles(${1:float pitch},${2:float yaw},${3:float roll})"},
		{ "trigger": "GetAngles()", "contents": "GetAngles()"},
		{ "trigger": "SetSize(vector vec,vector vec)", "contents": "SetSize(${1:vector vec},${2:vector vec})"},
		{ "trigger": "GetBoundingMins()", "contents": "GetBoundingMins()"},
		{ "trigger": "GetBoundingMaxs()", "contents": "GetBoundingMaxs()"},
		{ "trigger": "Destroy()", "contents": "Destroy()"},
		{ "trigger": "SetOwner(Entity parent)", "contents": "SetOwner(${1:Entity parent})"},
		{ "trigger": "GetTeam()", "contents": "GetTeam()"},
		{ "trigger": "SetTeam(int team)", "contents": "SetTeam(${1:int team})"},
		{ "trigger": "GetMoveParent()", "contents": "GetMoveParent()"},
		{ "trigger": "GetRootMoveParent()", "contents": "GetRootMoveParent()"},
		{ "trigger": "FirstMoveChild()", "contents": "FirstMoveChild()"},
		{ "trigger": "NextMovePeer()", "contents": "NextMovePeer()"},
		{ "trigger": "__KeyValueFromString(string key,string value)", "contents": "__KeyValueFromString(${1:string key},${2:string value})"},
		{ "trigger": "__KeyValueFromFloat(string key,float value)", "contents": "__KeyValueFromFloat(${1:string key},${2:float value})"},
		{ "trigger": "__KeyValueFromInt(string key,int value)", "contents": "__KeyValueFromInt(${1:string key},${2:int value})"},
		{ "trigger": "__KeyValueFromVector(string key,vector value)", "contents": "__KeyValueFromVector(${1:string key},${2:vector value})"},
		{ "trigger": "Trigger()", "contents": "Trigger()"},
		{ "trigger": "ValidateScriptScope()", "contents": "ValidateScriptScope()"},
		{ "trigger": "GetScriptScope()", "contents": "GetScriptScope()"},
		{ "trigger": "GetScriptId()", "contents": "GetScriptId()"},
		{ "trigger": "GetOwner()", "contents": "GetOwner()"},
		{ "trigger": "entindex()", "contents": "entindex()"},


		{ "trigger": "SetHasRepicked(int playerId)", "contents": "SetHasRepicked(${1:int playerId})"},
		{ "trigger": "HasRepicked(int playerId)", "contents": "HasRepicked(${1:int playerId})"},
		{ "trigger": "SetHasRandomed(int playerId)", "contents": "SetHasRandomed(${1:int playerId})"},
		{ "trigger": "HasRandomed(int playerId)", "contents": "HasRandomed(${1:int playerId})"},
		{ "trigger": "IsValidTeamPlayerID(int playerId)", "contents": "IsValidTeamPlayerID(${1:int playerId})"},
		{ "trigger": "IsValidTeamPlayer(int playerId)", "contents": "IsValidTeamPlayer(${1:int playerId})"},
		{ "trigger": "IsValidPlayerID(int playerId)", "contents": "IsValidPlayerID(${1:int playerId})"},
		{ "trigger": "IsValidPlayer(int playerId)", "contents": "IsValidPlayer(${1:int playerId})"},
		{ "trigger": "GetLevel(int playerId)", "contents": "GetLevel(${1:int playerId})"},
		{ "trigger": "IncrementKills(int playerId,int kills)", "contents": "IncrementKills(${1:int playerId},${2:int kills})"},
		{ "trigger": "IncrementAssists(int playerId)", "contents": "IncrementAssists(${1:int playerId})"},
		{ "trigger": "IncrementDeaths(int playerId)", "contents": "IncrementDeaths(${1:int playerId})"},
		{ "trigger": "GetKills(int playerId)", "contents": "GetKills(${1:int playerId})"},
		{ "trigger": "GetAssists(int playerId)", "contents": "GetAssists(${1:int playerId})"},
		{ "trigger": "GetDeaths(int playerId)", "contents": "GetDeaths(${1:int playerId})"},
		{ "trigger": "GetStuns(int playerId)", "contents": "GetStuns(${1:int playerId})"},
		{ "trigger": "GetHealing(int playerId)", "contents": "GetHealing(${1:int playerId})"},
		{ "trigger": "GetTowerKills(int playerId)", "contents": "GetTowerKills(${1:int playerId})"},
		{ "trigger": "GetRoshanKills(int playerId)", "contents": "GetRoshanKills(${1:int playerId})"},
		{ "trigger": "GetTeamKills(int playerId)", "contents": "GetTeamKills(${1:int playerId})"},
		{ "trigger": "IncrementStreak(int playerId)", "contents": "IncrementStreak(${1:int playerId})"},
		{ "trigger": "ClearStreak(int playerId)", "contents": "ClearStreak(${1:int playerId})"},
		{ "trigger": "GetStreak(int playerId)", "contents": "GetStreak(${1:int playerId})"},
		{ "trigger": "ModifyGold(int playerId,int goldAmt , bool reliable , int unknown)", "contents": "ModifyGold(${1:int playerId},${2:int goldAmt},${3:bool reliable},${4:int unknown})"},
		{ "trigger": "SetGold(int playerId,int goldAmt , bool reliable)", "contents": "SetGold(${1:int playerId},${2:int goldAmt},${3:bool reliable})"},
		{ "trigger": "SpendGold(int playerId,int amt , int unknown)", "contents": "SpendGold(${1:int playerId},${2:int amt},${3:int unknown})"},
		{ "trigger": "GetGold(int playerId)", "contents": "GetGold(${1:int playerId})"},
		{ "trigger": "GetReliableGold(int playerId)", "contents": "GetReliableGold(${1:int playerId})"},
		{ "trigger": "GetUnreliableGold(int playerId)", "contents": "GetUnreliableGold(${1:int playerId})"},
		{ "trigger": "ResetTotalEarnedGold(int playerId)", "contents": "ResetTotalEarnedGold(${1:int playerId})"},
		{ "trigger": "GetTotalEarnedGold(int playerId)", "contents": "GetTotalEarnedGold(${1:int playerId})"},
		{ "trigger": "GetTotalGoldSpent(int playerId)", "contents": "GetTotalGoldSpent(${1:int playerId})"},
		{ "trigger": "AddGoldSpentOnSupport(int unknown,int unknown)", "contents": "AddGoldSpentOnSupport(${1:int unknown},${2:int unknown})"},
		{ "trigger": "GetGoldSpentOnSupport(int playerId)", "contents": "GetGoldSpentOnSupport(${1:int playerId})"},
		{ "trigger": "GetGoldSpentOnConsumables(int playerId)", "contents": "GetGoldSpentOnConsumables(${1:int playerId})"},
		{ "trigger": "GetGoldSpentOnItems(int playerId)", "contents": "GetGoldSpentOnItems(${1:int playerId})"},
		{ "trigger": "GetGoldLostToDeath(int playerId)", "contents": "GetGoldLostToDeath(${1:int playerId})"},
		{ "trigger": "GetGoldSpentOnBuybacks(int playerId)", "contents": "GetGoldSpentOnBuybacks(${1:int playerId})"},
		{ "trigger": "GetGoldPerMin(int playerId)", "contents": "GetGoldPerMin(${1:int playerId})"},
		{ "trigger": "GetXPPerMin(int playerId)", "contents": "GetXPPerMin(${1:int playerId})"},
		{ "trigger": "GetAegisPickups(int playerId)", "contents": "GetAegisPickups(${1:int playerId})"},
		{ "trigger": "AddAegisPickup(int playerId)", "contents": "AddAegisPickup(${1:int playerId})"},
		{ "trigger": "GetRunePickups(int playerId)", "contents": "GetRunePickups(${1:int playerId})"},
		{ "trigger": "AddRunePickup(int playerId)", "contents": "AddRunePickup(${1:int playerId})"},
		{ "trigger": "GetNumConsumablesPurchased(int playerId)", "contents": "GetNumConsumablesPurchased(${1:int playerId})"},
		{ "trigger": "GetNumItemsPurchased(int playerId)", "contents": "GetNumItemsPurchased(${1:int playerId})"},
		{ "trigger": "GetTimeOfLastItemPurchase(int playerId)", "contents": "GetTimeOfLastItemPurchase(${1:int playerId})"},
		{ "trigger": "GetTimeOfLastConsumablePurchase(int playerId)", "contents": "GetTimeOfLastConsumablePurchase(${1:int playerId})"},
		{ "trigger": "GetTimeOfLastDeath(int playerId)", "contents": "GetTimeOfLastDeath(${1:int playerId})"},
		{ "trigger": "GetRespawnSeconds(int playerId)", "contents": "GetRespawnSeconds(${1:int playerId})"},
		{ "trigger": "IncrementTotalEarnedXP(int playerId,int amt)", "contents": "IncrementTotalEarnedXP(${1:int playerId},${2:int amt})"},
		{ "trigger": "GetTotalEarnedXP(int playerId)", "contents": "GetTotalEarnedXP(${1:int playerId})"},
		{ "trigger": "AddClaimedFarm(int playerId,float farm)", "contents": "AddClaimedFarm(${1:int playerId},${2:float farm})"},
		{ "trigger": "GetClaimedFarm(int playerId)", "contents": "GetClaimedFarm(${1:int playerId})"},
		{ "trigger": "GetRawPlayerDamage(int playerId)", "contents": "GetRawPlayerDamage(${1:int playerId})"},
		{ "trigger": "ClearRawPlayerDamageMatrix(int playerId)", "contents": "ClearRawPlayerDamageMatrix(${1:int playerId})"},
		{ "trigger": "ClearKillsMatrix(int playerId)", "contents": "ClearKillsMatrix(${1:int playerId})"},
		{ "trigger": "GetTowerDamageTaken(int playerId)", "contents": "GetTowerDamageTaken(${1:int playerId})"},
		{ "trigger": "GetCreepDamageTaken(int playerId)", "contents": "GetCreepDamageTaken(${1:int playerId})"},
		{ "trigger": "GetHeroDamageTaken(int playerId)", "contents": "GetHeroDamageTaken(${1:int playerId})"},
		{ "trigger": "GetDamageDoneToHero(int playerId,int heroId)", "contents": "GetDamageDoneToHero(${1:int playerId},${2:int heroId})"},
		{ "trigger": "GetKillsDoneToHero(int playerId,int heroId)", "contents": "GetKillsDoneToHero(${1:int playerId},${2:int heroId})"},
		{ "trigger": "GetSelectedHeroName(int playerId)", "contents": "GetSelectedHeroName(${1:int playerId})"},
		{ "trigger": "GetSelectedHeroID(int playerId)", "contents": "GetSelectedHeroID(${1:int playerId})"},
		{ "trigger": "IsHeroSelected(string heroName)", "contents": "IsHeroSelected(${1:string heroName})"},
		{ "trigger": "WhoSelectedHero(string heroName)", "contents": "WhoSelectedHero(${1:string heroName})"},
		{ "trigger": "GetSelectedHeroEntity(int playerId)", "contents": "GetSelectedHeroEntity(${1:int playerId})"},
		{ "trigger": "HasSelectedHero(int playerId)", "contents": "HasSelectedHero(${1:int playerId})"},
		{ "trigger": "GetPlayer(int playerId)", "contents": "GetPlayer(${1:int playerId})"},
		{ "trigger": "GetNthPlayerIDOnTeam(int index,int team)", "contents": "GetNthPlayerIDOnTeam(${1:int index},${2:int team})"},
		{ "trigger": "IncrementLastHits(int playerId)", "contents": "IncrementLastHits(${1:int playerId})"},
		{ "trigger": "GetLastHits(int playerId)", "contents": "GetLastHits(${1:int playerId})"},
		{ "trigger": "IncrementGoldBagsCollected(int playerId)", "contents": "IncrementGoldBagsCollected(${1:int playerId})"},
		{ "trigger": "GetGoldBagsCollected(int playerId)", "contents": "GetGoldBagsCollected(${1:int playerId})"},
		{ "trigger": "IncrementLastHitStreak(int playerId)", "contents": "IncrementLastHitStreak(${1:int playerId})"},
		{ "trigger": "ClearLastHitStreak(int playerId)", "contents": "ClearLastHitStreak(${1:int playerId})"},
		{ "trigger": "GetLastHitStreak(int playerId)", "contents": "GetLastHitStreak(${1:int playerId})"},
		{ "trigger": "IncrementLastHitMultikill(int playerId)", "contents": "IncrementLastHitMultikill(${1:int playerId})"},
		{ "trigger": "ClearLastHitMultikill(int playerId)", "contents": "ClearLastHitMultikill(${1:int playerId})"},
		{ "trigger": "GetLastHitMultikill(int playerId)", "contents": "GetLastHitMultikill(${1:int playerId})"},
		{ "trigger": "IncrementNearbyCreepDeaths(int playerId)", "contents": "IncrementNearbyCreepDeaths(${1:int playerId})"},
		{ "trigger": "GetNearbyCreepDeaths(int playerId)", "contents": "GetNearbyCreepDeaths(${1:int playerId})"},
		{ "trigger": "IncrementDenies(int playerId)", "contents": "IncrementDenies(${1:int playerId})"},
		{ "trigger": "GetDenies(int playerId)", "contents": "GetDenies(${1:int playerId})"},
		{ "trigger": "IncrementClaimedMisses(int playerId)", "contents": "IncrementClaimedMisses(${1:int playerId})"},
		{ "trigger": "GetClaimedMisses(int playerId)", "contents": "GetClaimedMisses(${1:int playerId})"},
		{ "trigger": "IncrementClaimedDenies(int playerId)", "contents": "IncrementClaimedDenies(${1:int playerId})"},
		{ "trigger": "GetClaimedDenies(int playerId)", "contents": "GetClaimedDenies(${1:int playerId})"},
		{ "trigger": "IncrementMisses(int playerId)", "contents": "IncrementMisses(${1:int playerId})"},
		{ "trigger": "GetMisses(int playerId)", "contents": "GetMisses(${1:int playerId})"},
		{ "trigger": "UpdateTeamSlot(int playerId,int slot)", "contents": "UpdateTeamSlot(${1:int playerId},${2:int slot})"},
		{ "trigger": "GetTeam(int playerId)", "contents": "GetTeam(${1:int playerId})"},
		{ "trigger": "IsBroadcaster(int playerId)", "contents": "IsBroadcaster(${1:int playerId})"},
		{ "trigger": "GetBroadcasterChannel(int playerId)", "contents": "GetBroadcasterChannel(${1:int playerId})"},
		{ "trigger": "GetBroadcasterChannelSlot(int playerId)", "contents": "GetBroadcasterChannelSlot(${1:int playerId})"},
		{ "trigger": "GetSteamAccountID(int playerId)", "contents": "GetSteamAccountID(${1:int playerId})"},
		{ "trigger": "IsFakeClient(int playerId)", "contents": "IsFakeClient(${1:int playerId})"},
		{ "trigger": "HaveAllPlayersJoined()", "contents": "HaveAllPlayersJoined()"},
		{ "trigger": "GetPlayerLoadedCompletely(int playerId)", "contents": "GetPlayerLoadedCompletely(${1:int playerId})"},
		{ "trigger": "SetPlayerReservedState(int playerId,bool reserved)", "contents": "SetPlayerReservedState(${1:int playerId},${2:bool reserved})"},
		{ "trigger": "GetPlayerReservedState(int playerId)", "contents": "GetPlayerReservedState(${1:int playerId})"},
		{ "trigger": "GetConnectionState(int playerId)", "contents": "GetConnectionState(${1:int playerId})"},
		{ "trigger": "HeroLevelUp(int playerId)", "contents": "HeroLevelUp(${1:int playerId})"},
		{ "trigger": "SetLastBuybackTime(int playerId,int time)", "contents": "SetLastBuybackTime(${1:int playerId},${2:int time})"},
		{ "trigger": "GetPlayerName(int playerId)", "contents": "GetPlayerName(${1:int playerId})"},
		{ "trigger": "GetUnitShareMaskForPlayer(int playerId,int otherPlayerId)", "contents": "GetUnitShareMaskForPlayer(${1:int playerId},${2:int otherPlayerId})"},
		{ "trigger": "IsHeroSharedWithPlayerID(int playerId,int otherPlayerId)", "contents": "IsHeroSharedWithPlayerID(${1:int playerId},${2:int otherPlayerId})"},
		{ "trigger": "AreUnitsSharedWithPlayerID(int playerId,int otherPlayerId)", "contents": "AreUnitsSharedWithPlayerID(${1:int playerId},${2:int otherPlayerId})"},
		{ "trigger": "IsDisableHelpSetForPlayerID(int playerId,int otherPlayerId)", "contents": "IsDisableHelpSetForPlayerID(${1:int playerId},${2:int otherPlayerId})"},
		{ "trigger": "SetUnitShareMaskForPlayer(int unKnown,int unKnown , int unKnown , bool unKnown)", "contents": "SetUnitShareMaskForPlayer(${1:int unKnown},${2:int unKnown},${3:int unKnown},${4:bool unKnown})"},
		{ "trigger": "GetNumCouriersForTeam(int team)", "contents": "GetNumCouriersForTeam(${1:int team})"},
		{ "trigger": "GetNthCourierForTeam(int index,int team)", "contents": "GetNthCourierForTeam(${1:int index},${2:int team})"},
		{ "trigger": "SetBuybackCooldownTime(int playerId,float cooldown)", "contents": "SetBuybackCooldownTime(${1:int playerId},${2:float cooldown})"},
		{ "trigger": "SetBuybackGoldLimitTime(int playerId,float buybackGold)", "contents": "SetBuybackGoldLimitTime(${1:int playerId},${2:float buybackGold})"},
		{ "trigger": "ResetBuybackCostTime(int playerId)", "contents": "ResetBuybackCostTime(${1:int playerId})"},
		{ "trigger": "ReplaceHeroWith(int playerId,string heroName , int gold , int exp)", "contents": "ReplaceHeroWith(${1:int playerId},${2:string heroName},${3:int gold},${4:int exp})"},
		{ "trigger": "SetCustomBuybackCost(int playerId,int cost)", "contents": "SetCustomBuybackCost(${1:int playerId},${2:int cost})"},
		{ "trigger": "SetCustomBuybackCooldown(int playerId,float cooldown)", "contents": "SetCustomBuybackCooldown(${1:int playerId},${2:float cooldown})"},
		{ "trigger": "GetCustomBuybackCost(int playerId)", "contents": "GetCustomBuybackCost(${1:int playerId})"},
		{ "trigger": "GetCustomBuybackCooldown(int playerId)", "contents": "GetCustomBuybackCooldown(${1:int playerId})"},
		{ "trigger": "SetCameraTarget(int playerId,hscript target)", "contents": "SetCameraTarget(${1:int playerId},${2:hscript target})"},
		{ "trigger": "GetEventPointsForPlayerID(int playerId)", "contents": "GetEventPointsForPlayerID(${1:int playerId})"},
		{ "trigger": "GetEventPremiumPointsGranted(int playerId)", "contents": "GetEventPremiumPointsGranted(${1:int playerId})"},
		{ "trigger": "GetEventRankGranted(int playerId)", "contents": "GetEventRankGranted(${1:int playerId})"},


		{ "trigger": "CreateTrackingProjectile(hscript projectile)", "contents": "CreateTrackingProjectile(${1:hscript projectile})"},
		{ "trigger": "CreateLinearProjectile(hscript projectile)", "contents": "CreateLinearProjectile(${1:hscript projectile})"},
		{ "trigger": "DestroyLinearProjectile(int projectile)", "contents": "DestroyLinearProjectile(${1:int projectile})"},
		{ "trigger": "ProjectileDodge(hscript projectile)", "contents": "ProjectileDodge(${1:hscript projectile})"},


		{ "trigger": "BeginThink(string thinkName,function func , float intervalInSeconds)", "contents": "BeginThink(${1:string thinkName},${2:function func},${3:float intervalInSeconds})"},
		{ "trigger": "SetContextThink(string thinkName,function func , float intervalInSeconds)", "contents": "SetContextThink(${1:string thinkName},${2:function func},${3:float intervalInSeconds})"},
		{ "trigger": "EndThink(string thinkName)", "contents": "EndThink(${1:string thinkName})"},
		{ "trigger": "SetAlwaysShowPlayerInventory(bool alwaysShow)", "contents": "SetAlwaysShowPlayerInventory(${1:bool alwaysShow})"},
		{ "trigger": "SetGoldSoundDisabled(bool playSound)", "contents": "SetGoldSoundDisabled(${1:bool playSound})"},
		{ "trigger": "SetRecommendedItemsDisabled(bool disableRecItems)", "contents": "SetRecommendedItemsDisabled(${1:bool disableRecItems})"},
		{ "trigger": "SetCameraDistanceOverride(float cameraDistance)", "contents": "SetCameraDistanceOverride(${1:float cameraDistance})"},
		{ "trigger": "SetOverrideSelectionEntity(Unit unit)", "contents": "SetOverrideSelectionEntity(${1:Unit unit})"},
		{ "trigger": "SetRemoveIllusionsOnDeath(bool removeIllusions)", "contents": "SetRemoveIllusionsOnDeath(${1:bool removeIllusions})"},
		{ "trigger": "ClientLoadGridNav()", "contents": "ClientLoadGridNav()"},
		{ "trigger": "SetFogOfWarDisabled(bool enabled)", "contents": "SetFogOfWarDisabled(${1:bool enabled})"},
		{ "trigger": "SetCustomBuybackCostEnabled(bool enabled)", "contents": "SetCustomBuybackCostEnabled(${1:bool enabled})"},
		{ "trigger": "SetCustomBuybackCooldownEnabled(bool enabled)", "contents": "SetCustomBuybackCooldownEnabled(${1:bool enabled})"},
		{ "trigger": "SetTopBarTeamValuesOverride(bool enabled)", "contents": "SetTopBarTeamValuesOverride(${1:bool enabled})"},
		{ "trigger": "SetTopBarTeamValuesVisible(bool visible)", "contents": "SetTopBarTeamValuesVisible(${1:bool visible})"},
		{ "trigger": "SetTopBarTeamValue(int team,int value)", "contents": "SetTopBarTeamValue(${1:int team},${2:int value})"},


		{ "trigger": "LookupAttachment(string attachmentName)", "contents": "LookupAttachment(${1:string attachmentName})"},
		{ "trigger": "GetAttachmentOrigin(int attachmentId)", "contents": "GetAttachmentOrigin(${1:int attachmentId})"},
		{ "trigger": "GetAttachmentAngles(int attachmentId)", "contents": "GetAttachmentAngles(${1:int attachmentId})"},
		{ "trigger": "IsSequenceFinished()", "contents": "IsSequenceFinished()"},
		{ "trigger": "SetBodygroup(int unKnown,int unKnown)", "contents": "SetBodygroup(${1:int unKnown},${2:int unKnown})"},
		{ "trigger": "SetModelScale(float scale,float fadeTimeSeconds)", "contents": "SetModelScale(${1:float scale},${2:float fadeTimeSeconds})"},
		{ "trigger": "GetModelScale()", "contents": "GetModelScale()"},



		{ "trigger": "GetCurrentScene()", "contents": "GetCurrentScene()"},
		{ "trigger": "GetSceneByIndex(int index)", "contents": "GetSceneByIndex(${1:int index})"},



		{ "trigger": "IsAncient()", "contents": "IsAncient()"},
		{ "trigger": "IsNeutralUnitType()", "contents": "IsNeutralUnitType()"},
		{ "trigger": "IsSummoned()", "contents": "IsSummoned()"},
		{ "trigger": "IsCreature()", "contents": "IsCreature()"},
		{ "trigger": "IsHero()", "contents": "IsHero()"},
		{ "trigger": "IsRealHero()", "contents": "IsRealHero()"},
		{ "trigger": "IsTower()", "contents": "IsTower()"},
		{ "trigger": "IsAlive()", "contents": "IsAlive()"},
		{ "trigger": "IsMechanical()", "contents": "IsMechanical()"},
		{ "trigger": "IsPhantom()", "contents": "IsPhantom()"},
		{ "trigger": "SetInitialGoalEntity(Entity goalEntity)", "contents": "SetInitialGoalEntity(${1:Entity goalEntity})"},
		{ "trigger": "GetInitialGoalEntity()", "contents": "GetInitialGoalEntity()"},
		{ "trigger": "SetMustReachEachGoalEntity(bool mustReach)", "contents": "SetMustReachEachGoalEntity(${1:bool mustReach})"},
		{ "trigger": "GetMustReachEachGoalEntity()", "contents": "GetMustReachEachGoalEntity()"},
		{ "trigger": "AddNewModifier(Unit caster,Ability optionalSrcAbility , string modifierName , table modifierData)", "contents": "AddNewModifier(${1:Unit caster},${2:Ability optionalSrcAbility},${3:string modifierName},${4:table modifierData})"},
		{ "trigger": "HasModifier(string modifierName)", "contents": "HasModifier(${1:string modifierName})"},
		{ "trigger": "RemoveModifierByName(string modifierName)", "contents": "RemoveModifierByName(${1:string modifierName})"},
		{ "trigger": "RemoveModifierByNameAndCaster(string name,Unit caster)", "contents": "RemoveModifierByNameAndCaster(${1:string name},${2:Unit caster})"},
		{ "trigger": "AddItem(Item itemName)", "contents": "AddItem(${1:Item itemName})"},
		{ "trigger": "AddAbility(string abilityName)", "contents": "AddAbility(${1:string abilityName})"},
		{ "trigger": "RemoveAbility(string abilityName)", "contents": "RemoveAbility(${1:string abilityName})"},
		{ "trigger": "HasAbility(string abilityName)", "contents": "HasAbility(${1:string abilityName})"},
		{ "trigger": "HasItemInInventory(string itemName)", "contents": "HasItemInInventory(${1:string itemName})"},
		{ "trigger": "FindAbilityByName(string abilityName)", "contents": "FindAbilityByName(${1:string abilityName})"},
		{ "trigger": "GetGoldBounty()", "contents": "GetGoldBounty()"},
		{ "trigger": "SetDeathXP(int xpBounty)", "contents": "SetDeathXP(${1:int xpBounty})"},
		{ "trigger": "GetDeathXP()", "contents": "GetDeathXP()"},
		{ "trigger": "GetUnitName()", "contents": "GetUnitName()"},
		{ "trigger": "GetTeamNumber()", "contents": "GetTeamNumber()"},
		{ "trigger": "GetPlayerOwner()", "contents": "GetPlayerOwner()"},
		{ "trigger": "SetMaximumGoldBounty(int goldBounty)", "contents": "SetMaximumGoldBounty(${1:int goldBounty})"},
		{ "trigger": "SetMinimumGoldBounty(int goldBounty)", "contents": "SetMinimumGoldBounty(${1:int goldBounty})"},
		{ "trigger": "GetTotalPurchasedUpgradeGoldCost()", "contents": "GetTotalPurchasedUpgradeGoldCost()"},
		{ "trigger": "ForceKill(bool playAegisLines)", "contents": "ForceKill(${1:bool playAegisLines})"},
		{ "trigger": "GetBaseDamageMin()", "contents": "GetBaseDamageMin()"},
		{ "trigger": "GetBaseDamageMax()", "contents": "GetBaseDamageMax()"},
		{ "trigger": "Heal(int amount,Unit source)", "contents": "Heal(${1:int amount},${2:Unit source})"},
		{ "trigger": "GetMaxHealth()", "contents": "GetMaxHealth()"},
		{ "trigger": "GetHealthPercent()", "contents": "GetHealthPercent()"},
		{ "trigger": "SetMana(float mana)", "contents": "SetMana(${1:float mana})"},
		{ "trigger": "GetMaxMana()", "contents": "GetMaxMana()"},
		{ "trigger": "RespawnUnit()", "contents": "RespawnUnit()"},
		{ "trigger": "GetLevel()", "contents": "GetLevel()"},
		{ "trigger": "GetItemInSlot(int slotId)", "contents": "GetItemInSlot(${1:int slotId})"},
		{ "trigger": "SetOriginalModel(string originalModel)", "contents": "SetOriginalModel(${1:string originalModel})"},
		{ "trigger": "AddNoDraw()", "contents": "AddNoDraw()"},
		{ "trigger": "RemoveNoDraw()", "contents": "RemoveNoDraw()"},
		{ "trigger": "GetPlayerOwnerID()", "contents": "GetPlayerOwnerID()"},
		{ "trigger": "IsRangedAttacker()", "contents": "IsRangedAttacker()"},
		{ "trigger": "GetCurrentActiveAbility()", "contents": "GetCurrentActiveAbility()"},
		{ "trigger": "MoveToPosition(vector position)", "contents": "MoveToPosition(${1:vector position})"},
		{ "trigger": "MoveToPositionAggressive(vector position)", "contents": "MoveToPositionAggressive(${1:vector position})"},
		{ "trigger": "MoveToNPC(hscript target)", "contents": "MoveToNPC(${1:hscript target})"},
		{ "trigger": "MoveToTargetToAttack(hscript target)", "contents": "MoveToTargetToAttack(${1:hscript target})"},
		{ "trigger": "Hold()", "contents": "Hold()"},
		{ "trigger": "Stop()", "contents": "Stop()"},
		{ "trigger": "CastAbilityToggle(hscript ability,int unKnown)", "contents": "CastAbilityToggle(${1:hscript ability},${2:int unKnown})"},
		{ "trigger": "CastAbilityImmediately(hscript int,int unKnown)", "contents": "CastAbilityImmediately(${1:hscript int},${2:int unKnown})"},
		{ "trigger": "CastAbilityOnPosition(vector vector,hscript ability , int unKnown)", "contents": "CastAbilityOnPosition(${1:vector vector},${2:hscript ability},${3:int unKnown})"},
		{ "trigger": "CastAbilityOnTarget(Unit target,Ability ability , int unKnown)", "contents": "CastAbilityOnTarget(${1:Unit target},${2:Ability ability},${3:int unKnown})"},
		{ "trigger": "CastAbilityNoTarget(Ability ability,int unKnown)", "contents": "CastAbilityNoTarget(${1:Ability ability},${2:int unKnown})"},
		{ "trigger": "DropItemAtPosition(vector vector,hscript item)", "contents": "DropItemAtPosition(${1:vector vector},${2:hscript item})"},
		{ "trigger": "MoveToNPCToGiveItem(hscript target,hscript item)", "contents": "MoveToNPCToGiveItem(${1:hscript target},${2:hscript item})"},
		{ "trigger": "PickupDroppedItem(hscript item)", "contents": "PickupDroppedItem(${1:hscript item})"},
		{ "trigger": "PickupRune(hscript rune)", "contents": "PickupRune(${1:hscript rune})"},
		{ "trigger": "DropItemAtPositionImmediate(hscript item,vector position)", "contents": "DropItemAtPositionImmediate(${1:hscript item},${2:vector position})"},
		{ "trigger": "SetAdditionalBattleMusicWeight(float weight)", "contents": "SetAdditionalBattleMusicWeight(${1:float weight})"},
		{ "trigger": "GetAdditionalBattleMusicWeight()", "contents": "GetAdditionalBattleMusicWeight()"},


		{ "trigger": "GetInvulnCount()", "contents": "GetInvulnCount()"},
		{ "trigger": "SetInvulnCount(int count)", "contents": "SetInvulnCount(${1:int count})"},



		{ "trigger": "CreatureLevelUp(int numLevels)", "contents": "CreatureLevelUp(${1:int numLevels})"},
		{ "trigger": "AddItemDrop(PhysicalItem item)", "contents": "AddItemDrop(${1:PhysicalItem item})"},
		{ "trigger": "SetChampion(bool champion)", "contents": "SetChampion(${1:bool champion})"},
		{ "trigger": "IsChampion()", "contents": "IsChampion()"},
		{ "trigger": "SetHPGain(int hpPerLevel)", "contents": "SetHPGain(${1:int hpPerLevel})"},
		{ "trigger": "SetManaGain(int manaPerLevel)", "contents": "SetManaGain(${1:int manaPerLevel})"},
		{ "trigger": "SetHPRegenGain(float regenPerLevel)", "contents": "SetHPRegenGain(${1:float regenPerLevel})"},
		{ "trigger": "SetManaRegenGain(float manaRegenGain)", "contents": "SetManaRegenGain(${1:float manaRegenGain})"},
		{ "trigger": "SetDamageGain(int damageGain)", "contents": "SetDamageGain(${1:int damageGain})"},
		{ "trigger": "SetArmorGain(float armorGain)", "contents": "SetArmorGain(${1:float armorGain})"},
		{ "trigger": "SetMagicResistanceGain(float magicResistGain)", "contents": "SetMagicResistanceGain(${1:float magicResistGain})"},
		{ "trigger": "SetDisableResistanceGain(float disableResist)", "contents": "SetDisableResistanceGain(${1:float disableResist})"},
		{ "trigger": "SetAttackTimeGain(float attackSpeedGain)", "contents": "SetAttackTimeGain(${1:float attackSpeedGain})"},
		{ "trigger": "SetMoveSpeedGain(int moveSpeedGain)", "contents": "SetMoveSpeedGain(${1:int moveSpeedGain})"},
		{ "trigger": "SetBountyGain(int bountyGain)", "contents": "SetBountyGain(${1:int bountyGain})"},
		{ "trigger": "SetXPGain(int xpGain)", "contents": "SetXPGain(${1:int xpGain})"},


		{ "trigger": "IsHornAlive()", "contents": "IsHornAlive()"},
		{ "trigger": "IsTailAlive()", "contents": "IsTailAlive()"},
		{ "trigger": "GetHorn()", "contents": "GetHorn()"},
		{ "trigger": "GetTail()", "contents": "GetTail()"},


		{ "trigger": "ModifyGold(int goldAmmount,bool reliable , int unKnown)", "contents": "ModifyGold(${1:int goldAmmount},${2:bool reliable},${3:int unKnown})"},
		{ "trigger": "GetGold()", "contents": "GetGold()"},
		{ "trigger": "SetGold(int goldAmmount,bool reliable)", "contents": "SetGold(${1:int goldAmmount},${2:bool reliable})"},
		{ "trigger": "GetCurrentXP()", "contents": "GetCurrentXP()"},
		{ "trigger": "GetPlayerID()", "contents": "GetPlayerID()"},
		{ "trigger": "RespawnHero(bool buyback,bool unKnown , bool unKnown)", "contents": "RespawnHero(${1:bool buyback},${2:bool unKnown},${3:bool unKnown})"},
		{ "trigger": "HeroLevelUp(bool unKnown)", "contents": "HeroLevelUp(${1:bool unKnown})"},
		{ "trigger": "GetAbilityPoints()", "contents": "GetAbilityPoints()"},
		{ "trigger": "SetAbilityPoints(int points)", "contents": "SetAbilityPoints(${1:int points})"},
		{ "trigger": "SetCustomDeathXP(int points)", "contents": "SetCustomDeathXP(${1:int points})"},



		{ "trigger": "GetAbilityName()", "contents": "GetAbilityName()"},
		{ "trigger": "GetSpecialValueFor(string specialValue)", "contents": "GetSpecialValueFor(${1:string specialValue})"},
		{ "trigger": "GetCastRange()", "contents": "GetCastRange()"},
		{ "trigger": "IsFullyCastable()", "contents": "IsFullyCastable()"},
		{ "trigger": "IsChanneling()", "contents": "IsChanneling()"},
		{ "trigger": "IsInAbilityPhase()", "contents": "IsInAbilityPhase()"},
		{ "trigger": "GetCooldown(int level)", "contents": "GetCooldown(${1:int level})"},
		{ "trigger": "EndCooldown()", "contents": "EndCooldown()"},
		{ "trigger": "MarkAbilityButtonDirty()", "contents": "MarkAbilityButtonDirty()"},
		{ "trigger": "SetLevel(int abilityLevel)", "contents": "SetLevel(${1:int abilityLevel})"},


		{ "trigger": "SetPlaybackRate(float playbackrate)", "contents": "SetPlaybackRate(${1:float playbackrate})"},


		{ "trigger": "SetPlaybackRate(float playbackrate)", "contents": "SetPlaybackRate(${1:float playbackrate})"},


		{ "trigger": "SetPlaybackRate(float playbackrate)", "contents": "SetPlaybackRate(${1:float playbackrate})"},


		{ "trigger": "SetPlaybackRate(float playbackrate)", "contents": "SetPlaybackRate(${1:float playbackrate})"},


		{ "trigger": "GetCastCount()", "contents": "GetCastCount()"},


		{ "trigger": "SetTextReplaceValue(int questText,int value)", "contents": "SetTextReplaceValue(${1:int questText},${2:int value})"},
		{ "trigger": "CompleteQuest()", "contents": "CompleteQuest()"},
		{ "trigger": "SetTextReplaceString(string replace)", "contents": "SetTextReplaceString(${1:string replace})"},
		{ "trigger": "AddSubquest(hscript subquest)", "contents": "AddSubquest(${1:hscript subquest})"},
		{ "trigger": "RemoveSubquest(hscript subquest)", "contents": "RemoveSubquest(${1:hscript subquest})"},
		{ "trigger": "GetSubquestByName(string unKnown)", "contents": "GetSubquestByName(${1:string unKnown})"},
		{ "trigger": "GetSubquest(int unKnown)", "contents": "GetSubquest(${1:int unKnown})"},


		{ "trigger": "SetTextReplaceValue(int unKnown,int unKnown)", "contents": "SetTextReplaceValue(${1:int unKnown},${2:int unKnown})"},
		{ "trigger": "CompleteSubquest()", "contents": "CompleteSubquest()"},
		{ "trigger": "SetTextReplaceString(string text)", "contents": "SetTextReplaceString(${1:string text})"},


		{ "trigger": "SetPurchaseTime(float purchaseTime)", "contents": "SetPurchaseTime(${1:float purchaseTime})"},
		{ "trigger": "GetPurchaseTime()", "contents": "GetPurchaseTime()"},
		{ "trigger": "SetPurchaser(Unit unit)", "contents": "SetPurchaser(${1:Unit unit})"},
		{ "trigger": "GetInitialCharges()", "contents": "GetInitialCharges()"},
		{ "trigger": "GetCurrentCharges()", "contents": "GetCurrentCharges()"},
		{ "trigger": "SetCurrentCharges(int charges)", "contents": "SetCurrentCharges(${1:int charges})"},
		{ "trigger": "GetPurchaser()", "contents": "GetPurchaser()"},
		{ "trigger": "Think()", "contents": "Think()"},
		{ "trigger": "IsPermanent()", "contents": "IsPermanent()"},
		{ "trigger": "StacksWithOtherOwners()", "contents": "StacksWithOtherOwners()"},
		{ "trigger": "SetStacksWithOtherOwners(bool stacks)", "contents": "SetStacksWithOtherOwners(${1:bool stacks})"},
		{ "trigger": "GetShareability()", "contents": "GetShareability()"},
		{ "trigger": "GetCost()", "contents": "GetCost()"},
		{ "trigger": "LaunchLoot(bool bool,float float , float float , vector vector)", "contents": "LaunchLoot(${1:bool bool},${2:float float},${3:float float},${4:vector vector})"},
		{ "trigger": "GetContainer()", "contents": "GetContainer()"},


		{ "trigger": "ApplyDataDrivenModifier(hscript hscript,hscript hscript , string string , hscript hscript)", "contents": "ApplyDataDrivenModifier(${1:hscript hscript},${2:hscript hscript},${3:string string},${4:hscript hscript})"},


		{ "trigger": "GetCreationTime()", "contents": "GetCreationTime()"},
		{ "trigger": "GetContainedItem()", "contents": "GetContainedItem()"},
		{ "trigger": "SetContainedItem(Item item)", "contents": "SetContainedItem(${1:Item item})"},


		{ "trigger": "GetPlayerID()", "contents": "GetPlayerID()"},
		{ "trigger": "GetAssignedHero()", "contents": "GetAssignedHero()"},
		{ "trigger": "SetKillCamUnit(hscript unit)", "contents": "SetKillCamUnit(${1:hscript unit})"},
		{ "trigger": "MakeRandomHeroSelection()", "contents": "MakeRandomHeroSelection()"},
		{ "trigger": "SetMusicStatus(int unKnown,float statu)", "contents": "SetMusicStatus(${1:int unKnown},${2:float statu})"},



		{ "trigger": "GetFov()", "contents": "GetFov()"},
		{ "trigger": "SetFov(int degrees,float rate)", "contents": "SetFov(${1:int degrees},${2:float rate})"},
		{ "trigger": "ScreenFade(int int,int int , int int , int int , float float , float float , int int)", "contents": "ScreenFade(${1:int int},${2:int int},${3:int int},${4:int int},${5:float float},${6:float float},${7:int int})"},
		{ "trigger": "Enable()", "contents": "Enable()"},


		{ "trigger": "EstimateLength()", "contents": "EstimateLength()"},
		{ "trigger": "IsPlayingBack()", "contents": "IsPlayingBack()"},
		{ "trigger": "IsPaused()", "contents": "IsPaused()"},
		{ "trigger": "Start(Entity activator)", "contents": "Start(${1:Entity activator})"},
		{ "trigger": "Cancel()", "contents": "Cancel()"},
		{ "trigger": "AddBroadcastTeamTarget(int team)", "contents": "AddBroadcastTeamTarget(${1:int team})"},
		{ "trigger": "RemoveBroadcastTeamTarget(int entityIndex)", "contents": "RemoveBroadcastTeamTarget(${1:int entityIndex})"},
		{ "trigger": "FindNamedEntity(string entityReference)", "contents": "FindNamedEntity(${1:string entityReference})"},
		{ "trigger": "LoadSceneFromString(string sceneName,string vcdFile)", "contents": "LoadSceneFromString(${1:string sceneName},${2:string vcdFile})"},
		{ "trigger": "FindCamera()", "contents": "FindCamera()"},


		{ "trigger": "SetLinearAttenuation(float attenuation)", "contents": "SetLinearAttenuation(${1:float attenuation})"},
		{ "trigger": "SetQuadraticAttenuation(float attenuation)", "contents": "SetQuadraticAttenuation(${1:float attenuation})"},
		{ "trigger": "SetNearRange(float nearRange)", "contents": "SetNearRange(${1:float nearRange})"},
		{ "trigger": "SetFarRange(float farRange)", "contents": "SetFarRange(${1:float farRange})"},
		{ "trigger": "SetVolumetrics(bool on,float intensity , float noise , int planes , float planeOffset)", "contents": "SetVolumetrics(${1:bool on},${2:float intensity},${3:float noise},${4:int planes},${5:float planeOffset})"},


		{ "trigger": "SpawnEntity()", "contents": "SpawnEntity()"},
		{ "trigger": "SpawnEntityAtEntityOrigin(Entity entity)", "contents": "SpawnEntityAtEntityOrigin(${1:Entity entity})"},
		{ "trigger": "SpawnEntityAtNamedEntityOrigin(string entityName)", "contents": "SpawnEntityAtNamedEntityOrigin(${1:string entityName})"},
		{ "trigger": "SpawnEntityAtLocation(vector location,vector orientation)", "contents": "SpawnEntityAtLocation(${1:vector location},${2:vector orientation})"},


		{ "trigger": "StartVote(hscript vote)", "contents": "StartVote(${1:hscript vote})"},


		{ "trigger": "RandomInt(int min,int max)", "contents": "RandomInt(${1:int min},${2:int max})"},
		{ "trigger": "RandomFloat(float min,float max)", "contents": "RandomFloat(${1:float min},${2:float max})"},
		{ "trigger": "RandomVector(float distance)", "contents": "RandomVector(${1:float distance})"},
		{ "trigger": "RollPercentage(int percent)", "contents": "RollPercentage(${1:int percent})"},
		{ "trigger": "DoIncludeScript(string scriptName,hscript unKnown)", "contents": "DoIncludeScript(${1:string scriptName},${2:hscript unKnown})"},
		{ "trigger": "ShowMessage(string message)", "contents": "ShowMessage(${1:string message})"},
		{ "trigger": "GetMapName()", "contents": "GetMapName()"},
		{ "trigger": "SendToConsole(string conCommand)", "contents": "SendToConsole(${1:string conCommand})"},
		{ "trigger": "SendToServerConsole(string conCommand)", "contents": "SendToServerConsole(${1:string conCommand})"},
		{ "trigger": "PrintLinkedConsoleMessage(string message,string conCommand)", "contents": "PrintLinkedConsoleMessage(${1:string message},${2:string conCommand})"},
		{ "trigger": "InitLogFile(string fileName,string log)", "contents": "InitLogFile(${1:string fileName},${2:string log})"},
		{ "trigger": "AppendToLogFile(string message,string log)", "contents": "AppendToLogFile(${1:string message},${2:string log})"},
		{ "trigger": "GetWorldMinX()", "contents": "GetWorldMinX()"},
		{ "trigger": "GetWorldMinY()", "contents": "GetWorldMinY()"},
		{ "trigger": "GetWorldMaxX()", "contents": "GetWorldMaxX()"},
		{ "trigger": "GetWorldMaxY()", "contents": "GetWorldMaxY()"},
		{ "trigger": "Time()", "contents": "Time()"},
		{ "trigger": "GetSystemTime()", "contents": "GetSystemTime()"},
		{ "trigger": "GetSystemDate()", "contents": "GetSystemDate()"},
		{ "trigger": "UTIL_RemoveImmediate(Entity entity)", "contents": "UTIL_RemoveImmediate(${1:Entity entity})"},
		{ "trigger": "DoEntFire(string target,string action , string value , float delay , Entity activator , hscript unKnown)", "contents": "DoEntFire(${1:string target},${2:string action},${3:string value},${4:float delay},${5:Entity activator},${6:hscript unKnown})"},
		{ "trigger": "EntFireByHandle(Entity entity,string target , string value , float delay , Entity activator , hscript unKnown)", "contents": "EntFireByHandle(${1:Entity entity},${2:string target},${3:string value},${4:float delay},${5:Entity activator},${6:hscript unKnown})"},
		{ "trigger": "IsValidEntity(Entity entity)", "contents": "IsValidEntity(${1:Entity entity})"},
		{ "trigger": "IsMarkedForDeletion(Entity entity)", "contents": "IsMarkedForDeletion(${1:Entity entity})"},
		{ "trigger": "DoUniqueString(string uniqueString)", "contents": "DoUniqueString(${1:string uniqueString})"},
		{ "trigger": "ListenToGameEvent(string eventName,function listener , table luaOwner)", "contents": "ListenToGameEvent(${1:string eventName},${2:function listener},${3:table luaOwner})"},
		{ "trigger": "FireGameEvent(string eventName,table params)", "contents": "FireGameEvent(${1:string eventName},${2:table params})"},
		{ "trigger": "FireGameEventLocal(string eventName,table params)", "contents": "FireGameEventLocal(${1:string eventName},${2:table params})"},
		{ "trigger": "PauseGame(bool pause)", "contents": "PauseGame(${1:bool pause})"},
		{ "trigger": "EntIndexToHScript(int entIndex)", "contents": "EntIndexToHScript(${1:int entIndex})"},
		{ "trigger": "PlayerInstanceFromIndex(int playerIndex)", "contents": "PlayerInstanceFromIndex(${1:int playerIndex})"},
		{ "trigger": "GetListenServerHost()", "contents": "GetListenServerHost()"},
		{ "trigger": "ScreenShake(vector center,float aplitude , float frequency , float duration , float radius , int shakeStatus , bool airShake)", "contents": "ScreenShake(${1:vector center},${2:float aplitude},${3:float frequency},${4:float duration},${5:float radius},${6:int shakeStatus},${7:bool airShake})"},
		{ "trigger": "SpawnEntityFromTable(string className,table spawnTable , Entity owner , function spawnCallback , hscript unKnown)", "contents": "SpawnEntityFromTable(${1:string className},${2:table spawnTable},${3:Entity owner},${4:function spawnCallback},${5:hscript unKnown})"},
		{ "trigger": "SpawnEntityGroupFromTable(hscript hscript,bool bool , hscript unKnown)", "contents": "SpawnEntityGroupFromTable(${1:hscript hscript},${2:bool bool},${3:hscript unKnown})"},
		{ "trigger": "PrecacheEntityFromTable(table keyValues)", "contents": "PrecacheEntityFromTable(${1:table keyValues})"},
		{ "trigger": "VectorToAngles(vector vec)", "contents": "VectorToAngles(${1:vector vec})"},
		{ "trigger": "RotatePosition(vector vec,qangle angle , vector origin)", "contents": "RotatePosition(${1:vector vec},${2:qangle angle},${3:vector origin})"},
		{ "trigger": "RotateOrientation(qangle an1,qangle ang2)", "contents": "RotateOrientation(${1:qangle an1},${2:qangle ang2})"},
		{ "trigger": "RotationDelta(qangle ang1,qangle ang2)", "contents": "RotationDelta(${1:qangle ang1},${2:qangle ang2})"},
		{ "trigger": "EmitSoundOn(string soundName,Entity entity)", "contents": "EmitSoundOn(${1:string soundName},${2:Entity entity})"},
		{ "trigger": "EmitSoundOnClient(string soundName,Playerlistening Player)", "contents": "EmitSoundOnClient(${1:string soundName},${2:Playerlistening Player})"},
		{ "trigger": "EmitGlobalSound(string soundName)", "contents": "EmitGlobalSound(${1:string soundName})"},
		{ "trigger": "StopSoundOn(string unKnown,hscript unKnown)", "contents": "StopSoundOn(${1:string unKnown},${2:hscript unKnown})"},
		{ "trigger": "GetPhysVelocity(Entity object)", "contents": "GetPhysVelocity(${1:Entity object})"},
		{ "trigger": "GetPhysAngularVelocity(Entity object)", "contents": "GetPhysAngularVelocity(${1:Entity object})"},
		{ "trigger": "Say(Player from,string text , bool team)", "contents": "Say(${1:Player from},${2:string text},${3:bool team})"},
		{ "trigger": "AddThinkToEnt(Entity entity,string functionName)", "contents": "AddThinkToEnt(${1:Entity entity},${2:string functionName})"},
		{ "trigger": "LoadKeyValues(string file)", "contents": "LoadKeyValues(${1:string file})"},
		{ "trigger": "LoadKeyValuesFromString(string kvString)", "contents": "LoadKeyValuesFromString(${1:string kvString})"},
		{ "trigger": "DebugDrawScreenTextLine(float x,float y , int lineOffset , string text , int r , int g , int b , int a , float duration)", "contents": "DebugDrawScreenTextLine(${1:float x},${2:float y},${3:int lineOffset},${4:string text},${5:int r},${6:int g},${7:int b},${8:int a},${9:float duration})"},
		{ "trigger": "DebugDrawText(vector origin,string text , bool useViewCheck , float duration)", "contents": "DebugDrawText(${1:vector origin},${2:string text},${3:bool useViewCheck},${4:float duration})"},
		{ "trigger": "DebugDrawBox(vector origin,vector min , vector max , int r , int g , int b , int a , float duration)", "contents": "DebugDrawBox(${1:vector origin},${2:vector min},${3:vector max},${4:int r},${5:int g},${6:int b},${7:int a},${8:float duration})"},
		{ "trigger": "DebugDrawLine(vector start,vector end , int r , int g , int b , bool zTest , float duration)", "contents": "DebugDrawLine(${1:vector start},${2:vector end},${3:int r},${4:int g},${5:int b},${6:bool zTest},${7:float duration})"},
		{ "trigger": "DebugDrawCircle(vector center,vector radius , vector rgb , float a , bool ztest , float duration)", "contents": "DebugDrawCircle(${1:vector center},${2:vector radius},${3:vector rgb},${4:float a},${5:bool ztest},${6:float duration})"},
		{ "trigger": "DebugDrawLine_vCol(vector start,vector end , vector rgb , bool ztest , float duration)", "contents": "DebugDrawLine_vCol(${1:vector start},${2:vector end},${3:vector rgb},${4:bool ztest},${5:float duration})"},
		{ "trigger": "DebugDrawBoxDirection(vector center,vector min , vector max , vector forward , vector rgb , float a , float duration)", "contents": "DebugDrawBoxDirection(${1:vector center},${2:vector min},${3:vector max},${4:vector forward},${5:vector rgb},${6:float a},${7:float duration})"},
		{ "trigger": "DebugDrawClear()", "contents": "DebugDrawClear()"},
		{ "trigger": "GetFrameCount()", "contents": "GetFrameCount()"},
		{ "trigger": "IsDedicatedServer()", "contents": "IsDedicatedServer()"},
		{ "trigger": "CreateUnitByName(string name,vector origin , bool findOpenSpot , hscript hscript , int team)", "contents": "CreateUnitByName(${1:string name},${2:vector origin},${3:bool findOpenSpot},${4:hscript hscript},${5:int team})"},
		{ "trigger": "CreateHeroForPlayer(string heroName,PlayerowningPlayer )", "contents": "CreateHeroForPlayer(${1:string heroName},${2:PlayerowningPlayer })"},
		{ "trigger": "CreateItem(string itemName,Unit owningUnit , Unit unitToGetOrigin)", "contents": "CreateItem(${1:string itemName},${2:Unit owningUnit},${3:Unit unitToGetOrigin})"},
		{ "trigger": "vector(position )", "contents": "vector(${1:position })"},
		{ "trigger": "FindClearSpaceForUnit(Unit npc,vector origin , bool )", "contents": "FindClearSpaceForUnit(${1:Unit npc},${2:vector origin},${3:bool })"},
		{ "trigger": "FindUnitsInRadius(int targetTeam,vector position , Entity ent , float radius , int targetTypeTeam , int targetTypeUnit , int x , int y , bool unKnown)", "contents": "FindUnitsInRadius(${1:int targetTeam},${2:vector position},${3:Entity ent},${4:float radius},${5:int targetTypeTeam},${6:int targetTypeUnit},${7:int x},${8:int y},${9:bool unKnown})"},
		{ "trigger": "PrecacheUnit(string unitName)", "contents": "PrecacheUnit(${1:string unitName})"},
		{ "trigger": "GetFrostyPointsForRound(int playerId,int difficulty , int roundNumber)", "contents": "GetFrostyPointsForRound(${1:int playerId},${2:int difficulty},${3:int roundNumber})"},
		{ "trigger": "GetGoldFrostyPointsForRound(int playerId,int difficulty , int roundNumber)", "contents": "GetGoldFrostyPointsForRound(${1:int playerId},${2:int difficulty},${3:int roundNumber})"},
		{ "trigger": "GetFrostyBoostAmount(int playerId,int )", "contents": "GetFrostyBoostAmount(${1:int playerId},${2:int })"},
		{ "trigger": "GetGoldFrostyBoostAmount(int int)", "contents": "GetGoldFrostyBoostAmount(${1:int int})"},
		{ "trigger": "SendFrostyPointsMessageToGC(table data)", "contents": "SendFrostyPointsMessageToGC(${1:table data})"},
		{ "trigger": "SendFrostivusTimeElapsedToGC()", "contents": "SendFrostivusTimeElapsedToGC()"},
		{ "trigger": "ExecuteOrderFromTable(table order)", "contents": "ExecuteOrderFromTable(${1:table order})"},
		{ "trigger": "PrecacheUnitByName(string unitname)", "contents": "PrecacheUnitByName(${1:unitName})"},


		{ "trigger": "szEntityClassName", "contents": "szEntityClassName = \"${1:gaeModeName}\""},
		{ "trigger": "szNativeClassName", "contents": "szEntityClassName = \"${1:dota_base_game_mode}\""},
		{ "trigger": "__index", "contents": "__index = ${1:gameModeArg}"},















<<<<<<< HEAD







=======
>>>>>>> origin/master













		{ "trigger": "ParticleManager_CreateParticle(string particleName,int ParticleAttach , Entity owningEntity , Player viewingPlayer)", "contents": "${1:ParticleManager}:CreateParticle(${2:string particleName},${3:int ParticleAttach},${4:Entity owningEntity},${5:Player viewingPlayer})"},
		{ "trigger": "ParticleManager_CreateParticleForPlayer(string particleName,int ParticleAttach , Entity owningEntity , Player viewingPlayer)", "contents": "${1:ParticleManager}:CreateParticleForPlayer(${2:string particleName},${3:int ParticleAttach},${4:Entity owningEntity},${5:Player viewingPlayer})"},
		{ "trigger": "ParticleManager_SetParticleControl(int particleId,int controlIndex , vector controlData)", "contents": "${1:ParticleManager}:SetParticleControl(${2:int particleId},${3:int controlIndex},${4:vector controlData})"},
		{ "trigger": "ParticleManager_ReleaseParticleIndex(int particleId)", "contents": "${1:ParticleManager}:ReleaseParticleIndex(${2:int particleId})"},


		{ "trigger": "GameRules_State_Get()", "contents": "${1:GameRules}:State_Get()"},
		{ "trigger": "GameRules_GetGameTime()", "contents": "${1:GameRules}:GetGameTime()"},
		{ "trigger": "GameRules_GetGameModeEntity()", "contents": "${1:GameRules}:GetGameModeEntity()"},
		{ "trigger": "GameRules_GetDifficulty()", "contents": "${1:GameRules}:GetDifficulty()"},
		{ "trigger": "GameRules_GetCustomGameDifficulty()", "contents": "${1:GameRules}:GetCustomGameDifficulty()"},
		{ "trigger": "GameRules_Defeated()", "contents": "${1:GameRules}:Defeated()"},
		{ "trigger": "GameRules_ResetDefeated()", "contents": "${1:GameRules}:ResetDefeated()"},
		{ "trigger": "GameRules_SetGameWinner(int team)", "contents": "${1:GameRules}:SetGameWinner(${2:int team})"},
		{ "trigger": "GameRules_MakeTeamLose(int team)", "contents": "${1:GameRules}:MakeTeamLose(${2:int team})"},
		{ "trigger": "GameRules_ResetMap(int unKnown)", "contents": "${1:GameRules}:ResetMap(${2:int unKnown})"},
		{ "trigger": "GameRules_GetDroppedItem(int dropIndex)", "contents": "${1:GameRules}:GetDroppedItem(${2:int dropIndex})"},
		{ "trigger": "GameRules_NumDroppedItems()", "contents": "${1:GameRules}:NumDroppedItems()"},
		{ "trigger": "GameRules_SendCustomMessage(string stringText,int unKnown , int unKnown)", "contents": "${1:GameRules}:SendCustomMessage(${2:string stringText},${3:int unKnown},${4:int unKnown})"},
		{ "trigger": "GameRules_SetHeroRespawnEnabled(bool canRespawn)", "contents": "${1:GameRules}:SetHeroRespawnEnabled(${2:bool canRespawn})"},
		{ "trigger": "GameRules_Playtesting_UpdateCustomKeyValues()", "contents": "${1:GameRules}:Playtesting_UpdateCustomKeyValues()"},
		{ "trigger": "GameRules_ResetToHeroSelection()", "contents": "${1:GameRules}:ResetToHeroSelection()"},
		{ "trigger": "GameRules_SetTreeRegrowTime(float seconds)", "contents": "${1:GameRules}:SetTreeRegrowTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetHeroSelectionTime(float seconds)", "contents": "${1:GameRules}:SetHeroSelectionTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetPreGameTime(float seconds)", "contents": "${1:GameRules}:SetPreGameTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetPostGameTime(float seconds)", "contents": "${1:GameRules}:SetPostGameTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetRuneSpawnTime(float seconds)", "contents": "${1:GameRules}:SetRuneSpawnTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetSameHeroSelectionEnabled(bool enabled)", "contents": "${1:GameRules}:SetSameHeroSelectionEnabled(${2:bool enabled})"},
		{ "trigger": "GameRules_SetUseUniversalShopMode(bool enabled)", "contents": "${1:GameRules}:SetUseUniversalShopMode(${2:bool enabled})"},
		{ "trigger": "GameRules_SetTimeOfDay(float time)", "contents": "${1:GameRules}:SetTimeOfDay(${2:float time})"},
		{ "trigger": "GameRules_SetOverlayHealthBarUnit(Unit unit,int style)", "contents": "${1:GameRules}:SetOverlayHealthBarUnit(${2:Unit unit},${3:int style})"},
		{ "trigger": "GameRules_SetHeroMinimapIconSize(int iconSize)", "contents": "${1:GameRules}:SetHeroMinimapIconSize(${2:int iconSize})"},
		{ "trigger": "GameRules_SetCreepMinimapIconScale(float creepScale)", "contents": "${1:GameRules}:SetCreepMinimapIconScale(${2:float creepScale})"},
		{ "trigger": "GameRules_SetRuneMinimapIconScale(float runeScale)", "contents": "${1:GameRules}:SetRuneMinimapIconScale(${2:float runeScale})"},
		{ "trigger": "GameRules_SetSafeToLeave(bool safeToLeave)", "contents": "${1:GameRules}:SetSafeToLeave(${2:bool safeToLeave})"},
		{ "trigger": "GameRules_SetUseCustomHeroXPValues(bool unKnown)", "contents": "${1:GameRules}:SetUseCustomHeroXPValues(${2:bool unKnown})"},
		{ "trigger": "GameRules_SetCustomGameDifficulty(int unKnown)", "contents": "${1:GameRules}:SetCustomGameDifficulty(${2:int unKnown})"},
		{ "trigger": "GameRules_SetGoldTickTime(float unKnown)", "contents": "${1:GameRules}:SetGoldTickTime(${2:float unKnown})"},
		{ "trigger": "GameRules_SetGoldPerTick(int unKnown)", "contents": "${1:GameRules}:SetGoldPerTick(${2:int unKnown})"},
		{ "trigger": "GameRules_SetNianFightStartTime(float unKnown)", "contents": "${1:GameRules}:SetNianFightStartTime(${2:float unKnown})"},
		{ "trigger": "GameRules_GetNianFightStartTime()", "contents": "${1:GameRules}:GetNianFightStartTime()"},
		{ "trigger": "GameRules_GetMatchSignoutComplete()", "contents": "${1:GameRules}:GetMatchSignoutComplete()"},
		{ "trigger": "GameRules_DidMatchSignoutTimeOut()", "contents": "${1:GameRules}:DidMatchSignoutTimeOut()"},
		{ "trigger": "GameRules_GetNianTotalDamageTaken()", "contents": "${1:GameRules}:GetNianTotalDamageTaken()"},


		{ "trigger": "Entities_First()", "contents": "${1:Entities}:First()"},
		{ "trigger": "Entities_Next(Entity startFrom)", "contents": "${1:Entities}:Next(${2:Entity startFrom})"},
		{ "trigger": "Entities_CreateByClassname(string className)", "contents": "${1:Entities}:CreateByClassname(${2:string className})"},
		{ "trigger": "Entities_FindByClassname(Entity startFrom,string className)", "contents": "${1:Entities}:FindByClassname(${2:Entity startFrom},${3:string className})"},
		{ "trigger": "Entities_FindAllByClassname(string className)", "contents": "${1:Entities}:FindAllByClassname(${2:string className})"},
		{ "trigger": "Entities_FindByName(Entity startFrom,string entName)", "contents": "${1:Entities}:FindByName(${2:Entity startFrom},${3:string entName})"},
		{ "trigger": "Entities_FindAllByName(string name)", "contents": "${1:Entities}:FindAllByName(${2:string name})"},
		{ "trigger": "Entities_FindInSphere(Entity startFrom,vector origin , float radius)", "contents": "${1:Entities}:FindInSphere(${2:Entity startFrom},${3:vector origin},${4:float radius})"},
		{ "trigger": "Entities_FindAllInSphere(vector origin,float radius)", "contents": "${1:Entities}:FindAllInSphere(${2:vector origin},${3:float radius})"},
		{ "trigger": "Entities_FindByTarget(Entity startFrom,string targetName)", "contents": "${1:Entities}:FindByTarget(${2:Entity startFrom},${3:string targetName})"},
		{ "trigger": "Entities_FindAllByTarget(string targetName)", "contents": "${1:Entities}:FindAllByTarget(${2:string targetName})"},
		{ "trigger": "Entities_FindByModel(Entity startFrom,string modelName)", "contents": "${1:Entities}:FindByModel(${2:Entity startFrom},${3:string modelName})"},
		{ "trigger": "Entities_FindAllByModel(string modelName)", "contents": "${1:Entities}:FindAllByModel(${2:string modelName})"},
		{ "trigger": "Entities_FindByNameNearest(string entityName,vector origin , float radius)", "contents": "${1:Entities}:FindByNameNearest(${2:string entityName},${3:vector origin},${4:float radius})"},
		{ "trigger": "Entities_FindByNameWithin(Entity startFrom,string entityName , vector origin , float radius)", "contents": "${1:Entities}:FindByNameWithin(${2:Entity startFrom},${3:string entityName},${4:vector origin},${5:float radius})"},
		{ "trigger": "Entities_FindAllByNameWithin(string entityName,vector origin , float radius)", "contents": "${1:Entities}:FindAllByNameWithin(${2:string entityName},${3:vector origin},${4:float radius})"},
		{ "trigger": "Entities_FindByClassnameNearest(string className,vector origin , float radius)", "contents": "${1:Entities}:FindByClassnameNearest(${2:string className},${3:vector origin},${4:float radius})"},
		{ "trigger": "Entities_FindByClassnameWithin(Entity startFrom,string className , vector origin , float radius)", "contents": "${1:Entities}:FindByClassnameWithin(${2:Entity startFrom},${3:string className},${4:vector origin},${5:float radius})"},
		{ "trigger": "Entities_FindAllByClassnameWithin(string className,vector origin , float radius)", "contents": "${1:Entities}:FindAllByClassnameWithin(${2:string className},${3:vector origin},${4:float radius})"},


		{ "trigger": "CScriptHeroList_GetHero(int heroId)", "contents": "${1:CScriptHeroList}:GetHero(${2:int heroId})"},
		{ "trigger": "CScriptHeroList_GetHeroCount()", "contents": "${1:CScriptHeroList}:GetHeroCount()"},
		{ "trigger": "CScriptHeroList_GetAllHeroes()", "contents": "${1:CScriptHeroList}:GetAllHeroes()"},


		{ "trigger": "ConVars_GetFloat(string varName)", "contents": "${1:ConVars}:GetFloat(${2:string varName})"},
		{ "trigger": "ConVars_GetStr(string varName)", "contents": "${1:ConVars}:GetStr(${2:string varName})"},
		{ "trigger": "ConVars_GetBool(string varName)", "contents": "${1:ConVars}:GetBool(${2:string varName})"},
		{ "trigger": "ConVars_RegisterCommand(string varName,function func , string helpText , int flags)", "contents": "${1:ConVars}:RegisterCommand(${2:string varName},${3:function func},${4:string helpText},${5:int flags})"},
		{ "trigger": "ConVars_RegisterConvar(string name,string default , string helpText , int flags)", "contents": "${1:ConVars}:RegisterConvar(${2:string name},${3:string default},${4:string helpText},${5:int flags})"},
		{ "trigger": "ConVars_GetCommandClient()", "contents": "${1:ConVars}:GetCommandClient()"},
		{ "trigger": "ConVars_GetDOTACommandClient()", "contents": "${1:ConVars}:GetDOTACommandClient()"},


		{ "trigger": "CBaseEntity_ConnectOutput(string unKnown,string unKnown)", "contents": "${1:CBaseEntity}:ConnectOutput(${2:string unKnown},${3:string unKnown})"},
		{ "trigger": "CBaseEntity_DisconnectOutput(string unKnown,string unKnown)", "contents": "${1:CBaseEntity}:DisconnectOutput(${2:string unKnown},${3:string unKnown})"},
		{ "trigger": "CBaseEntity_GetHealth()", "contents": "${1:CBaseEntity}:GetHealth()"},
		{ "trigger": "CBaseEntity_SetHealth(int hp)", "contents": "${1:CBaseEntity}:SetHealth(${2:int hp})"},
		{ "trigger": "CBaseEntity_GetMaxHealth()", "contents": "${1:CBaseEntity}:GetMaxHealth()"},
		{ "trigger": "CBaseEntity_SetMaxHealth(int hp)", "contents": "${1:CBaseEntity}:SetMaxHealth(${2:int hp})"},
		{ "trigger": "CBaseEntity_IsAlive()", "contents": "${1:CBaseEntity}:IsAlive()"},
		{ "trigger": "CBaseEntity_Remove()", "contents": "${1:CBaseEntity}:Remove()"},
		{ "trigger": "CBaseEntity_SetModel(string modelName)", "contents": "${1:CBaseEntity}:SetModel(${2:string modelName})"},
		{ "trigger": "CBaseEntity_GetModelName()", "contents": "${1:CBaseEntity}:GetModelName()"},
		{ "trigger": "CBaseEntity_EmitSound(string soundName)", "contents": "${1:CBaseEntity}:EmitSound(${2:string soundName})"},
		{ "trigger": "CBaseEntity_EmitSoundParams(string soundName,int pitch , float volume)", "contents": "${1:CBaseEntity}:EmitSoundParams(${2:string soundName},${3:int pitch},${4:float volume})"},
		{ "trigger": "CBaseEntity_StopSound(string soundName)", "contents": "${1:CBaseEntity}:StopSound(${2:string soundName})"},
		{ "trigger": "CBaseEntity_PrecacheSoundScript(string soundName)", "contents": "${1:CBaseEntity}:PrecacheSoundScript(${2:string soundName})"},
		{ "trigger": "CBaseEntity_GetSoundDuration(string soundName,string actorModelname)", "contents": "${1:CBaseEntity}:GetSoundDuration(${2:string soundName},${3:string actorModelname})"},
		{ "trigger": "CBaseEntity_GetClassname()", "contents": "${1:CBaseEntity}:GetClassname()"},
		{ "trigger": "CBaseEntity_GetName()", "contents": "${1:CBaseEntity}:GetName()"},
		{ "trigger": "CBaseEntity_GetPreTemplateName()", "contents": "${1:CBaseEntity}:GetPreTemplateName()"},
		{ "trigger": "CBaseEntity_GetAbsOrigin()", "contents": "${1:CBaseEntity}:GetAbsOrigin()"},
		{ "trigger": "CBaseEntity_SetAbsOrigin(vector vec)", "contents": "${1:CBaseEntity}:SetAbsOrigin(${2:vector vec})"},
		{ "trigger": "CBaseEntity_GetOrigin()", "contents": "${1:CBaseEntity}:GetOrigin()"},
		{ "trigger": "CBaseEntity_SetAbsOrigin(vector vec)", "contents": "${1:CBaseEntity}:SetAbsOrigin(${2:vector vec})"},
		{ "trigger": "CBaseEntity_SetOrigin(vector vec)", "contents": "${1:CBaseEntity}:SetOrigin(${2:vector vec})"},
		{ "trigger": "CBaseEntity_GetForwardVector()", "contents": "${1:CBaseEntity}:GetForwardVector()"},
		{ "trigger": "CBaseEntity_GetRightVector()", "contents": "${1:CBaseEntity}:GetRightVector()"},
		{ "trigger": "CBaseEntity_GetUpVector()", "contents": "${1:CBaseEntity}:GetUpVector()"},
		{ "trigger": "CBaseEntity_SetForwardVector(vector forward)", "contents": "${1:CBaseEntity}:SetForwardVector(${2:vector forward})"},
		{ "trigger": "CBaseEntity_GetVelocity()", "contents": "${1:CBaseEntity}:GetVelocity()"},
		{ "trigger": "CBaseEntity_SetVelocity(vector velocity)", "contents": "${1:CBaseEntity}:SetVelocity(${2:vector velocity})"},
		{ "trigger": "CBaseEntity_SetAngularVelocity(float pitch,float yaw , float roll)", "contents": "${1:CBaseEntity}:SetAngularVelocity(${2:float pitch},${3:float yaw},${4:float roll})"},
		{ "trigger": "CBaseEntity_GetAngularVelocity()", "contents": "${1:CBaseEntity}:GetAngularVelocity()"},
		{ "trigger": "CBaseEntity_GetCenter()", "contents": "${1:CBaseEntity}:GetCenter()"},
		{ "trigger": "CBaseEntity_EyePosition()", "contents": "${1:CBaseEntity}:EyePosition()"},
		{ "trigger": "CBaseEntity_SetAngles(float pitch,float yaw , float roll)", "contents": "${1:CBaseEntity}:SetAngles(${2:float pitch},${3:float yaw},${4:float roll})"},
		{ "trigger": "CBaseEntity_GetAngles()", "contents": "${1:CBaseEntity}:GetAngles()"},
		{ "trigger": "CBaseEntity_SetSize(vector vec,vector vec)", "contents": "${1:CBaseEntity}:SetSize(${2:vector vec},${3:vector vec})"},
		{ "trigger": "CBaseEntity_GetBoundingMins()", "contents": "${1:CBaseEntity}:GetBoundingMins()"},
		{ "trigger": "CBaseEntity_GetBoundingMaxs()", "contents": "${1:CBaseEntity}:GetBoundingMaxs()"},
		{ "trigger": "CBaseEntity_Destroy()", "contents": "${1:CBaseEntity}:Destroy()"},
		{ "trigger": "CBaseEntity_SetOwner(Entity parent)", "contents": "${1:CBaseEntity}:SetOwner(${2:Entity parent})"},
		{ "trigger": "CBaseEntity_GetTeam()", "contents": "${1:CBaseEntity}:GetTeam()"},
		{ "trigger": "CBaseEntity_SetTeam(int team)", "contents": "${1:CBaseEntity}:SetTeam(${2:int team})"},
		{ "trigger": "CBaseEntity_GetMoveParent()", "contents": "${1:CBaseEntity}:GetMoveParent()"},
		{ "trigger": "CBaseEntity_GetRootMoveParent()", "contents": "${1:CBaseEntity}:GetRootMoveParent()"},
		{ "trigger": "CBaseEntity_FirstMoveChild()", "contents": "${1:CBaseEntity}:FirstMoveChild()"},
		{ "trigger": "CBaseEntity_NextMovePeer()", "contents": "${1:CBaseEntity}:NextMovePeer()"},
		{ "trigger": "CBaseEntity___KeyValueFromString(string key,string value)", "contents": "${1:CBaseEntity}:__KeyValueFromString(${2:string key},${3:string value})"},
		{ "trigger": "CBaseEntity___KeyValueFromFloat(string key,float value)", "contents": "${1:CBaseEntity}:__KeyValueFromFloat(${2:string key},${3:float value})"},
		{ "trigger": "CBaseEntity___KeyValueFromInt(string key,int value)", "contents": "${1:CBaseEntity}:__KeyValueFromInt(${2:string key},${3:int value})"},
		{ "trigger": "CBaseEntity___KeyValueFromVector(string key,vector value)", "contents": "${1:CBaseEntity}:__KeyValueFromVector(${2:string key},${3:vector value})"},
		{ "trigger": "CBaseEntity_Trigger()", "contents": "${1:CBaseEntity}:Trigger()"},
		{ "trigger": "CBaseEntity_ValidateScriptScope()", "contents": "${1:CBaseEntity}:ValidateScriptScope()"},
		{ "trigger": "CBaseEntity_GetScriptScope()", "contents": "${1:CBaseEntity}:GetScriptScope()"},
		{ "trigger": "CBaseEntity_GetScriptId()", "contents": "${1:CBaseEntity}:GetScriptId()"},
		{ "trigger": "CBaseEntity_GetOwner()", "contents": "${1:CBaseEntity}:GetOwner()"},
		{ "trigger": "CBaseEntity_entindex()", "contents": "${1:CBaseEntity}:entindex()"},


		{ "trigger": "Players_SetHasRepicked(int playerId)", "contents": "${1:Players}:SetHasRepicked(${2:int playerId})"},
		{ "trigger": "Players_HasRepicked(int playerId)", "contents": "${1:Players}:HasRepicked(${2:int playerId})"},
		{ "trigger": "Players_SetHasRandomed(int playerId)", "contents": "${1:Players}:SetHasRandomed(${2:int playerId})"},
		{ "trigger": "Players_HasRandomed(int playerId)", "contents": "${1:Players}:HasRandomed(${2:int playerId})"},
		{ "trigger": "Players_IsValidTeamPlayerID(int playerId)", "contents": "${1:Players}:IsValidTeamPlayerID(${2:int playerId})"},
		{ "trigger": "Players_IsValidTeamPlayer(int playerId)", "contents": "${1:Players}:IsValidTeamPlayer(${2:int playerId})"},
		{ "trigger": "Players_IsValidPlayerID(int playerId)", "contents": "${1:Players}:IsValidPlayerID(${2:int playerId})"},
		{ "trigger": "Players_IsValidPlayer(int playerId)", "contents": "${1:Players}:IsValidPlayer(${2:int playerId})"},
		{ "trigger": "Players_GetLevel(int playerId)", "contents": "${1:Players}:GetLevel(${2:int playerId})"},
		{ "trigger": "Players_IncrementKills(int playerId,int kills)", "contents": "${1:Players}:IncrementKills(${2:int playerId},${3:int kills})"},
		{ "trigger": "Players_IncrementAssists(int playerId)", "contents": "${1:Players}:IncrementAssists(${2:int playerId})"},
		{ "trigger": "Players_IncrementDeaths(int playerId)", "contents": "${1:Players}:IncrementDeaths(${2:int playerId})"},
		{ "trigger": "Players_GetKills(int playerId)", "contents": "${1:Players}:GetKills(${2:int playerId})"},
		{ "trigger": "Players_GetAssists(int playerId)", "contents": "${1:Players}:GetAssists(${2:int playerId})"},
		{ "trigger": "Players_GetDeaths(int playerId)", "contents": "${1:Players}:GetDeaths(${2:int playerId})"},
		{ "trigger": "Players_GetStuns(int playerId)", "contents": "${1:Players}:GetStuns(${2:int playerId})"},
		{ "trigger": "Players_GetHealing(int playerId)", "contents": "${1:Players}:GetHealing(${2:int playerId})"},
		{ "trigger": "Players_GetTowerKills(int playerId)", "contents": "${1:Players}:GetTowerKills(${2:int playerId})"},
		{ "trigger": "Players_GetRoshanKills(int playerId)", "contents": "${1:Players}:GetRoshanKills(${2:int playerId})"},
		{ "trigger": "Players_GetTeamKills(int playerId)", "contents": "${1:Players}:GetTeamKills(${2:int playerId})"},
		{ "trigger": "Players_IncrementStreak(int playerId)", "contents": "${1:Players}:IncrementStreak(${2:int playerId})"},
		{ "trigger": "Players_ClearStreak(int playerId)", "contents": "${1:Players}:ClearStreak(${2:int playerId})"},
		{ "trigger": "Players_GetStreak(int playerId)", "contents": "${1:Players}:GetStreak(${2:int playerId})"},
		{ "trigger": "Players_ModifyGold(int playerId,int goldAmt , bool reliable , int unknown)", "contents": "${1:Players}:ModifyGold(${2:int playerId},${3:int goldAmt},${4:bool reliable},${5:int unknown})"},
		{ "trigger": "Players_SetGold(int playerId,int goldAmt , bool reliable)", "contents": "${1:Players}:SetGold(${2:int playerId},${3:int goldAmt},${4:bool reliable})"},
		{ "trigger": "Players_SpendGold(int playerId,int amt , int unknown)", "contents": "${1:Players}:SpendGold(${2:int playerId},${3:int amt},${4:int unknown})"},
		{ "trigger": "Players_GetGold(int playerId)", "contents": "${1:Players}:GetGold(${2:int playerId})"},
		{ "trigger": "Players_GetReliableGold(int playerId)", "contents": "${1:Players}:GetReliableGold(${2:int playerId})"},
		{ "trigger": "Players_GetUnreliableGold(int playerId)", "contents": "${1:Players}:GetUnreliableGold(${2:int playerId})"},
		{ "trigger": "Players_ResetTotalEarnedGold(int playerId)", "contents": "${1:Players}:ResetTotalEarnedGold(${2:int playerId})"},
		{ "trigger": "Players_GetTotalEarnedGold(int playerId)", "contents": "${1:Players}:GetTotalEarnedGold(${2:int playerId})"},
		{ "trigger": "Players_GetTotalGoldSpent(int playerId)", "contents": "${1:Players}:GetTotalGoldSpent(${2:int playerId})"},
		{ "trigger": "Players_AddGoldSpentOnSupport(int unknown,int unknown)", "contents": "${1:Players}:AddGoldSpentOnSupport(${2:int unknown},${3:int unknown})"},
		{ "trigger": "Players_GetGoldSpentOnSupport(int playerId)", "contents": "${1:Players}:GetGoldSpentOnSupport(${2:int playerId})"},
		{ "trigger": "Players_GetGoldSpentOnConsumables(int playerId)", "contents": "${1:Players}:GetGoldSpentOnConsumables(${2:int playerId})"},
		{ "trigger": "Players_GetGoldSpentOnItems(int playerId)", "contents": "${1:Players}:GetGoldSpentOnItems(${2:int playerId})"},
		{ "trigger": "Players_GetGoldLostToDeath(int playerId)", "contents": "${1:Players}:GetGoldLostToDeath(${2:int playerId})"},
		{ "trigger": "Players_GetGoldSpentOnBuybacks(int playerId)", "contents": "${1:Players}:GetGoldSpentOnBuybacks(${2:int playerId})"},
		{ "trigger": "Players_GetGoldPerMin(int playerId)", "contents": "${1:Players}:GetGoldPerMin(${2:int playerId})"},
		{ "trigger": "Players_GetXPPerMin(int playerId)", "contents": "${1:Players}:GetXPPerMin(${2:int playerId})"},
		{ "trigger": "Players_GetAegisPickups(int playerId)", "contents": "${1:Players}:GetAegisPickups(${2:int playerId})"},
		{ "trigger": "Players_AddAegisPickup(int playerId)", "contents": "${1:Players}:AddAegisPickup(${2:int playerId})"},
		{ "trigger": "Players_GetRunePickups(int playerId)", "contents": "${1:Players}:GetRunePickups(${2:int playerId})"},
		{ "trigger": "Players_AddRunePickup(int playerId)", "contents": "${1:Players}:AddRunePickup(${2:int playerId})"},
		{ "trigger": "Players_GetNumConsumablesPurchased(int playerId)", "contents": "${1:Players}:GetNumConsumablesPurchased(${2:int playerId})"},
		{ "trigger": "Players_GetNumItemsPurchased(int playerId)", "contents": "${1:Players}:GetNumItemsPurchased(${2:int playerId})"},
		{ "trigger": "Players_GetTimeOfLastItemPurchase(int playerId)", "contents": "${1:Players}:GetTimeOfLastItemPurchase(${2:int playerId})"},
		{ "trigger": "Players_GetTimeOfLastConsumablePurchase(int playerId)", "contents": "${1:Players}:GetTimeOfLastConsumablePurchase(${2:int playerId})"},
		{ "trigger": "Players_GetTimeOfLastDeath(int playerId)", "contents": "${1:Players}:GetTimeOfLastDeath(${2:int playerId})"},
		{ "trigger": "Players_GetRespawnSeconds(int playerId)", "contents": "${1:Players}:GetRespawnSeconds(${2:int playerId})"},
		{ "trigger": "Players_IncrementTotalEarnedXP(int playerId,int amt)", "contents": "${1:Players}:IncrementTotalEarnedXP(${2:int playerId},${3:int amt})"},
		{ "trigger": "Players_GetTotalEarnedXP(int playerId)", "contents": "${1:Players}:GetTotalEarnedXP(${2:int playerId})"},
		{ "trigger": "Players_AddClaimedFarm(int playerId,float farm)", "contents": "${1:Players}:AddClaimedFarm(${2:int playerId},${3:float farm})"},
		{ "trigger": "Players_GetClaimedFarm(int playerId)", "contents": "${1:Players}:GetClaimedFarm(${2:int playerId})"},
		{ "trigger": "Players_GetRawPlayerDamage(int playerId)", "contents": "${1:Players}:GetRawPlayerDamage(${2:int playerId})"},
		{ "trigger": "Players_ClearRawPlayerDamageMatrix(int playerId)", "contents": "${1:Players}:ClearRawPlayerDamageMatrix(${2:int playerId})"},
		{ "trigger": "Players_ClearKillsMatrix(int playerId)", "contents": "${1:Players}:ClearKillsMatrix(${2:int playerId})"},
		{ "trigger": "Players_GetTowerDamageTaken(int playerId)", "contents": "${1:Players}:GetTowerDamageTaken(${2:int playerId})"},
		{ "trigger": "Players_GetCreepDamageTaken(int playerId)", "contents": "${1:Players}:GetCreepDamageTaken(${2:int playerId})"},
		{ "trigger": "Players_GetHeroDamageTaken(int playerId)", "contents": "${1:Players}:GetHeroDamageTaken(${2:int playerId})"},
		{ "trigger": "Players_GetDamageDoneToHero(int playerId,int heroId)", "contents": "${1:Players}:GetDamageDoneToHero(${2:int playerId},${3:int heroId})"},
		{ "trigger": "Players_GetKillsDoneToHero(int playerId,int heroId)", "contents": "${1:Players}:GetKillsDoneToHero(${2:int playerId},${3:int heroId})"},
		{ "trigger": "Players_GetSelectedHeroName(int playerId)", "contents": "${1:Players}:GetSelectedHeroName(${2:int playerId})"},
		{ "trigger": "Players_GetSelectedHeroID(int playerId)", "contents": "${1:Players}:GetSelectedHeroID(${2:int playerId})"},
		{ "trigger": "Players_IsHeroSelected(string heroName)", "contents": "${1:Players}:IsHeroSelected(${2:string heroName})"},
		{ "trigger": "Players_WhoSelectedHero(string heroName)", "contents": "${1:Players}:WhoSelectedHero(${2:string heroName})"},
		{ "trigger": "Players_GetSelectedHeroEntity(int playerId)", "contents": "${1:Players}:GetSelectedHeroEntity(${2:int playerId})"},
		{ "trigger": "Players_HasSelectedHero(int playerId)", "contents": "${1:Players}:HasSelectedHero(${2:int playerId})"},
		{ "trigger": "Players_GetPlayer(int playerId)", "contents": "${1:Players}:GetPlayer(${2:int playerId})"},
		{ "trigger": "Players_GetNthPlayerIDOnTeam(int index,int team)", "contents": "${1:Players}:GetNthPlayerIDOnTeam(${2:int index},${3:int team})"},
		{ "trigger": "Players_IncrementLastHits(int playerId)", "contents": "${1:Players}:IncrementLastHits(${2:int playerId})"},
		{ "trigger": "Players_GetLastHits(int playerId)", "contents": "${1:Players}:GetLastHits(${2:int playerId})"},
		{ "trigger": "Players_IncrementGoldBagsCollected(int playerId)", "contents": "${1:Players}:IncrementGoldBagsCollected(${2:int playerId})"},
		{ "trigger": "Players_GetGoldBagsCollected(int playerId)", "contents": "${1:Players}:GetGoldBagsCollected(${2:int playerId})"},
		{ "trigger": "Players_IncrementLastHitStreak(int playerId)", "contents": "${1:Players}:IncrementLastHitStreak(${2:int playerId})"},
		{ "trigger": "Players_ClearLastHitStreak(int playerId)", "contents": "${1:Players}:ClearLastHitStreak(${2:int playerId})"},
		{ "trigger": "Players_GetLastHitStreak(int playerId)", "contents": "${1:Players}:GetLastHitStreak(${2:int playerId})"},
		{ "trigger": "Players_IncrementLastHitMultikill(int playerId)", "contents": "${1:Players}:IncrementLastHitMultikill(${2:int playerId})"},
		{ "trigger": "Players_ClearLastHitMultikill(int playerId)", "contents": "${1:Players}:ClearLastHitMultikill(${2:int playerId})"},
		{ "trigger": "Players_GetLastHitMultikill(int playerId)", "contents": "${1:Players}:GetLastHitMultikill(${2:int playerId})"},
		{ "trigger": "Players_IncrementNearbyCreepDeaths(int playerId)", "contents": "${1:Players}:IncrementNearbyCreepDeaths(${2:int playerId})"},
		{ "trigger": "Players_GetNearbyCreepDeaths(int playerId)", "contents": "${1:Players}:GetNearbyCreepDeaths(${2:int playerId})"},
		{ "trigger": "Players_IncrementDenies(int playerId)", "contents": "${1:Players}:IncrementDenies(${2:int playerId})"},
		{ "trigger": "Players_GetDenies(int playerId)", "contents": "${1:Players}:GetDenies(${2:int playerId})"},
		{ "trigger": "Players_IncrementClaimedMisses(int playerId)", "contents": "${1:Players}:IncrementClaimedMisses(${2:int playerId})"},
		{ "trigger": "Players_GetClaimedMisses(int playerId)", "contents": "${1:Players}:GetClaimedMisses(${2:int playerId})"},
		{ "trigger": "Players_IncrementClaimedDenies(int playerId)", "contents": "${1:Players}:IncrementClaimedDenies(${2:int playerId})"},
		{ "trigger": "Players_GetClaimedDenies(int playerId)", "contents": "${1:Players}:GetClaimedDenies(${2:int playerId})"},
		{ "trigger": "Players_IncrementMisses(int playerId)", "contents": "${1:Players}:IncrementMisses(${2:int playerId})"},
		{ "trigger": "Players_GetMisses(int playerId)", "contents": "${1:Players}:GetMisses(${2:int playerId})"},
		{ "trigger": "Players_UpdateTeamSlot(int playerId,int slot)", "contents": "${1:Players}:UpdateTeamSlot(${2:int playerId},${3:int slot})"},
		{ "trigger": "Players_GetTeam(int playerId)", "contents": "${1:Players}:GetTeam(${2:int playerId})"},
		{ "trigger": "Players_IsBroadcaster(int playerId)", "contents": "${1:Players}:IsBroadcaster(${2:int playerId})"},
		{ "trigger": "Players_GetBroadcasterChannel(int playerId)", "contents": "${1:Players}:GetBroadcasterChannel(${2:int playerId})"},
		{ "trigger": "Players_GetBroadcasterChannelSlot(int playerId)", "contents": "${1:Players}:GetBroadcasterChannelSlot(${2:int playerId})"},
		{ "trigger": "Players_GetSteamAccountID(int playerId)", "contents": "${1:Players}:GetSteamAccountID(${2:int playerId})"},
		{ "trigger": "Players_IsFakeClient(int playerId)", "contents": "${1:Players}:IsFakeClient(${2:int playerId})"},
		{ "trigger": "Players_HaveAllPlayersJoined()", "contents": "${1:Players}:HaveAllPlayersJoined()"},
		{ "trigger": "Players_GetPlayerLoadedCompletely(int playerId)", "contents": "${1:Players}:GetPlayerLoadedCompletely(${2:int playerId})"},
		{ "trigger": "Players_SetPlayerReservedState(int playerId,bool reserved)", "contents": "${1:Players}:SetPlayerReservedState(${2:int playerId},${3:bool reserved})"},
		{ "trigger": "Players_GetPlayerReservedState(int playerId)", "contents": "${1:Players}:GetPlayerReservedState(${2:int playerId})"},
		{ "trigger": "Players_GetConnectionState(int playerId)", "contents": "${1:Players}:GetConnectionState(${2:int playerId})"},
		{ "trigger": "Players_HeroLevelUp(int playerId)", "contents": "${1:Players}:HeroLevelUp(${2:int playerId})"},
		{ "trigger": "Players_SetLastBuybackTime(int playerId,int time)", "contents": "${1:Players}:SetLastBuybackTime(${2:int playerId},${3:int time})"},
		{ "trigger": "Players_GetPlayerName(int playerId)", "contents": "${1:Players}:GetPlayerName(${2:int playerId})"},
		{ "trigger": "Players_GetUnitShareMaskForPlayer(int playerId,int otherPlayerId)", "contents": "${1:Players}:GetUnitShareMaskForPlayer(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "Players_IsHeroSharedWithPlayerID(int playerId,int otherPlayerId)", "contents": "${1:Players}:IsHeroSharedWithPlayerID(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "Players_AreUnitsSharedWithPlayerID(int playerId,int otherPlayerId)", "contents": "${1:Players}:AreUnitsSharedWithPlayerID(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "Players_IsDisableHelpSetForPlayerID(int playerId,int otherPlayerId)", "contents": "${1:Players}:IsDisableHelpSetForPlayerID(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "Players_SetUnitShareMaskForPlayer(int unKnown,int unKnown , int unKnown , bool unKnown)", "contents": "${1:Players}:SetUnitShareMaskForPlayer(${2:int unKnown},${3:int unKnown},${4:int unKnown},${5:bool unKnown})"},
		{ "trigger": "Players_GetNumCouriersForTeam(int team)", "contents": "${1:Players}:GetNumCouriersForTeam(${2:int team})"},
		{ "trigger": "Players_GetNthCourierForTeam(int index,int team)", "contents": "${1:Players}:GetNthCourierForTeam(${2:int index},${3:int team})"},
		{ "trigger": "Players_SetBuybackCooldownTime(int playerId,float cooldown)", "contents": "${1:Players}:SetBuybackCooldownTime(${2:int playerId},${3:float cooldown})"},
		{ "trigger": "Players_SetBuybackGoldLimitTime(int playerId,float buybackGold)", "contents": "${1:Players}:SetBuybackGoldLimitTime(${2:int playerId},${3:float buybackGold})"},
		{ "trigger": "Players_ResetBuybackCostTime(int playerId)", "contents": "${1:Players}:ResetBuybackCostTime(${2:int playerId})"},
		{ "trigger": "Players_ReplaceHeroWith(int playerId,string heroName , int gold , int exp)", "contents": "${1:Players}:ReplaceHeroWith(${2:int playerId},${3:string heroName},${4:int gold},${5:int exp})"},
		{ "trigger": "Players_SetCustomBuybackCost(int playerId,int cost)", "contents": "${1:Players}:SetCustomBuybackCost(${2:int playerId},${3:int cost})"},
		{ "trigger": "Players_SetCustomBuybackCooldown(int playerId,float cooldown)", "contents": "${1:Players}:SetCustomBuybackCooldown(${2:int playerId},${3:float cooldown})"},
		{ "trigger": "Players_GetCustomBuybackCost(int playerId)", "contents": "${1:Players}:GetCustomBuybackCost(${2:int playerId})"},
		{ "trigger": "Players_GetCustomBuybackCooldown(int playerId)", "contents": "${1:Players}:GetCustomBuybackCooldown(${2:int playerId})"},
		{ "trigger": "Players_SetCameraTarget(int playerId,hscript target)", "contents": "${1:Players}:SetCameraTarget(${2:int playerId},${3:hscript target})"},
		{ "trigger": "Players_GetEventPointsForPlayerID(int playerId)", "contents": "${1:Players}:GetEventPointsForPlayerID(${2:int playerId})"},
		{ "trigger": "Players_GetEventPremiumPointsGranted(int playerId)", "contents": "${1:Players}:GetEventPremiumPointsGranted(${2:int playerId})"},
		{ "trigger": "Players_GetEventRankGranted(int playerId)", "contents": "${1:Players}:GetEventRankGranted(${2:int playerId})"},


		{ "trigger": "ProjectileManager_CreateTrackingProjectile(hscript projectile)", "contents": "${1:ProjectileManager}:CreateTrackingProjectile(${2:hscript projectile})"},
		{ "trigger": "ProjectileManager_CreateLinearProjectile(hscript projectile)", "contents": "${1:ProjectileManager}:CreateLinearProjectile(${2:hscript projectile})"},
		{ "trigger": "ProjectileManager_DestroyLinearProjectile(int projectile)", "contents": "${1:ProjectileManager}:DestroyLinearProjectile(${2:int projectile})"},
		{ "trigger": "ProjectileManager_ProjectileDodge(hscript projectile)", "contents": "${1:ProjectileManager}:ProjectileDodge(${2:hscript projectile})"},


		{ "trigger": "CDOTABaseGameMode_BeginThink(string thinkName,function func , float intervalInSeconds)", "contents": "${1:CDOTABaseGameMode}:BeginThink(${2:string thinkName},${3:function func},${4:float intervalInSeconds})"},
		{ "trigger": "CDOTABaseGameMode_EndThink(string thinkName)", "contents": "${1:CDOTABaseGameMode}:EndThink(${2:string thinkName})"},
		{ "trigger": "CDOTABaseGameMode_SetAlwaysShowPlayerInventory(bool alwaysShow)", "contents": "${1:CDOTABaseGameMode}:SetAlwaysShowPlayerInventory(${2:bool alwaysShow})"},
		{ "trigger": "CDOTABaseGameMode_SetGoldSoundDisabled(bool playSound)", "contents": "${1:CDOTABaseGameMode}:SetGoldSoundDisabled(${2:bool playSound})"},
		{ "trigger": "CDOTABaseGameMode_SetRecommendedItemsDisabled(bool disableRecItems)", "contents": "${1:CDOTABaseGameMode}:SetRecommendedItemsDisabled(${2:bool disableRecItems})"},
		{ "trigger": "CDOTABaseGameMode_SetCameraDistanceOverride(float cameraDistance)", "contents": "${1:CDOTABaseGameMode}:SetCameraDistanceOverride(${2:float cameraDistance})"},
		{ "trigger": "CDOTABaseGameMode_SetOverrideSelectionEntity(Unit unit)", "contents": "${1:CDOTABaseGameMode}:SetOverrideSelectionEntity(${2:Unit unit})"},
		{ "trigger": "CDOTABaseGameMode_SetRemoveIllusionsOnDeath(bool removeIllusions)", "contents": "${1:CDOTABaseGameMode}:SetRemoveIllusionsOnDeath(${2:bool removeIllusions})"},
		{ "trigger": "CDOTABaseGameMode_ClientLoadGridNav()", "contents": "${1:CDOTABaseGameMode}:ClientLoadGridNav()"},
		{ "trigger": "CDOTABaseGameMode_SetFogOfWarDisabled(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetFogOfWarDisabled(${2:bool enabled})"},
		{ "trigger": "CDOTABaseGameMode_SetCustomBuybackCostEnabled(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetCustomBuybackCostEnabled(${2:bool enabled})"},
		{ "trigger": "CDOTABaseGameMode_SetCustomBuybackCooldownEnabled(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetCustomBuybackCooldownEnabled(${2:bool enabled})"},
		{ "trigger": "CDOTABaseGameMode_SetTopBarTeamValuesOverride(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetTopBarTeamValuesOverride(${2:bool enabled})"},
		{ "trigger": "CDOTABaseGameMode_SetTopBarTeamValuesVisible(bool visible)", "contents": "${1:CDOTABaseGameMode}:SetTopBarTeamValuesVisible(${2:bool visible})"},
		{ "trigger": "CDOTABaseGameMode_SetTopBarTeamValue(int team,int value)", "contents": "${1:CDOTABaseGameMode}:SetTopBarTeamValue(${2:int team},${3:int value})"},


		{ "trigger": "CBaseAnimating_LookupAttachment(string attachmentName)", "contents": "${1:CBaseAnimating}:LookupAttachment(${2:string attachmentName})"},
		{ "trigger": "CBaseAnimating_GetAttachmentOrigin(int attachmentId)", "contents": "${1:CBaseAnimating}:GetAttachmentOrigin(${2:int attachmentId})"},
		{ "trigger": "CBaseAnimating_GetAttachmentAngles(int attachmentId)", "contents": "${1:CBaseAnimating}:GetAttachmentAngles(${2:int attachmentId})"},
		{ "trigger": "CBaseAnimating_IsSequenceFinished()", "contents": "${1:CBaseAnimating}:IsSequenceFinished()"},
		{ "trigger": "CBaseAnimating_SetBodygroup(int unKnown,int unKnown)", "contents": "${1:CBaseAnimating}:SetBodygroup(${2:int unKnown},${3:int unKnown})"},
		{ "trigger": "CBaseAnimating_SetModelScale(float scale,float fadeTimeSeconds)", "contents": "${1:CBaseAnimating}:SetModelScale(${2:float scale},${3:float fadeTimeSeconds})"},
		{ "trigger": "CBaseAnimating_GetModelScale()", "contents": "${1:CBaseAnimating}:GetModelScale()"},



		{ "trigger": "CBaseFlex_GetCurrentScene()", "contents": "${1:CBaseFlex}:GetCurrentScene()"},
		{ "trigger": "CBaseFlex_GetSceneByIndex(int index)", "contents": "${1:CBaseFlex}:GetSceneByIndex(${2:int index})"},



		{ "trigger": "CDOTA_BaseNPC_IsAncient()", "contents": "${1:CDOTA_BaseNPC}:IsAncient()"},
		{ "trigger": "CDOTA_BaseNPC_IsNeutralUnitType()", "contents": "${1:CDOTA_BaseNPC}:IsNeutralUnitType()"},
		{ "trigger": "CDOTA_BaseNPC_IsSummoned()", "contents": "${1:CDOTA_BaseNPC}:IsSummoned()"},
		{ "trigger": "CDOTA_BaseNPC_IsCreature()", "contents": "${1:CDOTA_BaseNPC}:IsCreature()"},
		{ "trigger": "CDOTA_BaseNPC_IsHero()", "contents": "${1:CDOTA_BaseNPC}:IsHero()"},
		{ "trigger": "CDOTA_BaseNPC_IsRealHero()", "contents": "${1:CDOTA_BaseNPC}:IsRealHero()"},
		{ "trigger": "CDOTA_BaseNPC_IsTower()", "contents": "${1:CDOTA_BaseNPC}:IsTower()"},
		{ "trigger": "CDOTA_BaseNPC_IsAlive()", "contents": "${1:CDOTA_BaseNPC}:IsAlive()"},
		{ "trigger": "CDOTA_BaseNPC_IsMechanical()", "contents": "${1:CDOTA_BaseNPC}:IsMechanical()"},
		{ "trigger": "CDOTA_BaseNPC_IsPhantom()", "contents": "${1:CDOTA_BaseNPC}:IsPhantom()"},
		{ "trigger": "CDOTA_BaseNPC_SetInitialGoalEntity(Entity goalEntity)", "contents": "${1:CDOTA_BaseNPC}:SetInitialGoalEntity(${2:Entity goalEntity})"},
		{ "trigger": "CDOTA_BaseNPC_GetInitialGoalEntity()", "contents": "${1:CDOTA_BaseNPC}:GetInitialGoalEntity()"},
		{ "trigger": "CDOTA_BaseNPC_SetMustReachEachGoalEntity(bool mustReach)", "contents": "${1:CDOTA_BaseNPC}:SetMustReachEachGoalEntity(${2:bool mustReach})"},
		{ "trigger": "CDOTA_BaseNPC_GetMustReachEachGoalEntity()", "contents": "${1:CDOTA_BaseNPC}:GetMustReachEachGoalEntity()"},
		{ "trigger": "CDOTA_BaseNPC_AddNewModifier(Unit caster,Ability optionalSrcAbility , string modifierName , table modifierData)", "contents": "${1:CDOTA_BaseNPC}:AddNewModifier(${2:Unit caster},${3:Ability optionalSrcAbility},${4:string modifierName},${5:table modifierData})"},
		{ "trigger": "CDOTA_BaseNPC_HasModifier(string modifierName)", "contents": "${1:CDOTA_BaseNPC}:HasModifier(${2:string modifierName})"},
		{ "trigger": "CDOTA_BaseNPC_RemoveModifierByName(string modifierName)", "contents": "${1:CDOTA_BaseNPC}:RemoveModifierByName(${2:string modifierName})"},
		{ "trigger": "CDOTA_BaseNPC_RemoveModifierByNameAndCaster(string name,Unit caster)", "contents": "${1:CDOTA_BaseNPC}:RemoveModifierByNameAndCaster(${2:string name},${3:Unit caster})"},
		{ "trigger": "CDOTA_BaseNPC_AddItem(Item itemName)", "contents": "${1:CDOTA_BaseNPC}:AddItem(${2:Item itemName})"},
		{ "trigger": "CDOTA_BaseNPC_AddAbility(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:AddAbility(${2:string abilityName})"},
		{ "trigger": "CDOTA_BaseNPC_RemoveAbility(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:RemoveAbility(${2:string abilityName})"},
		{ "trigger": "CDOTA_BaseNPC_HasAbility(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:HasAbility(${2:string abilityName})"},
		{ "trigger": "CDOTA_BaseNPC_HasItemInInventory(string itemName)", "contents": "${1:CDOTA_BaseNPC}:HasItemInInventory(${2:string itemName})"},
		{ "trigger": "CDOTA_BaseNPC_FindAbilityByName(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:FindAbilityByName(${2:string abilityName})"},
		{ "trigger": "CDOTA_BaseNPC_GetGoldBounty()", "contents": "${1:CDOTA_BaseNPC}:GetGoldBounty()"},
		{ "trigger": "CDOTA_BaseNPC_SetDeathXP(int xpBounty)", "contents": "${1:CDOTA_BaseNPC}:SetDeathXP(${2:int xpBounty})"},
		{ "trigger": "CDOTA_BaseNPC_GetDeathXP()", "contents": "${1:CDOTA_BaseNPC}:GetDeathXP()"},
		{ "trigger": "CDOTA_BaseNPC_GetUnitName()", "contents": "${1:CDOTA_BaseNPC}:GetUnitName()"},
		{ "trigger": "CDOTA_BaseNPC_GetTeamNumber()", "contents": "${1:CDOTA_BaseNPC}:GetTeamNumber()"},
		{ "trigger": "CDOTA_BaseNPC_GetPlayerOwner()", "contents": "${1:CDOTA_BaseNPC}:GetPlayerOwner()"},
		{ "trigger": "CDOTA_BaseNPC_SetMaximumGoldBounty(int goldBounty)", "contents": "${1:CDOTA_BaseNPC}:SetMaximumGoldBounty(${2:int goldBounty})"},
		{ "trigger": "CDOTA_BaseNPC_SetMinimumGoldBounty(int goldBounty)", "contents": "${1:CDOTA_BaseNPC}:SetMinimumGoldBounty(${2:int goldBounty})"},
		{ "trigger": "CDOTA_BaseNPC_GetTotalPurchasedUpgradeGoldCost()", "contents": "${1:CDOTA_BaseNPC}:GetTotalPurchasedUpgradeGoldCost()"},
		{ "trigger": "CDOTA_BaseNPC_ForceKill(bool playAegisLines)", "contents": "${1:CDOTA_BaseNPC}:ForceKill(${2:bool playAegisLines})"},
		{ "trigger": "CDOTA_BaseNPC_GetBaseDamageMin()", "contents": "${1:CDOTA_BaseNPC}:GetBaseDamageMin()"},
		{ "trigger": "CDOTA_BaseNPC_GetBaseDamageMax()", "contents": "${1:CDOTA_BaseNPC}:GetBaseDamageMax()"},
		{ "trigger": "CDOTA_BaseNPC_Heal(int amount,Unit source)", "contents": "${1:CDOTA_BaseNPC}:Heal(${2:int amount},${3:Unit source})"},
		{ "trigger": "CDOTA_BaseNPC_GetMaxHealth()", "contents": "${1:CDOTA_BaseNPC}:GetMaxHealth()"},
		{ "trigger": "CDOTA_BaseNPC_GetHealthPercent()", "contents": "${1:CDOTA_BaseNPC}:GetHealthPercent()"},
		{ "trigger": "CDOTA_BaseNPC_SetMana(float mana)", "contents": "${1:CDOTA_BaseNPC}:SetMana(${2:float mana})"},
		{ "trigger": "CDOTA_BaseNPC_GetMaxMana()", "contents": "${1:CDOTA_BaseNPC}:GetMaxMana()"},
		{ "trigger": "CDOTA_BaseNPC_RespawnUnit()", "contents": "${1:CDOTA_BaseNPC}:RespawnUnit()"},
		{ "trigger": "CDOTA_BaseNPC_GetLevel()", "contents": "${1:CDOTA_BaseNPC}:GetLevel()"},
		{ "trigger": "CDOTA_BaseNPC_GetItemInSlot(int slotId)", "contents": "${1:CDOTA_BaseNPC}:GetItemInSlot(${2:int slotId})"},
		{ "trigger": "CDOTA_BaseNPC_SetOriginalModel(string originalModel)", "contents": "${1:CDOTA_BaseNPC}:SetOriginalModel(${2:string originalModel})"},
		{ "trigger": "CDOTA_BaseNPC_AddNoDraw()", "contents": "${1:CDOTA_BaseNPC}:AddNoDraw()"},
		{ "trigger": "CDOTA_BaseNPC_RemoveNoDraw()", "contents": "${1:CDOTA_BaseNPC}:RemoveNoDraw()"},
		{ "trigger": "CDOTA_BaseNPC_GetPlayerOwnerID()", "contents": "${1:CDOTA_BaseNPC}:GetPlayerOwnerID()"},
		{ "trigger": "CDOTA_BaseNPC_IsRangedAttacker()", "contents": "${1:CDOTA_BaseNPC}:IsRangedAttacker()"},
		{ "trigger": "CDOTA_BaseNPC_GetCurrentActiveAbility()", "contents": "${1:CDOTA_BaseNPC}:GetCurrentActiveAbility()"},
		{ "trigger": "CDOTA_BaseNPC_MoveToPosition(vector position)", "contents": "${1:CDOTA_BaseNPC}:MoveToPosition(${2:vector position})"},
		{ "trigger": "CDOTA_BaseNPC_MoveToPositionAggressive(vector position)", "contents": "${1:CDOTA_BaseNPC}:MoveToPositionAggressive(${2:vector position})"},
		{ "trigger": "CDOTA_BaseNPC_MoveToNPC(hscript target)", "contents": "${1:CDOTA_BaseNPC}:MoveToNPC(${2:hscript target})"},
		{ "trigger": "CDOTA_BaseNPC_MoveToTargetToAttack(hscript target)", "contents": "${1:CDOTA_BaseNPC}:MoveToTargetToAttack(${2:hscript target})"},
		{ "trigger": "CDOTA_BaseNPC_Hold()", "contents": "${1:CDOTA_BaseNPC}:Hold()"},
		{ "trigger": "CDOTA_BaseNPC_Stop()", "contents": "${1:CDOTA_BaseNPC}:Stop()"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityToggle(hscript ability,int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityToggle(${2:hscript ability},${3:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityImmediately(hscript int,int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityImmediately(${2:hscript int},${3:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityOnPosition(vector vector,hscript ability , int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityOnPosition(${2:vector vector},${3:hscript ability},${4:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityOnTarget(Unit target,Ability ability , int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityOnTarget(${2:Unit target},${3:Ability ability},${4:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityNoTarget(Ability ability,int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityNoTarget(${2:Ability ability},${3:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_DropItemAtPosition(vector vector,hscript item)", "contents": "${1:CDOTA_BaseNPC}:DropItemAtPosition(${2:vector vector},${3:hscript item})"},
		{ "trigger": "CDOTA_BaseNPC_MoveToNPCToGiveItem(hscript target,hscript item)", "contents": "${1:CDOTA_BaseNPC}:MoveToNPCToGiveItem(${2:hscript target},${3:hscript item})"},
		{ "trigger": "CDOTA_BaseNPC_PickupDroppedItem(hscript item)", "contents": "${1:CDOTA_BaseNPC}:PickupDroppedItem(${2:hscript item})"},
		{ "trigger": "CDOTA_BaseNPC_PickupRune(hscript rune)", "contents": "${1:CDOTA_BaseNPC}:PickupRune(${2:hscript rune})"},
		{ "trigger": "CDOTA_BaseNPC_DropItemAtPositionImmediate(hscript item,vector position)", "contents": "${1:CDOTA_BaseNPC}:DropItemAtPositionImmediate(${2:hscript item},${3:vector position})"},
		{ "trigger": "CDOTA_BaseNPC_SetAdditionalBattleMusicWeight(float weight)", "contents": "${1:CDOTA_BaseNPC}:SetAdditionalBattleMusicWeight(${2:float weight})"},
		{ "trigger": "CDOTA_BaseNPC_GetAdditionalBattleMusicWeight()", "contents": "${1:CDOTA_BaseNPC}:GetAdditionalBattleMusicWeight()"},


		{ "trigger": "CDOTA_BaseNPC_Building_GetInvulnCount()", "contents": "${1:CDOTA_BaseNPC_Building}:GetInvulnCount()"},
		{ "trigger": "CDOTA_BaseNPC_Building_SetInvulnCount(int count)", "contents": "${1:CDOTA_BaseNPC_Building}:SetInvulnCount(${2:int count})"},



		{ "trigger": "CDOTA_BaseNPC_Creature_CreatureLevelUp(int numLevels)", "contents": "${1:CDOTA_BaseNPC_Creature}:CreatureLevelUp(${2:int numLevels})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_AddItemDrop(PhysicalItem item)", "contents": "${1:CDOTA_BaseNPC_Creature}:AddItemDrop(${2:PhysicalItem item})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetChampion(bool champion)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetChampion(${2:bool champion})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_IsChampion()", "contents": "${1:CDOTA_BaseNPC_Creature}:IsChampion()"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetHPGain(int hpPerLevel)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetHPGain(${2:int hpPerLevel})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetManaGain(int manaPerLevel)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetManaGain(${2:int manaPerLevel})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetHPRegenGain(float regenPerLevel)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetHPRegenGain(${2:float regenPerLevel})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetManaRegenGain(float manaRegenGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetManaRegenGain(${2:float manaRegenGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetDamageGain(int damageGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetDamageGain(${2:int damageGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetArmorGain(float armorGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetArmorGain(${2:float armorGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetMagicResistanceGain(float magicResistGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetMagicResistanceGain(${2:float magicResistGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetDisableResistanceGain(float disableResist)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetDisableResistanceGain(${2:float disableResist})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetAttackTimeGain(float attackSpeedGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetAttackTimeGain(${2:float attackSpeedGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetMoveSpeedGain(int moveSpeedGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetMoveSpeedGain(${2:int moveSpeedGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetBountyGain(int bountyGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetBountyGain(${2:int bountyGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetXPGain(int xpGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetXPGain(${2:int xpGain})"},


		{ "trigger": "CDOTA_Unit_Nian_IsHornAlive()", "contents": "${1:CDOTA_Unit_Nian}:IsHornAlive()"},
		{ "trigger": "CDOTA_Unit_Nian_IsTailAlive()", "contents": "${1:CDOTA_Unit_Nian}:IsTailAlive()"},
		{ "trigger": "CDOTA_Unit_Nian_GetHorn()", "contents": "${1:CDOTA_Unit_Nian}:GetHorn()"},
		{ "trigger": "CDOTA_Unit_Nian_GetTail()", "contents": "${1:CDOTA_Unit_Nian}:GetTail()"},


		{ "trigger": "CDOTA_BaseNPC_Hero_ModifyGold(int goldAmmount,bool reliable , int unKnown)", "contents": "${1:CDOTA_BaseNPC_Hero}:ModifyGold(${2:int goldAmmount},${3:bool reliable},${4:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_GetGold()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetGold()"},
		{ "trigger": "CDOTA_BaseNPC_Hero_SetGold(int goldAmmount,bool reliable)", "contents": "${1:CDOTA_BaseNPC_Hero}:SetGold(${2:int goldAmmount},${3:bool reliable})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_GetCurrentXP()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetCurrentXP()"},
		{ "trigger": "CDOTA_BaseNPC_Hero_GetPlayerID()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetPlayerID()"},
		{ "trigger": "CDOTA_BaseNPC_Hero_RespawnHero(bool buyback,bool unKnown , bool unKnown)", "contents": "${1:CDOTA_BaseNPC_Hero}:RespawnHero(${2:bool buyback},${3:bool unKnown},${4:bool unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_HeroLevelUp(bool unKnown)", "contents": "${1:CDOTA_BaseNPC_Hero}:HeroLevelUp(${2:bool unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_GetAbilityPoints()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetAbilityPoints()"},
		{ "trigger": "CDOTA_BaseNPC_Hero_SetAbilityPoints(int points)", "contents": "${1:CDOTA_BaseNPC_Hero}:SetAbilityPoints(${2:int points})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_SetCustomDeathXP(int points)", "contents": "${1:CDOTA_BaseNPC_Hero}:SetCustomDeathXP(${2:int points})"},



		{ "trigger": "CDOTABaseAbility_GetAbilityName()", "contents": "${1:CDOTABaseAbility}:GetAbilityName()"},
		{ "trigger": "CDOTABaseAbility_GetSpecialValueFor(string specialValue)", "contents": "${1:CDOTABaseAbility}:GetSpecialValueFor(${2:string specialValue})"},
		{ "trigger": "CDOTABaseAbility_GetCastRange()", "contents": "${1:CDOTABaseAbility}:GetCastRange()"},
		{ "trigger": "CDOTABaseAbility_IsFullyCastable()", "contents": "${1:CDOTABaseAbility}:IsFullyCastable()"},
		{ "trigger": "CDOTABaseAbility_IsChanneling()", "contents": "${1:CDOTABaseAbility}:IsChanneling()"},
		{ "trigger": "CDOTABaseAbility_IsInAbilityPhase()", "contents": "${1:CDOTABaseAbility}:IsInAbilityPhase()"},
		{ "trigger": "CDOTABaseAbility_GetCooldown(int level)", "contents": "${1:CDOTABaseAbility}:GetCooldown(${2:int level})"},
		{ "trigger": "CDOTABaseAbility_EndCooldown()", "contents": "${1:CDOTABaseAbility}:EndCooldown()"},
		{ "trigger": "CDOTABaseAbility_MarkAbilityButtonDirty()", "contents": "${1:CDOTABaseAbility}:MarkAbilityButtonDirty()"},
		{ "trigger": "CDOTABaseAbility_SetLevel(int abilityLevel)", "contents": "${1:CDOTABaseAbility}:SetLevel(${2:int abilityLevel})"},


		{ "trigger": "CDOTA_Ability_Animation_Attack_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Animation_Attack}:SetPlaybackRate(${2:float playbackrate})"},


		{ "trigger": "CDOTA_Ability_Animation_Tailspin_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Animation_Tailspin}:SetPlaybackRate(${2:float playbackrate})"},


		{ "trigger": "CDOTA_Ability_Nian_Dive_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Nian_Dive}:SetPlaybackRate(${2:float playbackrate})"},


		{ "trigger": "CDOTA_Ability_Nian_Leap_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Nian_Leap}:SetPlaybackRate(${2:float playbackrate})"},


		{ "trigger": "CDOTA_Ability_Nian_Roar_GetCastCount()", "contents": "${1:CDOTA_Ability_Nian_Roar}:GetCastCount()"},


<<<<<<< HEAD
		{ "trigger": "CDotaQuest_SetTextReplaceValue(int questText,int value)", "contents": "${1:CDotaQuest}:SetTextReplaceValue(${2:int questText},${3:int value})"},
		{ "trigger": "CDotaQuest_CompleteQuest()", "contents": "${1:CDotaQuest}:CompleteQuest()"},
		{ "trigger": "CDotaQuest_SetTextReplaceString(string replace)", "contents": "${1:CDotaQuest}:SetTextReplaceString(${2:string replace})"},
		{ "trigger": "CDotaQuest_AddSubquest(hscript subquest)", "contents": "${1:CDotaQuest}:AddSubquest(${2:hscript subquest})"},
		{ "trigger": "CDotaQuest_RemoveSubquest(hscript subquest)", "contents": "${1:CDotaQuest}:RemoveSubquest(${2:hscript subquest})"},
		{ "trigger": "CDotaQuest_GetSubquestByName(string unKnown)", "contents": "${1:CDotaQuest}:GetSubquestByName(${2:string unKnown})"},
		{ "trigger": "CDotaQuest_GetSubquest(int unKnown)", "contents": "${1:CDotaQuest}:GetSubquest(${2:int unKnown})"},


		{ "trigger": "CDotaSubquestBase_SetTextReplaceValue(int unKnown,int unKnown)", "contents": "${1:CDotaSubquestBase}:SetTextReplaceValue(${2:int unKnown},${3:int unKnown})"},
		{ "trigger": "CDotaSubquestBase_CompleteSubquest()", "contents": "${1:CDotaSubquestBase}:CompleteSubquest()"},
		{ "trigger": "CDotaSubquestBase_SetTextReplaceString(string text)", "contents": "${1:CDotaSubquestBase}:SetTextReplaceString(${2:string text})"},


		{ "trigger": "CDOTA_Item_SetPurchaseTime(float purchaseTime)", "contents": "${1:CDOTA_Item}:SetPurchaseTime(${2:float purchaseTime})"},
		{ "trigger": "CDOTA_Item_GetPurchaseTime()", "contents": "${1:CDOTA_Item}:GetPurchaseTime()"},
		{ "trigger": "CDOTA_Item_SetPurchaser(Unit unit)", "contents": "${1:CDOTA_Item}:SetPurchaser(${2:Unit unit})"},
		{ "trigger": "CDOTA_Item_GetInitialCharges()", "contents": "${1:CDOTA_Item}:GetInitialCharges()"},
		{ "trigger": "CDOTA_Item_GetCurrentCharges()", "contents": "${1:CDOTA_Item}:GetCurrentCharges()"},
		{ "trigger": "CDOTA_Item_SetCurrentCharges(int charges)", "contents": "${1:CDOTA_Item}:SetCurrentCharges(${2:int charges})"},
		{ "trigger": "CDOTA_Item_GetPurchaser()", "contents": "${1:CDOTA_Item}:GetPurchaser()"},
		{ "trigger": "CDOTA_Item_Think()", "contents": "${1:CDOTA_Item}:Think()"},
		{ "trigger": "CDOTA_Item_IsPermanent()", "contents": "${1:CDOTA_Item}:IsPermanent()"},
		{ "trigger": "CDOTA_Item_StacksWithOtherOwners()", "contents": "${1:CDOTA_Item}:StacksWithOtherOwners()"},
		{ "trigger": "CDOTA_Item_SetStacksWithOtherOwners(bool stacks)", "contents": "${1:CDOTA_Item}:SetStacksWithOtherOwners(${2:bool stacks})"},
		{ "trigger": "CDOTA_Item_GetShareability()", "contents": "${1:CDOTA_Item}:GetShareability()"},
		{ "trigger": "CDOTA_Item_GetCost()", "contents": "${1:CDOTA_Item}:GetCost()"},
		{ "trigger": "CDOTA_Item_LaunchLoot(bool bool,float float , float float , vector vector)", "contents": "${1:CDOTA_Item}:LaunchLoot(${2:bool bool},${3:float float},${4:float float},${5:vector vector})"},
		{ "trigger": "CDOTA_Item_GetContainer()", "contents": "${1:CDOTA_Item}:GetContainer()"},
=======
		{ "trigger": "ParticleManager_CreateParticle(string particleName,int ParticleAttach , Entity owningEntity , Player viewingPlayer)", "contents": "${1:ParticleManager}:CreateParticle(${2:string particleName},${3:int ParticleAttach},${4:Entity owningEntity},${5:Player viewingPlayer})"},
		{ "trigger": "ParticleManager_CreateParticleForPlayer(string particleName,int ParticleAttach , Entity owningEntity , Player viewingPlayer)", "contents": "${1:ParticleManager}:CreateParticleForPlayer(${2:string particleName},${3:int ParticleAttach},${4:Entity owningEntity},${5:Player viewingPlayer})"},
		{ "trigger": "ParticleManager_SetParticleControl(int particleId,int controlIndex , vector controlData)", "contents": "${1:ParticleManager}:SetParticleControl(${2:int particleId},${3:int controlIndex},${4:vector controlData})"},
		{ "trigger": "ParticleManager_ReleaseParticleIndex(int particleId)", "contents": "${1:ParticleManager}:ReleaseParticleIndex(${2:int particleId})"},


		{ "trigger": "GameRules_State_Get()", "contents": "${1:GameRules}:State_Get()"},
		{ "trigger": "GameRules_GetGameTime()", "contents": "${1:GameRules}:GetGameTime()"},
		{ "trigger": "GameRules_GetGameModeEntity()", "contents": "${1:GameRules}:GetGameModeEntity()"},
		{ "trigger": "GameRules_GetDifficulty()", "contents": "${1:GameRules}:GetDifficulty()"},
		{ "trigger": "GameRules_GetCustomGameDifficulty()", "contents": "${1:GameRules}:GetCustomGameDifficulty()"},
		{ "trigger": "GameRules_Defeated()", "contents": "${1:GameRules}:Defeated()"},
		{ "trigger": "GameRules_ResetDefeated()", "contents": "${1:GameRules}:ResetDefeated()"},
		{ "trigger": "GameRules_SetGameWinner(int team)", "contents": "${1:GameRules}:SetGameWinner(${2:int team})"},
		{ "trigger": "GameRules_MakeTeamLose(int team)", "contents": "${1:GameRules}:MakeTeamLose(${2:int team})"},
		{ "trigger": "GameRules_ResetMap(int unKnown)", "contents": "${1:GameRules}:ResetMap(${2:int unKnown})"},
		{ "trigger": "GameRules_GetDroppedItem(int dropIndex)", "contents": "${1:GameRules}:GetDroppedItem(${2:int dropIndex})"},
		{ "trigger": "GameRules_NumDroppedItems()", "contents": "${1:GameRules}:NumDroppedItems()"},
		{ "trigger": "GameRules_SendCustomMessage(string stringText,int unKnown , int unKnown)", "contents": "${1:GameRules}:SendCustomMessage(${2:string stringText},${3:int unKnown},${4:int unKnown})"},
		{ "trigger": "GameRules_SetHeroRespawnEnabled(bool canRespawn)", "contents": "${1:GameRules}:SetHeroRespawnEnabled(${2:bool canRespawn})"},
		{ "trigger": "GameRules_Playtesting_UpdateCustomKeyValues()", "contents": "${1:GameRules}:Playtesting_UpdateCustomKeyValues()"},
		{ "trigger": "GameRules_ResetToHeroSelection()", "contents": "${1:GameRules}:ResetToHeroSelection()"},
		{ "trigger": "GameRules_SetTreeRegrowTime(float seconds)", "contents": "${1:GameRules}:SetTreeRegrowTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetHeroSelectionTime(float seconds)", "contents": "${1:GameRules}:SetHeroSelectionTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetPreGameTime(float seconds)", "contents": "${1:GameRules}:SetPreGameTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetPostGameTime(float seconds)", "contents": "${1:GameRules}:SetPostGameTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetRuneSpawnTime(float seconds)", "contents": "${1:GameRules}:SetRuneSpawnTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetSameHeroSelectionEnabled(bool enabled)", "contents": "${1:GameRules}:SetSameHeroSelectionEnabled(${2:bool enabled})"},
		{ "trigger": "GameRules_SetUseUniversalShopMode(bool enabled)", "contents": "${1:GameRules}:SetUseUniversalShopMode(${2:bool enabled})"},
		{ "trigger": "GameRules_SetTimeOfDay(float time)", "contents": "${1:GameRules}:SetTimeOfDay(${2:float time})"},
		{ "trigger": "GameRules_SetOverlayHealthBarUnit(Unit unit,int style)", "contents": "${1:GameRules}:SetOverlayHealthBarUnit(${2:Unit unit},${3:int style})"},
		{ "trigger": "GameRules_SetHeroMinimapIconSize(int iconSize)", "contents": "${1:GameRules}:SetHeroMinimapIconSize(${2:int iconSize})"},
		{ "trigger": "GameRules_SetCreepMinimapIconScale(float creepScale)", "contents": "${1:GameRules}:SetCreepMinimapIconScale(${2:float creepScale})"},
		{ "trigger": "GameRules_SetRuneMinimapIconScale(float runeScale)", "contents": "${1:GameRules}:SetRuneMinimapIconScale(${2:float runeScale})"},
		{ "trigger": "GameRules_SetSafeToLeave(bool safeToLeave)", "contents": "${1:GameRules}:SetSafeToLeave(${2:bool safeToLeave})"},
		{ "trigger": "GameRules_SetUseCustomHeroXPValues(bool unKnown)", "contents": "${1:GameRules}:SetUseCustomHeroXPValues(${2:bool unKnown})"},
		{ "trigger": "GameRules_SetCustomGameDifficulty(int unKnown)", "contents": "${1:GameRules}:SetCustomGameDifficulty(${2:int unKnown})"},
		{ "trigger": "GameRules_SetGoldTickTime(float unKnown)", "contents": "${1:GameRules}:SetGoldTickTime(${2:float unKnown})"},
		{ "trigger": "GameRules_SetGoldPerTick(int unKnown)", "contents": "${1:GameRules}:SetGoldPerTick(${2:int unKnown})"},
		{ "trigger": "GameRules_SetNianFightStartTime(float unKnown)", "contents": "${1:GameRules}:SetNianFightStartTime(${2:float unKnown})"},
		{ "trigger": "GameRules_GetNianFightStartTime()", "contents": "${1:GameRules}:GetNianFightStartTime()"},
		{ "trigger": "GameRules_GetMatchSignoutComplete()", "contents": "${1:GameRules}:GetMatchSignoutComplete()"},
		{ "trigger": "GameRules_DidMatchSignoutTimeOut()", "contents": "${1:GameRules}:DidMatchSignoutTimeOut()"},
		{ "trigger": "GameRules_GetNianTotalDamageTaken()", "contents": "${1:GameRules}:GetNianTotalDamageTaken()"},


		{ "trigger": "Entities_First()", "contents": "${1:Entities}:First()"},
		{ "trigger": "Entities_Next(Entity startFrom)", "contents": "${1:Entities}:Next(${2:Entity startFrom})"},
		{ "trigger": "Entities_CreateByClassname(string className)", "contents": "${1:Entities}:CreateByClassname(${2:string className})"},
		{ "trigger": "Entities_FindByClassname(Entity startFrom,string className)", "contents": "${1:Entities}:FindByClassname(${2:Entity startFrom},${3:string className})"},
		{ "trigger": "Entities_FindAllByClassname(string className)", "contents": "${1:Entities}:FindAllByClassname(${2:string className})"},
		{ "trigger": "Entities_FindByName(Entity startFrom,string entName)", "contents": "${1:Entities}:FindByName(${2:Entity startFrom},${3:string entName})"},
		{ "trigger": "Entities_FindAllByName(string name)", "contents": "${1:Entities}:FindAllByName(${2:string name})"},
		{ "trigger": "Entities_FindInSphere(Entity startFrom,vector origin , float radius)", "contents": "${1:Entities}:FindInSphere(${2:Entity startFrom},${3:vector origin},${4:float radius})"},
		{ "trigger": "Entities_FindAllInSphere(vector origin,float radius)", "contents": "${1:Entities}:FindAllInSphere(${2:vector origin},${3:float radius})"},
		{ "trigger": "Entities_FindByTarget(Entity startFrom,string targetName)", "contents": "${1:Entities}:FindByTarget(${2:Entity startFrom},${3:string targetName})"},
		{ "trigger": "Entities_FindAllByTarget(string targetName)", "contents": "${1:Entities}:FindAllByTarget(${2:string targetName})"},
		{ "trigger": "Entities_FindByModel(Entity startFrom,string modelName)", "contents": "${1:Entities}:FindByModel(${2:Entity startFrom},${3:string modelName})"},
		{ "trigger": "Entities_FindAllByModel(string modelName)", "contents": "${1:Entities}:FindAllByModel(${2:string modelName})"},
		{ "trigger": "Entities_FindByNameNearest(string entityName,vector origin , float radius)", "contents": "${1:Entities}:FindByNameNearest(${2:string entityName},${3:vector origin},${4:float radius})"},
		{ "trigger": "Entities_FindByNameWithin(Entity startFrom,string entityName , vector origin , float radius)", "contents": "${1:Entities}:FindByNameWithin(${2:Entity startFrom},${3:string entityName},${4:vector origin},${5:float radius})"},
		{ "trigger": "Entities_FindAllByNameWithin(string entityName,vector origin , float radius)", "contents": "${1:Entities}:FindAllByNameWithin(${2:string entityName},${3:vector origin},${4:float radius})"},
		{ "trigger": "Entities_FindByClassnameNearest(string className,vector origin , float radius)", "contents": "${1:Entities}:FindByClassnameNearest(${2:string className},${3:vector origin},${4:float radius})"},
		{ "trigger": "Entities_FindByClassnameWithin(Entity startFrom,string className , vector origin , float radius)", "contents": "${1:Entities}:FindByClassnameWithin(${2:Entity startFrom},${3:string className},${4:vector origin},${5:float radius})"},
		{ "trigger": "Entities_FindAllByClassnameWithin(string className,vector origin , float radius)", "contents": "${1:Entities}:FindAllByClassnameWithin(${2:string className},${3:vector origin},${4:float radius})"},


		{ "trigger": "CScriptHeroList_GetHero(int heroId)", "contents": "${1:CScriptHeroList}:GetHero(${2:int heroId})"},
		{ "trigger": "CScriptHeroList_GetHeroCount()", "contents": "${1:CScriptHeroList}:GetHeroCount()"},
		{ "trigger": "CScriptHeroList_GetAllHeroes()", "contents": "${1:CScriptHeroList}:GetAllHeroes()"},


		{ "trigger": "ConVars_GetFloat(string varName)", "contents": "${1:ConVars}:GetFloat(${2:string varName})"},
		{ "trigger": "ConVars_GetStr(string varName)", "contents": "${1:ConVars}:GetStr(${2:string varName})"},
		{ "trigger": "ConVars_GetBool(string varName)", "contents": "${1:ConVars}:GetBool(${2:string varName})"},
		{ "trigger": "ConVars_RegisterCommand(string varName,function func , string helpText , int flags)", "contents": "${1:ConVars}:RegisterCommand(${2:string varName},${3:function func},${4:string helpText},${5:int flags})"},
		{ "trigger": "ConVars_RegisterConvar(string name,string default , string helpText , int flags)", "contents": "${1:ConVars}:RegisterConvar(${2:string name},${3:string default},${4:string helpText},${5:int flags})"},
		{ "trigger": "ConVars_GetCommandClient()", "contents": "${1:ConVars}:GetCommandClient()"},
		{ "trigger": "ConVars_GetDOTACommandClient()", "contents": "${1:ConVars}:GetDOTACommandClient()"},


		{ "trigger": "CBaseEntity_ConnectOutput(string unKnown,string unKnown)", "contents": "${1:CBaseEntity}:ConnectOutput(${2:string unKnown},${3:string unKnown})"},
		{ "trigger": "CBaseEntity_DisconnectOutput(string unKnown,string unKnown)", "contents": "${1:CBaseEntity}:DisconnectOutput(${2:string unKnown},${3:string unKnown})"},
		{ "trigger": "CBaseEntity_GetHealth()", "contents": "${1:CBaseEntity}:GetHealth()"},
		{ "trigger": "CBaseEntity_SetHealth(int hp)", "contents": "${1:CBaseEntity}:SetHealth(${2:int hp})"},
		{ "trigger": "CBaseEntity_GetMaxHealth()", "contents": "${1:CBaseEntity}:GetMaxHealth()"},
		{ "trigger": "CBaseEntity_SetMaxHealth(int hp)", "contents": "${1:CBaseEntity}:SetMaxHealth(${2:int hp})"},
		{ "trigger": "CBaseEntity_IsAlive()", "contents": "${1:CBaseEntity}:IsAlive()"},
		{ "trigger": "CBaseEntity_Remove()", "contents": "${1:CBaseEntity}:Remove()"},
		{ "trigger": "CBaseEntity_SetModel(string modelName)", "contents": "${1:CBaseEntity}:SetModel(${2:string modelName})"},
		{ "trigger": "CBaseEntity_GetModelName()", "contents": "${1:CBaseEntity}:GetModelName()"},
		{ "trigger": "CBaseEntity_EmitSound(string soundName)", "contents": "${1:CBaseEntity}:EmitSound(${2:string soundName})"},
		{ "trigger": "CBaseEntity_EmitSoundParams(string soundName,int pitch , float volume)", "contents": "${1:CBaseEntity}:EmitSoundParams(${2:string soundName},${3:int pitch},${4:float volume})"},
		{ "trigger": "CBaseEntity_StopSound(string soundName)", "contents": "${1:CBaseEntity}:StopSound(${2:string soundName})"},
		{ "trigger": "CBaseEntity_PrecacheSoundScript(string soundName)", "contents": "${1:CBaseEntity}:PrecacheSoundScript(${2:string soundName})"},
		{ "trigger": "CBaseEntity_GetSoundDuration(string soundName,string actorModelname)", "contents": "${1:CBaseEntity}:GetSoundDuration(${2:string soundName},${3:string actorModelname})"},
		{ "trigger": "CBaseEntity_GetClassname()", "contents": "${1:CBaseEntity}:GetClassname()"},
		{ "trigger": "CBaseEntity_GetName()", "contents": "${1:CBaseEntity}:GetName()"},
		{ "trigger": "CBaseEntity_GetPreTemplateName()", "contents": "${1:CBaseEntity}:GetPreTemplateName()"},
		{ "trigger": "CBaseEntity_GetAbsOrigin()", "contents": "${1:CBaseEntity}:GetAbsOrigin()"},
		{ "trigger": "CBaseEntity_SetAbsOrigin(vector vec)", "contents": "${1:CBaseEntity}:SetAbsOrigin(${2:vector vec})"},
		{ "trigger": "CBaseEntity_GetOrigin()", "contents": "${1:CBaseEntity}:GetOrigin()"},
		{ "trigger": "CBaseEntity_SetAbsOrigin(vector vec)", "contents": "${1:CBaseEntity}:SetAbsOrigin(${2:vector vec})"},
		{ "trigger": "CBaseEntity_SetOrigin(vector vec)", "contents": "${1:CBaseEntity}:SetOrigin(${2:vector vec})"},
		{ "trigger": "CBaseEntity_GetForwardVector()", "contents": "${1:CBaseEntity}:GetForwardVector()"},
		{ "trigger": "CBaseEntity_GetRightVector()", "contents": "${1:CBaseEntity}:GetRightVector()"},
		{ "trigger": "CBaseEntity_GetUpVector()", "contents": "${1:CBaseEntity}:GetUpVector()"},
		{ "trigger": "CBaseEntity_SetForwardVector(vector forward)", "contents": "${1:CBaseEntity}:SetForwardVector(${2:vector forward})"},
		{ "trigger": "CBaseEntity_GetVelocity()", "contents": "${1:CBaseEntity}:GetVelocity()"},
		{ "trigger": "CBaseEntity_SetVelocity(vector velocity)", "contents": "${1:CBaseEntity}:SetVelocity(${2:vector velocity})"},
		{ "trigger": "CBaseEntity_SetAngularVelocity(float pitch,float yaw , float roll)", "contents": "${1:CBaseEntity}:SetAngularVelocity(${2:float pitch},${3:float yaw},${4:float roll})"},
		{ "trigger": "CBaseEntity_GetAngularVelocity()", "contents": "${1:CBaseEntity}:GetAngularVelocity()"},
		{ "trigger": "CBaseEntity_GetCenter()", "contents": "${1:CBaseEntity}:GetCenter()"},
		{ "trigger": "CBaseEntity_EyePosition()", "contents": "${1:CBaseEntity}:EyePosition()"},
		{ "trigger": "CBaseEntity_SetAngles(float pitch,float yaw , float roll)", "contents": "${1:CBaseEntity}:SetAngles(${2:float pitch},${3:float yaw},${4:float roll})"},
		{ "trigger": "CBaseEntity_GetAngles()", "contents": "${1:CBaseEntity}:GetAngles()"},
		{ "trigger": "CBaseEntity_SetSize(vector vec,vector vec)", "contents": "${1:CBaseEntity}:SetSize(${2:vector vec},${3:vector vec})"},
		{ "trigger": "CBaseEntity_GetBoundingMins()", "contents": "${1:CBaseEntity}:GetBoundingMins()"},
		{ "trigger": "CBaseEntity_GetBoundingMaxs()", "contents": "${1:CBaseEntity}:GetBoundingMaxs()"},
		{ "trigger": "CBaseEntity_Destroy()", "contents": "${1:CBaseEntity}:Destroy()"},
		{ "trigger": "CBaseEntity_SetOwner(Entity parent)", "contents": "${1:CBaseEntity}:SetOwner(${2:Entity parent})"},
		{ "trigger": "CBaseEntity_GetTeam()", "contents": "${1:CBaseEntity}:GetTeam()"},
		{ "trigger": "CBaseEntity_SetTeam(int team)", "contents": "${1:CBaseEntity}:SetTeam(${2:int team})"},
		{ "trigger": "CBaseEntity_GetMoveParent()", "contents": "${1:CBaseEntity}:GetMoveParent()"},
		{ "trigger": "CBaseEntity_GetRootMoveParent()", "contents": "${1:CBaseEntity}:GetRootMoveParent()"},
		{ "trigger": "CBaseEntity_FirstMoveChild()", "contents": "${1:CBaseEntity}:FirstMoveChild()"},
		{ "trigger": "CBaseEntity_NextMovePeer()", "contents": "${1:CBaseEntity}:NextMovePeer()"},
		{ "trigger": "CBaseEntity___KeyValueFromString(string key,string value)", "contents": "${1:CBaseEntity}:__KeyValueFromString(${2:string key},${3:string value})"},
		{ "trigger": "CBaseEntity___KeyValueFromFloat(string key,float value)", "contents": "${1:CBaseEntity}:__KeyValueFromFloat(${2:string key},${3:float value})"},
		{ "trigger": "CBaseEntity___KeyValueFromInt(string key,int value)", "contents": "${1:CBaseEntity}:__KeyValueFromInt(${2:string key},${3:int value})"},
		{ "trigger": "CBaseEntity___KeyValueFromVector(string key,vector value)", "contents": "${1:CBaseEntity}:__KeyValueFromVector(${2:string key},${3:vector value})"},
		{ "trigger": "CBaseEntity_Trigger()", "contents": "${1:CBaseEntity}:Trigger()"},
		{ "trigger": "CBaseEntity_ValidateScriptScope()", "contents": "${1:CBaseEntity}:ValidateScriptScope()"},
		{ "trigger": "CBaseEntity_GetScriptScope()", "contents": "${1:CBaseEntity}:GetScriptScope()"},
		{ "trigger": "CBaseEntity_GetScriptId()", "contents": "${1:CBaseEntity}:GetScriptId()"},
		{ "trigger": "CBaseEntity_GetOwner()", "contents": "${1:CBaseEntity}:GetOwner()"},
		{ "trigger": "CBaseEntity_entindex()", "contents": "${1:CBaseEntity}:entindex()"},


		{ "trigger": "Players_SetHasRepicked(int playerId)", "contents": "${1:Players}:SetHasRepicked(${2:int playerId})"},
		{ "trigger": "Players_HasRepicked(int playerId)", "contents": "${1:Players}:HasRepicked(${2:int playerId})"},
		{ "trigger": "Players_SetHasRandomed(int playerId)", "contents": "${1:Players}:SetHasRandomed(${2:int playerId})"},
		{ "trigger": "Players_HasRandomed(int playerId)", "contents": "${1:Players}:HasRandomed(${2:int playerId})"},
		{ "trigger": "Players_IsValidTeamPlayerID(int playerId)", "contents": "${1:Players}:IsValidTeamPlayerID(${2:int playerId})"},
		{ "trigger": "Players_IsValidTeamPlayer(int playerId)", "contents": "${1:Players}:IsValidTeamPlayer(${2:int playerId})"},
		{ "trigger": "Players_IsValidPlayerID(int playerId)", "contents": "${1:Players}:IsValidPlayerID(${2:int playerId})"},
		{ "trigger": "Players_IsValidPlayer(int playerId)", "contents": "${1:Players}:IsValidPlayer(${2:int playerId})"},
		{ "trigger": "Players_GetLevel(int playerId)", "contents": "${1:Players}:GetLevel(${2:int playerId})"},
		{ "trigger": "Players_IncrementKills(int playerId,int kills)", "contents": "${1:Players}:IncrementKills(${2:int playerId},${3:int kills})"},
		{ "trigger": "Players_IncrementAssists(int playerId)", "contents": "${1:Players}:IncrementAssists(${2:int playerId})"},
		{ "trigger": "Players_IncrementDeaths(int playerId)", "contents": "${1:Players}:IncrementDeaths(${2:int playerId})"},
		{ "trigger": "Players_GetKills(int playerId)", "contents": "${1:Players}:GetKills(${2:int playerId})"},
		{ "trigger": "Players_GetAssists(int playerId)", "contents": "${1:Players}:GetAssists(${2:int playerId})"},
		{ "trigger": "Players_GetDeaths(int playerId)", "contents": "${1:Players}:GetDeaths(${2:int playerId})"},
		{ "trigger": "Players_GetStuns(int playerId)", "contents": "${1:Players}:GetStuns(${2:int playerId})"},
		{ "trigger": "Players_GetHealing(int playerId)", "contents": "${1:Players}:GetHealing(${2:int playerId})"},
		{ "trigger": "Players_GetTowerKills(int playerId)", "contents": "${1:Players}:GetTowerKills(${2:int playerId})"},
		{ "trigger": "Players_GetRoshanKills(int playerId)", "contents": "${1:Players}:GetRoshanKills(${2:int playerId})"},
		{ "trigger": "Players_GetTeamKills(int playerId)", "contents": "${1:Players}:GetTeamKills(${2:int playerId})"},
		{ "trigger": "Players_IncrementStreak(int playerId)", "contents": "${1:Players}:IncrementStreak(${2:int playerId})"},
		{ "trigger": "Players_ClearStreak(int playerId)", "contents": "${1:Players}:ClearStreak(${2:int playerId})"},
		{ "trigger": "Players_GetStreak(int playerId)", "contents": "${1:Players}:GetStreak(${2:int playerId})"},
		{ "trigger": "Players_ModifyGold(int playerId,int goldAmt , bool reliable , int unknown)", "contents": "${1:Players}:ModifyGold(${2:int playerId},${3:int goldAmt},${4:bool reliable},${5:int unknown})"},
		{ "trigger": "Players_SetGold(int playerId,int goldAmt , bool reliable)", "contents": "${1:Players}:SetGold(${2:int playerId},${3:int goldAmt},${4:bool reliable})"},
		{ "trigger": "Players_SpendGold(int playerId,int amt , int unknown)", "contents": "${1:Players}:SpendGold(${2:int playerId},${3:int amt},${4:int unknown})"},
		{ "trigger": "Players_GetGold(int playerId)", "contents": "${1:Players}:GetGold(${2:int playerId})"},
		{ "trigger": "Players_GetReliableGold(int playerId)", "contents": "${1:Players}:GetReliableGold(${2:int playerId})"},
		{ "trigger": "Players_GetUnreliableGold(int playerId)", "contents": "${1:Players}:GetUnreliableGold(${2:int playerId})"},
		{ "trigger": "Players_ResetTotalEarnedGold(int playerId)", "contents": "${1:Players}:ResetTotalEarnedGold(${2:int playerId})"},
		{ "trigger": "Players_GetTotalEarnedGold(int playerId)", "contents": "${1:Players}:GetTotalEarnedGold(${2:int playerId})"},
		{ "trigger": "Players_GetTotalGoldSpent(int playerId)", "contents": "${1:Players}:GetTotalGoldSpent(${2:int playerId})"},
		{ "trigger": "Players_AddGoldSpentOnSupport(int unknown,int unknown)", "contents": "${1:Players}:AddGoldSpentOnSupport(${2:int unknown},${3:int unknown})"},
		{ "trigger": "Players_GetGoldSpentOnSupport(int playerId)", "contents": "${1:Players}:GetGoldSpentOnSupport(${2:int playerId})"},
		{ "trigger": "Players_GetGoldSpentOnConsumables(int playerId)", "contents": "${1:Players}:GetGoldSpentOnConsumables(${2:int playerId})"},
		{ "trigger": "Players_GetGoldSpentOnItems(int playerId)", "contents": "${1:Players}:GetGoldSpentOnItems(${2:int playerId})"},
		{ "trigger": "Players_GetGoldLostToDeath(int playerId)", "contents": "${1:Players}:GetGoldLostToDeath(${2:int playerId})"},
		{ "trigger": "Players_GetGoldSpentOnBuybacks(int playerId)", "contents": "${1:Players}:GetGoldSpentOnBuybacks(${2:int playerId})"},
		{ "trigger": "Players_GetGoldPerMin(int playerId)", "contents": "${1:Players}:GetGoldPerMin(${2:int playerId})"},
		{ "trigger": "Players_GetXPPerMin(int playerId)", "contents": "${1:Players}:GetXPPerMin(${2:int playerId})"},
		{ "trigger": "Players_GetAegisPickups(int playerId)", "contents": "${1:Players}:GetAegisPickups(${2:int playerId})"},
		{ "trigger": "Players_AddAegisPickup(int playerId)", "contents": "${1:Players}:AddAegisPickup(${2:int playerId})"},
		{ "trigger": "Players_GetRunePickups(int playerId)", "contents": "${1:Players}:GetRunePickups(${2:int playerId})"},
		{ "trigger": "Players_AddRunePickup(int playerId)", "contents": "${1:Players}:AddRunePickup(${2:int playerId})"},
		{ "trigger": "Players_GetNumConsumablesPurchased(int playerId)", "contents": "${1:Players}:GetNumConsumablesPurchased(${2:int playerId})"},
		{ "trigger": "Players_GetNumItemsPurchased(int playerId)", "contents": "${1:Players}:GetNumItemsPurchased(${2:int playerId})"},
		{ "trigger": "Players_GetTimeOfLastItemPurchase(int playerId)", "contents": "${1:Players}:GetTimeOfLastItemPurchase(${2:int playerId})"},
		{ "trigger": "Players_GetTimeOfLastConsumablePurchase(int playerId)", "contents": "${1:Players}:GetTimeOfLastConsumablePurchase(${2:int playerId})"},
		{ "trigger": "Players_GetTimeOfLastDeath(int playerId)", "contents": "${1:Players}:GetTimeOfLastDeath(${2:int playerId})"},
		{ "trigger": "Players_GetRespawnSeconds(int playerId)", "contents": "${1:Players}:GetRespawnSeconds(${2:int playerId})"},
		{ "trigger": "Players_IncrementTotalEarnedXP(int playerId,int amt)", "contents": "${1:Players}:IncrementTotalEarnedXP(${2:int playerId},${3:int amt})"},
		{ "trigger": "Players_GetTotalEarnedXP(int playerId)", "contents": "${1:Players}:GetTotalEarnedXP(${2:int playerId})"},
		{ "trigger": "Players_AddClaimedFarm(int playerId,float farm)", "contents": "${1:Players}:AddClaimedFarm(${2:int playerId},${3:float farm})"},
		{ "trigger": "Players_GetClaimedFarm(int playerId)", "contents": "${1:Players}:GetClaimedFarm(${2:int playerId})"},
		{ "trigger": "Players_GetRawPlayerDamage(int playerId)", "contents": "${1:Players}:GetRawPlayerDamage(${2:int playerId})"},
		{ "trigger": "Players_ClearRawPlayerDamageMatrix(int playerId)", "contents": "${1:Players}:ClearRawPlayerDamageMatrix(${2:int playerId})"},
		{ "trigger": "Players_ClearKillsMatrix(int playerId)", "contents": "${1:Players}:ClearKillsMatrix(${2:int playerId})"},
		{ "trigger": "Players_GetTowerDamageTaken(int playerId)", "contents": "${1:Players}:GetTowerDamageTaken(${2:int playerId})"},
		{ "trigger": "Players_GetCreepDamageTaken(int playerId)", "contents": "${1:Players}:GetCreepDamageTaken(${2:int playerId})"},
		{ "trigger": "Players_GetHeroDamageTaken(int playerId)", "contents": "${1:Players}:GetHeroDamageTaken(${2:int playerId})"},
		{ "trigger": "Players_GetDamageDoneToHero(int playerId,int heroId)", "contents": "${1:Players}:GetDamageDoneToHero(${2:int playerId},${3:int heroId})"},
		{ "trigger": "Players_GetKillsDoneToHero(int playerId,int heroId)", "contents": "${1:Players}:GetKillsDoneToHero(${2:int playerId},${3:int heroId})"},
		{ "trigger": "Players_GetSelectedHeroName(int playerId)", "contents": "${1:Players}:GetSelectedHeroName(${2:int playerId})"},
		{ "trigger": "Players_GetSelectedHeroID(int playerId)", "contents": "${1:Players}:GetSelectedHeroID(${2:int playerId})"},
		{ "trigger": "Players_IsHeroSelected(string heroName)", "contents": "${1:Players}:IsHeroSelected(${2:string heroName})"},
		{ "trigger": "Players_WhoSelectedHero(string heroName)", "contents": "${1:Players}:WhoSelectedHero(${2:string heroName})"},
		{ "trigger": "Players_GetSelectedHeroEntity(int playerId)", "contents": "${1:Players}:GetSelectedHeroEntity(${2:int playerId})"},
		{ "trigger": "Players_HasSelectedHero(int playerId)", "contents": "${1:Players}:HasSelectedHero(${2:int playerId})"},
		{ "trigger": "Players_GetPlayer(int playerId)", "contents": "${1:Players}:GetPlayer(${2:int playerId})"},
		{ "trigger": "Players_GetNthPlayerIDOnTeam(int index,int team)", "contents": "${1:Players}:GetNthPlayerIDOnTeam(${2:int index},${3:int team})"},
		{ "trigger": "Players_IncrementLastHits(int playerId)", "contents": "${1:Players}:IncrementLastHits(${2:int playerId})"},
		{ "trigger": "Players_GetLastHits(int playerId)", "contents": "${1:Players}:GetLastHits(${2:int playerId})"},
		{ "trigger": "Players_IncrementGoldBagsCollected(int playerId)", "contents": "${1:Players}:IncrementGoldBagsCollected(${2:int playerId})"},
		{ "trigger": "Players_GetGoldBagsCollected(int playerId)", "contents": "${1:Players}:GetGoldBagsCollected(${2:int playerId})"},
		{ "trigger": "Players_IncrementLastHitStreak(int playerId)", "contents": "${1:Players}:IncrementLastHitStreak(${2:int playerId})"},
		{ "trigger": "Players_ClearLastHitStreak(int playerId)", "contents": "${1:Players}:ClearLastHitStreak(${2:int playerId})"},
		{ "trigger": "Players_GetLastHitStreak(int playerId)", "contents": "${1:Players}:GetLastHitStreak(${2:int playerId})"},
		{ "trigger": "Players_IncrementLastHitMultikill(int playerId)", "contents": "${1:Players}:IncrementLastHitMultikill(${2:int playerId})"},
		{ "trigger": "Players_ClearLastHitMultikill(int playerId)", "contents": "${1:Players}:ClearLastHitMultikill(${2:int playerId})"},
		{ "trigger": "Players_GetLastHitMultikill(int playerId)", "contents": "${1:Players}:GetLastHitMultikill(${2:int playerId})"},
		{ "trigger": "Players_IncrementNearbyCreepDeaths(int playerId)", "contents": "${1:Players}:IncrementNearbyCreepDeaths(${2:int playerId})"},
		{ "trigger": "Players_GetNearbyCreepDeaths(int playerId)", "contents": "${1:Players}:GetNearbyCreepDeaths(${2:int playerId})"},
		{ "trigger": "Players_IncrementDenies(int playerId)", "contents": "${1:Players}:IncrementDenies(${2:int playerId})"},
		{ "trigger": "Players_GetDenies(int playerId)", "contents": "${1:Players}:GetDenies(${2:int playerId})"},
		{ "trigger": "Players_IncrementClaimedMisses(int playerId)", "contents": "${1:Players}:IncrementClaimedMisses(${2:int playerId})"},
		{ "trigger": "Players_GetClaimedMisses(int playerId)", "contents": "${1:Players}:GetClaimedMisses(${2:int playerId})"},
		{ "trigger": "Players_IncrementClaimedDenies(int playerId)", "contents": "${1:Players}:IncrementClaimedDenies(${2:int playerId})"},
		{ "trigger": "Players_GetClaimedDenies(int playerId)", "contents": "${1:Players}:GetClaimedDenies(${2:int playerId})"},
		{ "trigger": "Players_IncrementMisses(int playerId)", "contents": "${1:Players}:IncrementMisses(${2:int playerId})"},
		{ "trigger": "Players_GetMisses(int playerId)", "contents": "${1:Players}:GetMisses(${2:int playerId})"},
		{ "trigger": "Players_UpdateTeamSlot(int playerId,int slot)", "contents": "${1:Players}:UpdateTeamSlot(${2:int playerId},${3:int slot})"},
		{ "trigger": "Players_GetTeam(int playerId)", "contents": "${1:Players}:GetTeam(${2:int playerId})"},
		{ "trigger": "Players_IsBroadcaster(int playerId)", "contents": "${1:Players}:IsBroadcaster(${2:int playerId})"},
		{ "trigger": "Players_GetBroadcasterChannel(int playerId)", "contents": "${1:Players}:GetBroadcasterChannel(${2:int playerId})"},
		{ "trigger": "Players_GetBroadcasterChannelSlot(int playerId)", "contents": "${1:Players}:GetBroadcasterChannelSlot(${2:int playerId})"},
		{ "trigger": "Players_GetSteamAccountID(int playerId)", "contents": "${1:Players}:GetSteamAccountID(${2:int playerId})"},
		{ "trigger": "Players_IsFakeClient(int playerId)", "contents": "${1:Players}:IsFakeClient(${2:int playerId})"},
		{ "trigger": "Players_HaveAllPlayersJoined()", "contents": "${1:Players}:HaveAllPlayersJoined()"},
		{ "trigger": "Players_GetPlayerLoadedCompletely(int playerId)", "contents": "${1:Players}:GetPlayerLoadedCompletely(${2:int playerId})"},
		{ "trigger": "Players_SetPlayerReservedState(int playerId,bool reserved)", "contents": "${1:Players}:SetPlayerReservedState(${2:int playerId},${3:bool reserved})"},
		{ "trigger": "Players_GetPlayerReservedState(int playerId)", "contents": "${1:Players}:GetPlayerReservedState(${2:int playerId})"},
		{ "trigger": "Players_GetConnectionState(int playerId)", "contents": "${1:Players}:GetConnectionState(${2:int playerId})"},
		{ "trigger": "Players_HeroLevelUp(int playerId)", "contents": "${1:Players}:HeroLevelUp(${2:int playerId})"},
		{ "trigger": "Players_SetLastBuybackTime(int playerId,int time)", "contents": "${1:Players}:SetLastBuybackTime(${2:int playerId},${3:int time})"},
		{ "trigger": "Players_GetPlayerName(int playerId)", "contents": "${1:Players}:GetPlayerName(${2:int playerId})"},
		{ "trigger": "Players_GetUnitShareMaskForPlayer(int playerId,int otherPlayerId)", "contents": "${1:Players}:GetUnitShareMaskForPlayer(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "Players_IsHeroSharedWithPlayerID(int playerId,int otherPlayerId)", "contents": "${1:Players}:IsHeroSharedWithPlayerID(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "Players_AreUnitsSharedWithPlayerID(int playerId,int otherPlayerId)", "contents": "${1:Players}:AreUnitsSharedWithPlayerID(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "Players_IsDisableHelpSetForPlayerID(int playerId,int otherPlayerId)", "contents": "${1:Players}:IsDisableHelpSetForPlayerID(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "Players_SetUnitShareMaskForPlayer(int unKnown,int unKnown , int unKnown , bool unKnown)", "contents": "${1:Players}:SetUnitShareMaskForPlayer(${2:int unKnown},${3:int unKnown},${4:int unKnown},${5:bool unKnown})"},
		{ "trigger": "Players_GetNumCouriersForTeam(int team)", "contents": "${1:Players}:GetNumCouriersForTeam(${2:int team})"},
		{ "trigger": "Players_GetNthCourierForTeam(int index,int team)", "contents": "${1:Players}:GetNthCourierForTeam(${2:int index},${3:int team})"},
		{ "trigger": "Players_SetBuybackCooldownTime(int playerId,float cooldown)", "contents": "${1:Players}:SetBuybackCooldownTime(${2:int playerId},${3:float cooldown})"},
		{ "trigger": "Players_SetBuybackGoldLimitTime(int playerId,float buybackGold)", "contents": "${1:Players}:SetBuybackGoldLimitTime(${2:int playerId},${3:float buybackGold})"},
		{ "trigger": "Players_ResetBuybackCostTime(int playerId)", "contents": "${1:Players}:ResetBuybackCostTime(${2:int playerId})"},
		{ "trigger": "Players_ReplaceHeroWith(int playerId,string heroName , int gold , int exp)", "contents": "${1:Players}:ReplaceHeroWith(${2:int playerId},${3:string heroName},${4:int gold},${5:int exp})"},
		{ "trigger": "Players_SetCustomBuybackCost(int playerId,int cost)", "contents": "${1:Players}:SetCustomBuybackCost(${2:int playerId},${3:int cost})"},
		{ "trigger": "Players_SetCustomBuybackCooldown(int playerId,float cooldown)", "contents": "${1:Players}:SetCustomBuybackCooldown(${2:int playerId},${3:float cooldown})"},
		{ "trigger": "Players_GetCustomBuybackCost(int playerId)", "contents": "${1:Players}:GetCustomBuybackCost(${2:int playerId})"},
		{ "trigger": "Players_GetCustomBuybackCooldown(int playerId)", "contents": "${1:Players}:GetCustomBuybackCooldown(${2:int playerId})"},
		{ "trigger": "Players_SetCameraTarget(int playerId,hscript target)", "contents": "${1:Players}:SetCameraTarget(${2:int playerId},${3:hscript target})"},
		{ "trigger": "Players_GetEventPointsForPlayerID(int playerId)", "contents": "${1:Players}:GetEventPointsForPlayerID(${2:int playerId})"},
		{ "trigger": "Players_GetEventPremiumPointsGranted(int playerId)", "contents": "${1:Players}:GetEventPremiumPointsGranted(${2:int playerId})"},
		{ "trigger": "Players_GetEventRankGranted(int playerId)", "contents": "${1:Players}:GetEventRankGranted(${2:int playerId})"},


		{ "trigger": "ProjectileManager_CreateTrackingProjectile(hscript projectile)", "contents": "${1:ProjectileManager}:CreateTrackingProjectile(${2:hscript projectile})"},
		{ "trigger": "ProjectileManager_CreateLinearProjectile(hscript projectile)", "contents": "${1:ProjectileManager}:CreateLinearProjectile(${2:hscript projectile})"},
		{ "trigger": "ProjectileManager_DestroyLinearProjectile(int projectile)", "contents": "${1:ProjectileManager}:DestroyLinearProjectile(${2:int projectile})"},
		{ "trigger": "ProjectileManager_ProjectileDodge(hscript projectile)", "contents": "${1:ProjectileManager}:ProjectileDodge(${2:hscript projectile})"},


		{ "trigger": "CDOTABaseGameMode_BeginThink(string thinkName,function func , float intervalInSeconds)", "contents": "${1:CDOTABaseGameMode}:BeginThink(${2:string thinkName},${3:function func},${4:float intervalInSeconds})"},
		{ "trigger": "CDOTABaseGameMode_EndThink(string thinkName)", "contents": "${1:CDOTABaseGameMode}:EndThink(${2:string thinkName})"},
		{ "trigger": "CDOTABaseGameMode_SetAlwaysShowPlayerInventory(bool alwaysShow)", "contents": "${1:CDOTABaseGameMode}:SetAlwaysShowPlayerInventory(${2:bool alwaysShow})"},
		{ "trigger": "CDOTABaseGameMode_SetGoldSoundDisabled(bool playSound)", "contents": "${1:CDOTABaseGameMode}:SetGoldSoundDisabled(${2:bool playSound})"},
		{ "trigger": "CDOTABaseGameMode_SetRecommendedItemsDisabled(bool disableRecItems)", "contents": "${1:CDOTABaseGameMode}:SetRecommendedItemsDisabled(${2:bool disableRecItems})"},
		{ "trigger": "CDOTABaseGameMode_SetCameraDistanceOverride(float cameraDistance)", "contents": "${1:CDOTABaseGameMode}:SetCameraDistanceOverride(${2:float cameraDistance})"},
		{ "trigger": "CDOTABaseGameMode_SetOverrideSelectionEntity(Unit unit)", "contents": "${1:CDOTABaseGameMode}:SetOverrideSelectionEntity(${2:Unit unit})"},
		{ "trigger": "CDOTABaseGameMode_SetRemoveIllusionsOnDeath(bool removeIllusions)", "contents": "${1:CDOTABaseGameMode}:SetRemoveIllusionsOnDeath(${2:bool removeIllusions})"},
		{ "trigger": "CDOTABaseGameMode_ClientLoadGridNav()", "contents": "${1:CDOTABaseGameMode}:ClientLoadGridNav()"},
		{ "trigger": "CDOTABaseGameMode_SetFogOfWarDisabled(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetFogOfWarDisabled(${2:bool enabled})"},
		{ "trigger": "CDOTABaseGameMode_SetCustomBuybackCostEnabled(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetCustomBuybackCostEnabled(${2:bool enabled})"},
		{ "trigger": "CDOTABaseGameMode_SetCustomBuybackCooldownEnabled(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetCustomBuybackCooldownEnabled(${2:bool enabled})"},
		{ "trigger": "CDOTABaseGameMode_SetTopBarTeamValuesOverride(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetTopBarTeamValuesOverride(${2:bool enabled})"},
		{ "trigger": "CDOTABaseGameMode_SetTopBarTeamValuesVisible(bool visible)", "contents": "${1:CDOTABaseGameMode}:SetTopBarTeamValuesVisible(${2:bool visible})"},
		{ "trigger": "CDOTABaseGameMode_SetTopBarTeamValue(int team,int value)", "contents": "${1:CDOTABaseGameMode}:SetTopBarTeamValue(${2:int team},${3:int value})"},


		{ "trigger": "CBaseAnimating_LookupAttachment(string attachmentName)", "contents": "${1:CBaseAnimating}:LookupAttachment(${2:string attachmentName})"},
		{ "trigger": "CBaseAnimating_GetAttachmentOrigin(int attachmentId)", "contents": "${1:CBaseAnimating}:GetAttachmentOrigin(${2:int attachmentId})"},
		{ "trigger": "CBaseAnimating_GetAttachmentAngles(int attachmentId)", "contents": "${1:CBaseAnimating}:GetAttachmentAngles(${2:int attachmentId})"},
		{ "trigger": "CBaseAnimating_IsSequenceFinished()", "contents": "${1:CBaseAnimating}:IsSequenceFinished()"},
		{ "trigger": "CBaseAnimating_SetBodygroup(int unKnown,int unKnown)", "contents": "${1:CBaseAnimating}:SetBodygroup(${2:int unKnown},${3:int unKnown})"},
		{ "trigger": "CBaseAnimating_SetModelScale(float scale,float fadeTimeSeconds)", "contents": "${1:CBaseAnimating}:SetModelScale(${2:float scale},${3:float fadeTimeSeconds})"},
		{ "trigger": "CBaseAnimating_GetModelScale()", "contents": "${1:CBaseAnimating}:GetModelScale()"},



		{ "trigger": "CBaseFlex_GetCurrentScene()", "contents": "${1:CBaseFlex}:GetCurrentScene()"},
		{ "trigger": "CBaseFlex_GetSceneByIndex(int index)", "contents": "${1:CBaseFlex}:GetSceneByIndex(${2:int index})"},



		{ "trigger": "CDOTA_BaseNPC_IsAncient()", "contents": "${1:CDOTA_BaseNPC}:IsAncient()"},
		{ "trigger": "CDOTA_BaseNPC_IsNeutralUnitType()", "contents": "${1:CDOTA_BaseNPC}:IsNeutralUnitType()"},
		{ "trigger": "CDOTA_BaseNPC_IsSummoned()", "contents": "${1:CDOTA_BaseNPC}:IsSummoned()"},
		{ "trigger": "CDOTA_BaseNPC_IsCreature()", "contents": "${1:CDOTA_BaseNPC}:IsCreature()"},
		{ "trigger": "CDOTA_BaseNPC_IsHero()", "contents": "${1:CDOTA_BaseNPC}:IsHero()"},
		{ "trigger": "CDOTA_BaseNPC_IsRealHero()", "contents": "${1:CDOTA_BaseNPC}:IsRealHero()"},
		{ "trigger": "CDOTA_BaseNPC_IsTower()", "contents": "${1:CDOTA_BaseNPC}:IsTower()"},
		{ "trigger": "CDOTA_BaseNPC_IsAlive()", "contents": "${1:CDOTA_BaseNPC}:IsAlive()"},
		{ "trigger": "CDOTA_BaseNPC_IsMechanical()", "contents": "${1:CDOTA_BaseNPC}:IsMechanical()"},
		{ "trigger": "CDOTA_BaseNPC_IsPhantom()", "contents": "${1:CDOTA_BaseNPC}:IsPhantom()"},
		{ "trigger": "CDOTA_BaseNPC_SetInitialGoalEntity(Entity goalEntity)", "contents": "${1:CDOTA_BaseNPC}:SetInitialGoalEntity(${2:Entity goalEntity})"},
		{ "trigger": "CDOTA_BaseNPC_GetInitialGoalEntity()", "contents": "${1:CDOTA_BaseNPC}:GetInitialGoalEntity()"},
		{ "trigger": "CDOTA_BaseNPC_SetMustReachEachGoalEntity(bool mustReach)", "contents": "${1:CDOTA_BaseNPC}:SetMustReachEachGoalEntity(${2:bool mustReach})"},
		{ "trigger": "CDOTA_BaseNPC_GetMustReachEachGoalEntity()", "contents": "${1:CDOTA_BaseNPC}:GetMustReachEachGoalEntity()"},
		{ "trigger": "CDOTA_BaseNPC_AddNewModifier(Unit caster,Ability optionalSrcAbility , string modifierName , table modifierData)", "contents": "${1:CDOTA_BaseNPC}:AddNewModifier(${2:Unit caster},${3:Ability optionalSrcAbility},${4:string modifierName},${5:table modifierData})"},
		{ "trigger": "CDOTA_BaseNPC_HasModifier(string modifierName)", "contents": "${1:CDOTA_BaseNPC}:HasModifier(${2:string modifierName})"},
		{ "trigger": "CDOTA_BaseNPC_RemoveModifierByName(string modifierName)", "contents": "${1:CDOTA_BaseNPC}:RemoveModifierByName(${2:string modifierName})"},
		{ "trigger": "CDOTA_BaseNPC_RemoveModifierByNameAndCaster(string name,Unit caster)", "contents": "${1:CDOTA_BaseNPC}:RemoveModifierByNameAndCaster(${2:string name},${3:Unit caster})"},
		{ "trigger": "CDOTA_BaseNPC_AddItem(Item itemName)", "contents": "${1:CDOTA_BaseNPC}:AddItem(${2:Item itemName})"},
		{ "trigger": "CDOTA_BaseNPC_AddAbility(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:AddAbility(${2:string abilityName})"},
		{ "trigger": "CDOTA_BaseNPC_RemoveAbility(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:RemoveAbility(${2:string abilityName})"},
		{ "trigger": "CDOTA_BaseNPC_HasAbility(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:HasAbility(${2:string abilityName})"},
		{ "trigger": "CDOTA_BaseNPC_HasItemInInventory(string itemName)", "contents": "${1:CDOTA_BaseNPC}:HasItemInInventory(${2:string itemName})"},
		{ "trigger": "CDOTA_BaseNPC_FindAbilityByName(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:FindAbilityByName(${2:string abilityName})"},
		{ "trigger": "CDOTA_BaseNPC_GetGoldBounty()", "contents": "${1:CDOTA_BaseNPC}:GetGoldBounty()"},
		{ "trigger": "CDOTA_BaseNPC_SetDeathXP(int xpBounty)", "contents": "${1:CDOTA_BaseNPC}:SetDeathXP(${2:int xpBounty})"},
		{ "trigger": "CDOTA_BaseNPC_GetDeathXP()", "contents": "${1:CDOTA_BaseNPC}:GetDeathXP()"},
		{ "trigger": "CDOTA_BaseNPC_GetUnitName()", "contents": "${1:CDOTA_BaseNPC}:GetUnitName()"},
		{ "trigger": "CDOTA_BaseNPC_GetTeamNumber()", "contents": "${1:CDOTA_BaseNPC}:GetTeamNumber()"},
		{ "trigger": "CDOTA_BaseNPC_GetPlayerOwner()", "contents": "${1:CDOTA_BaseNPC}:GetPlayerOwner()"},
		{ "trigger": "CDOTA_BaseNPC_SetMaximumGoldBounty(int goldBounty)", "contents": "${1:CDOTA_BaseNPC}:SetMaximumGoldBounty(${2:int goldBounty})"},
		{ "trigger": "CDOTA_BaseNPC_SetMinimumGoldBounty(int goldBounty)", "contents": "${1:CDOTA_BaseNPC}:SetMinimumGoldBounty(${2:int goldBounty})"},
		{ "trigger": "CDOTA_BaseNPC_GetTotalPurchasedUpgradeGoldCost()", "contents": "${1:CDOTA_BaseNPC}:GetTotalPurchasedUpgradeGoldCost()"},
		{ "trigger": "CDOTA_BaseNPC_ForceKill(bool playAegisLines)", "contents": "${1:CDOTA_BaseNPC}:ForceKill(${2:bool playAegisLines})"},
		{ "trigger": "CDOTA_BaseNPC_GetBaseDamageMin()", "contents": "${1:CDOTA_BaseNPC}:GetBaseDamageMin()"},
		{ "trigger": "CDOTA_BaseNPC_GetBaseDamageMax()", "contents": "${1:CDOTA_BaseNPC}:GetBaseDamageMax()"},
		{ "trigger": "CDOTA_BaseNPC_Heal(int amount,Unit source)", "contents": "${1:CDOTA_BaseNPC}:Heal(${2:int amount},${3:Unit source})"},
		{ "trigger": "CDOTA_BaseNPC_GetMaxHealth()", "contents": "${1:CDOTA_BaseNPC}:GetMaxHealth()"},
		{ "trigger": "CDOTA_BaseNPC_GetHealthPercent()", "contents": "${1:CDOTA_BaseNPC}:GetHealthPercent()"},
		{ "trigger": "CDOTA_BaseNPC_SetMana(float mana)", "contents": "${1:CDOTA_BaseNPC}:SetMana(${2:float mana})"},
		{ "trigger": "CDOTA_BaseNPC_GetMaxMana()", "contents": "${1:CDOTA_BaseNPC}:GetMaxMana()"},
		{ "trigger": "CDOTA_BaseNPC_RespawnUnit()", "contents": "${1:CDOTA_BaseNPC}:RespawnUnit()"},
		{ "trigger": "CDOTA_BaseNPC_GetLevel()", "contents": "${1:CDOTA_BaseNPC}:GetLevel()"},
		{ "trigger": "CDOTA_BaseNPC_GetItemInSlot(int slotId)", "contents": "${1:CDOTA_BaseNPC}:GetItemInSlot(${2:int slotId})"},
		{ "trigger": "CDOTA_BaseNPC_SetOriginalModel(string originalModel)", "contents": "${1:CDOTA_BaseNPC}:SetOriginalModel(${2:string originalModel})"},
		{ "trigger": "CDOTA_BaseNPC_AddNoDraw()", "contents": "${1:CDOTA_BaseNPC}:AddNoDraw()"},
		{ "trigger": "CDOTA_BaseNPC_RemoveNoDraw()", "contents": "${1:CDOTA_BaseNPC}:RemoveNoDraw()"},
		{ "trigger": "CDOTA_BaseNPC_GetPlayerOwnerID()", "contents": "${1:CDOTA_BaseNPC}:GetPlayerOwnerID()"},
		{ "trigger": "CDOTA_BaseNPC_IsRangedAttacker()", "contents": "${1:CDOTA_BaseNPC}:IsRangedAttacker()"},
		{ "trigger": "CDOTA_BaseNPC_GetCurrentActiveAbility()", "contents": "${1:CDOTA_BaseNPC}:GetCurrentActiveAbility()"},
		{ "trigger": "CDOTA_BaseNPC_MoveToPosition(vector position)", "contents": "${1:CDOTA_BaseNPC}:MoveToPosition(${2:vector position})"},
		{ "trigger": "CDOTA_BaseNPC_MoveToPositionAggressive(vector position)", "contents": "${1:CDOTA_BaseNPC}:MoveToPositionAggressive(${2:vector position})"},
		{ "trigger": "CDOTA_BaseNPC_MoveToNPC(hscript target)", "contents": "${1:CDOTA_BaseNPC}:MoveToNPC(${2:hscript target})"},
		{ "trigger": "CDOTA_BaseNPC_MoveToTargetToAttack(hscript target)", "contents": "${1:CDOTA_BaseNPC}:MoveToTargetToAttack(${2:hscript target})"},
		{ "trigger": "CDOTA_BaseNPC_Hold()", "contents": "${1:CDOTA_BaseNPC}:Hold()"},
		{ "trigger": "CDOTA_BaseNPC_Stop()", "contents": "${1:CDOTA_BaseNPC}:Stop()"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityToggle(hscript ability,int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityToggle(${2:hscript ability},${3:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityImmediately(hscript int,int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityImmediately(${2:hscript int},${3:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityOnPosition(vector vector,hscript ability , int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityOnPosition(${2:vector vector},${3:hscript ability},${4:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityOnTarget(Unit target,Ability ability , int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityOnTarget(${2:Unit target},${3:Ability ability},${4:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityNoTarget(Ability ability,int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityNoTarget(${2:Ability ability},${3:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_DropItemAtPosition(vector vector,hscript item)", "contents": "${1:CDOTA_BaseNPC}:DropItemAtPosition(${2:vector vector},${3:hscript item})"},
		{ "trigger": "CDOTA_BaseNPC_MoveToNPCToGiveItem(hscript target,hscript item)", "contents": "${1:CDOTA_BaseNPC}:MoveToNPCToGiveItem(${2:hscript target},${3:hscript item})"},
		{ "trigger": "CDOTA_BaseNPC_PickupDroppedItem(hscript item)", "contents": "${1:CDOTA_BaseNPC}:PickupDroppedItem(${2:hscript item})"},
		{ "trigger": "CDOTA_BaseNPC_PickupRune(hscript rune)", "contents": "${1:CDOTA_BaseNPC}:PickupRune(${2:hscript rune})"},
		{ "trigger": "CDOTA_BaseNPC_DropItemAtPositionImmediate(hscript item,vector position)", "contents": "${1:CDOTA_BaseNPC}:DropItemAtPositionImmediate(${2:hscript item},${3:vector position})"},
		{ "trigger": "CDOTA_BaseNPC_SetAdditionalBattleMusicWeight(float weight)", "contents": "${1:CDOTA_BaseNPC}:SetAdditionalBattleMusicWeight(${2:float weight})"},
		{ "trigger": "CDOTA_BaseNPC_GetAdditionalBattleMusicWeight()", "contents": "${1:CDOTA_BaseNPC}:GetAdditionalBattleMusicWeight()"},


		{ "trigger": "CDOTA_BaseNPC_Building_GetInvulnCount()", "contents": "${1:CDOTA_BaseNPC_Building}:GetInvulnCount()"},
		{ "trigger": "CDOTA_BaseNPC_Building_SetInvulnCount(int count)", "contents": "${1:CDOTA_BaseNPC_Building}:SetInvulnCount(${2:int count})"},



		{ "trigger": "CDOTA_BaseNPC_Creature_CreatureLevelUp(int numLevels)", "contents": "${1:CDOTA_BaseNPC_Creature}:CreatureLevelUp(${2:int numLevels})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_AddItemDrop(PhysicalItem item)", "contents": "${1:CDOTA_BaseNPC_Creature}:AddItemDrop(${2:PhysicalItem item})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetChampion(bool champion)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetChampion(${2:bool champion})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_IsChampion()", "contents": "${1:CDOTA_BaseNPC_Creature}:IsChampion()"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetHPGain(int hpPerLevel)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetHPGain(${2:int hpPerLevel})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetManaGain(int manaPerLevel)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetManaGain(${2:int manaPerLevel})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetHPRegenGain(float regenPerLevel)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetHPRegenGain(${2:float regenPerLevel})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetManaRegenGain(float manaRegenGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetManaRegenGain(${2:float manaRegenGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetDamageGain(int damageGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetDamageGain(${2:int damageGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetArmorGain(float armorGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetArmorGain(${2:float armorGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetMagicResistanceGain(float magicResistGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetMagicResistanceGain(${2:float magicResistGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetDisableResistanceGain(float disableResist)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetDisableResistanceGain(${2:float disableResist})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetAttackTimeGain(float attackSpeedGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetAttackTimeGain(${2:float attackSpeedGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetMoveSpeedGain(int moveSpeedGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetMoveSpeedGain(${2:int moveSpeedGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetBountyGain(int bountyGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetBountyGain(${2:int bountyGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetXPGain(int xpGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetXPGain(${2:int xpGain})"},


		{ "trigger": "CDOTA_Unit_Nian_IsHornAlive()", "contents": "${1:CDOTA_Unit_Nian}:IsHornAlive()"},
		{ "trigger": "CDOTA_Unit_Nian_IsTailAlive()", "contents": "${1:CDOTA_Unit_Nian}:IsTailAlive()"},
		{ "trigger": "CDOTA_Unit_Nian_GetHorn()", "contents": "${1:CDOTA_Unit_Nian}:GetHorn()"},
		{ "trigger": "CDOTA_Unit_Nian_GetTail()", "contents": "${1:CDOTA_Unit_Nian}:GetTail()"},


		{ "trigger": "CDOTA_BaseNPC_Hero_ModifyGold(int goldAmmount,bool reliable , int unKnown)", "contents": "${1:CDOTA_BaseNPC_Hero}:ModifyGold(${2:int goldAmmount},${3:bool reliable},${4:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_GetGold()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetGold()"},
		{ "trigger": "CDOTA_BaseNPC_Hero_SetGold(int goldAmmount,bool reliable)", "contents": "${1:CDOTA_BaseNPC_Hero}:SetGold(${2:int goldAmmount},${3:bool reliable})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_GetCurrentXP()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetCurrentXP()"},
		{ "trigger": "CDOTA_BaseNPC_Hero_GetPlayerID()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetPlayerID()"},
		{ "trigger": "CDOTA_BaseNPC_Hero_RespawnHero(bool buyback,bool unKnown , bool unKnown)", "contents": "${1:CDOTA_BaseNPC_Hero}:RespawnHero(${2:bool buyback},${3:bool unKnown},${4:bool unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_HeroLevelUp(bool unKnown)", "contents": "${1:CDOTA_BaseNPC_Hero}:HeroLevelUp(${2:bool unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_GetAbilityPoints()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetAbilityPoints()"},
		{ "trigger": "CDOTA_BaseNPC_Hero_SetAbilityPoints(int points)", "contents": "${1:CDOTA_BaseNPC_Hero}:SetAbilityPoints(${2:int points})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_SetCustomDeathXP(int points)", "contents": "${1:CDOTA_BaseNPC_Hero}:SetCustomDeathXP(${2:int points})"},



		{ "trigger": "CDOTABaseAbility_GetAbilityName()", "contents": "${1:CDOTABaseAbility}:GetAbilityName()"},
		{ "trigger": "CDOTABaseAbility_GetSpecialValueFor(string specialValue)", "contents": "${1:CDOTABaseAbility}:GetSpecialValueFor(${2:string specialValue})"},
		{ "trigger": "CDOTABaseAbility_GetCastRange()", "contents": "${1:CDOTABaseAbility}:GetCastRange()"},
		{ "trigger": "CDOTABaseAbility_IsFullyCastable()", "contents": "${1:CDOTABaseAbility}:IsFullyCastable()"},
		{ "trigger": "CDOTABaseAbility_IsChanneling()", "contents": "${1:CDOTABaseAbility}:IsChanneling()"},
		{ "trigger": "CDOTABaseAbility_IsInAbilityPhase()", "contents": "${1:CDOTABaseAbility}:IsInAbilityPhase()"},
		{ "trigger": "CDOTABaseAbility_GetCooldown(int level)", "contents": "${1:CDOTABaseAbility}:GetCooldown(${2:int level})"},
		{ "trigger": "CDOTABaseAbility_EndCooldown()", "contents": "${1:CDOTABaseAbility}:EndCooldown()"},
		{ "trigger": "CDOTABaseAbility_MarkAbilityButtonDirty()", "contents": "${1:CDOTABaseAbility}:MarkAbilityButtonDirty()"},
		{ "trigger": "CDOTABaseAbility_SetLevel(int abilityLevel)", "contents": "${1:CDOTABaseAbility}:SetLevel(${2:int abilityLevel})"},

>>>>>>> origin/master

		{ "trigger": "CDOTA_Ability_Animation_Attack_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Animation_Attack}:SetPlaybackRate(${2:float playbackrate})"},

		{ "trigger": "CDOTA_Item_DataDriven_ApplyDataDrivenModifier(hscript hscript,hscript hscript , string string , hscript hscript)", "contents": "${1:CDOTA_Item_DataDriven}:ApplyDataDrivenModifier(${2:hscript hscript},${3:hscript hscript},${4:string string},${5:hscript hscript})"},

		{ "trigger": "CDOTA_Ability_Animation_Tailspin_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Animation_Tailspin}:SetPlaybackRate(${2:float playbackrate})"},

		{ "trigger": "CDOTA_Item_Physical_GetCreationTime()", "contents": "${1:CDOTA_Item_Physical}:GetCreationTime()"},
		{ "trigger": "CDOTA_Item_Physical_GetContainedItem()", "contents": "${1:CDOTA_Item_Physical}:GetContainedItem()"},
		{ "trigger": "CDOTA_Item_Physical_SetContainedItem(Item item)", "contents": "${1:CDOTA_Item_Physical}:SetContainedItem(${2:Item item})"},

		{ "trigger": "CDOTA_Ability_Nian_Dive_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Nian_Dive}:SetPlaybackRate(${2:float playbackrate})"},

		{ "trigger": "CDOTAPlayer_GetPlayerID()", "contents": "${1:CDOTAPlayer}:GetPlayerID()"},
		{ "trigger": "CDOTAPlayer_GetAssignedHero()", "contents": "${1:CDOTAPlayer}:GetAssignedHero()"},
		{ "trigger": "CDOTAPlayer_SetKillCamUnit(hscript unit)", "contents": "${1:CDOTAPlayer}:SetKillCamUnit(${2:hscript unit})"},
		{ "trigger": "CDOTAPlayer_MakeRandomHeroSelection()", "contents": "${1:CDOTAPlayer}:MakeRandomHeroSelection()"},
		{ "trigger": "CDOTAPlayer_SetMusicStatus(int unKnown,float statu)", "contents": "${1:CDOTAPlayer}:SetMusicStatus(${2:int unKnown},${3:float statu})"},

		{ "trigger": "CDOTA_Ability_Nian_Leap_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Nian_Leap}:SetPlaybackRate(${2:float playbackrate})"},


<<<<<<< HEAD
		{ "trigger": "CTriggerCamera_GetFov()", "contents": "${1:CTriggerCamera}:GetFov()"},
		{ "trigger": "CTriggerCamera_SetFov(int degrees,float rate)", "contents": "${1:CTriggerCamera}:SetFov(${2:int degrees},${3:float rate})"},
		{ "trigger": "CTriggerCamera_ScreenFade(int int,int int , int int , int int , float float , float float , int int)", "contents": "${1:CTriggerCamera}:ScreenFade(${2:int int},${3:int int},${4:int int},${5:int int},${6:float float},${7:float float},${8:int int})"},
		{ "trigger": "CTriggerCamera_Enable()", "contents": "${1:CTriggerCamera}:Enable()"},


		{ "trigger": "CSceneEntity_EstimateLength()", "contents": "${1:CSceneEntity}:EstimateLength()"},
		{ "trigger": "CSceneEntity_IsPlayingBack()", "contents": "${1:CSceneEntity}:IsPlayingBack()"},
		{ "trigger": "CSceneEntity_IsPaused()", "contents": "${1:CSceneEntity}:IsPaused()"},
		{ "trigger": "CSceneEntity_Start(Entity activator)", "contents": "${1:CSceneEntity}:Start(${2:Entity activator})"},
		{ "trigger": "CSceneEntity_Cancel()", "contents": "${1:CSceneEntity}:Cancel()"},
		{ "trigger": "CSceneEntity_AddBroadcastTeamTarget(int team)", "contents": "${1:CSceneEntity}:AddBroadcastTeamTarget(${2:int team})"},
		{ "trigger": "CSceneEntity_RemoveBroadcastTeamTarget(int entityIndex)", "contents": "${1:CSceneEntity}:RemoveBroadcastTeamTarget(${2:int entityIndex})"},
		{ "trigger": "CSceneEntity_FindNamedEntity(string entityReference)", "contents": "${1:CSceneEntity}:FindNamedEntity(${2:string entityReference})"},
		{ "trigger": "CSceneEntity_LoadSceneFromString(string sceneName,string vcdFile)", "contents": "${1:CSceneEntity}:LoadSceneFromString(${2:string sceneName},${3:string vcdFile})"},
		{ "trigger": "CSceneEntity_FindCamera()", "contents": "${1:CSceneEntity}:FindCamera()"},


		{ "trigger": "CEnvProjectedTexture_SetLinearAttenuation(float attenuation)", "contents": "${1:CEnvProjectedTexture}:SetLinearAttenuation(${2:float attenuation})"},
		{ "trigger": "CEnvProjectedTexture_SetQuadraticAttenuation(float attenuation)", "contents": "${1:CEnvProjectedTexture}:SetQuadraticAttenuation(${2:float attenuation})"},
		{ "trigger": "CEnvProjectedTexture_SetNearRange(float nearRange)", "contents": "${1:CEnvProjectedTexture}:SetNearRange(${2:float nearRange})"},
		{ "trigger": "CEnvProjectedTexture_SetFarRange(float farRange)", "contents": "${1:CEnvProjectedTexture}:SetFarRange(${2:float farRange})"},
		{ "trigger": "CEnvProjectedTexture_SetVolumetrics(bool on,float intensity , float noise , int planes , float planeOffset)", "contents": "${1:CEnvProjectedTexture}:SetVolumetrics(${2:bool on},${3:float intensity},${4:float noise},${5:int planes},${6:float planeOffset})"},


		{ "trigger": "CEnvEntityMaker_SpawnEntity()", "contents": "${1:CEnvEntityMaker}:SpawnEntity()"},
		{ "trigger": "CEnvEntityMaker_SpawnEntityAtEntityOrigin(Entity entity)", "contents": "${1:CEnvEntityMaker}:SpawnEntityAtEntityOrigin(${2:Entity entity})"},
		{ "trigger": "CEnvEntityMaker_SpawnEntityAtNamedEntityOrigin(string entityName)", "contents": "${1:CEnvEntityMaker}:SpawnEntityAtNamedEntityOrigin(${2:string entityName})"},
		{ "trigger": "CEnvEntityMaker_SpawnEntityAtLocation(vector location,vector orientation)", "contents": "${1:CEnvEntityMaker}:SpawnEntityAtLocation(${2:vector location},${3:vector orientation})"},


		{ "trigger": "CDOTAVoteSystem_StartVote(hscript vote)", "contents": "${1:CDOTAVoteSystem}:StartVote(${2:hscript vote})"}
=======
		{ "trigger": "CDOTA_Ability_Nian_Roar_GetCastCount()", "contents": "${1:CDOTA_Ability_Nian_Roar}:GetCastCount()"},


		{ "trigger": "CDotaQuest_SetTextReplaceValue(int questText,int value)", "contents": "${1:CDotaQuest}:SetTextReplaceValue(${2:int questText},${3:int value})"},
		{ "trigger": "CDotaQuest_CompleteQuest()", "contents": "${1:CDotaQuest}:CompleteQuest()"},
		{ "trigger": "CDotaQuest_SetTextReplaceString(string replace)", "contents": "${1:CDotaQuest}:SetTextReplaceString(${2:string replace})"},
		{ "trigger": "CDotaQuest_AddSubquest(hscript subquest)", "contents": "${1:CDotaQuest}:AddSubquest(${2:hscript subquest})"},
		{ "trigger": "CDotaQuest_RemoveSubquest(hscript subquest)", "contents": "${1:CDotaQuest}:RemoveSubquest(${2:hscript subquest})"},
		{ "trigger": "CDotaQuest_GetSubquestByName(string unKnown)", "contents": "${1:CDotaQuest}:GetSubquestByName(${2:string unKnown})"},
		{ "trigger": "CDotaQuest_GetSubquest(int unKnown)", "contents": "${1:CDotaQuest}:GetSubquest(${2:int unKnown})"},


		{ "trigger": "CDotaSubquestBase_SetTextReplaceValue(int unKnown,int unKnown)", "contents": "${1:CDotaSubquestBase}:SetTextReplaceValue(${2:int unKnown},${3:int unKnown})"},
		{ "trigger": "CDotaSubquestBase_CompleteSubquest()", "contents": "${1:CDotaSubquestBase}:CompleteSubquest()"},
		{ "trigger": "CDotaSubquestBase_SetTextReplaceString(string text)", "contents": "${1:CDotaSubquestBase}:SetTextReplaceString(${2:string text})"},


		{ "trigger": "CDOTA_Item_SetPurchaseTime(float purchaseTime)", "contents": "${1:CDOTA_Item}:SetPurchaseTime(${2:float purchaseTime})"},
		{ "trigger": "CDOTA_Item_GetPurchaseTime()", "contents": "${1:CDOTA_Item}:GetPurchaseTime()"},
		{ "trigger": "CDOTA_Item_SetPurchaser(Unit unit)", "contents": "${1:CDOTA_Item}:SetPurchaser(${2:Unit unit})"},
		{ "trigger": "CDOTA_Item_GetInitialCharges()", "contents": "${1:CDOTA_Item}:GetInitialCharges()"},
		{ "trigger": "CDOTA_Item_GetCurrentCharges()", "contents": "${1:CDOTA_Item}:GetCurrentCharges()"},
		{ "trigger": "CDOTA_Item_SetCurrentCharges(int charges)", "contents": "${1:CDOTA_Item}:SetCurrentCharges(${2:int charges})"},
		{ "trigger": "CDOTA_Item_GetPurchaser()", "contents": "${1:CDOTA_Item}:GetPurchaser()"},
		{ "trigger": "CDOTA_Item_Think()", "contents": "${1:CDOTA_Item}:Think()"},
		{ "trigger": "CDOTA_Item_IsPermanent()", "contents": "${1:CDOTA_Item}:IsPermanent()"},
		{ "trigger": "CDOTA_Item_StacksWithOtherOwners()", "contents": "${1:CDOTA_Item}:StacksWithOtherOwners()"},
		{ "trigger": "CDOTA_Item_SetStacksWithOtherOwners(bool stacks)", "contents": "${1:CDOTA_Item}:SetStacksWithOtherOwners(${2:bool stacks})"},
		{ "trigger": "CDOTA_Item_GetShareability()", "contents": "${1:CDOTA_Item}:GetShareability()"},
		{ "trigger": "CDOTA_Item_GetCost()", "contents": "${1:CDOTA_Item}:GetCost()"},
		{ "trigger": "CDOTA_Item_LaunchLoot(bool bool,float float , float float , vector vector)", "contents": "${1:CDOTA_Item}:LaunchLoot(${2:bool bool},${3:float float},${4:float float},${5:vector vector})"},
		{ "trigger": "CDOTA_Item_GetContainer()", "contents": "${1:CDOTA_Item}:GetContainer()"},


		{ "trigger": "CDOTA_Item_DataDriven_ApplyDataDrivenModifier(hscript hscript,hscript hscript , string string , hscript hscript)", "contents": "${1:CDOTA_Item_DataDriven}:ApplyDataDrivenModifier(${2:hscript hscript},${3:hscript hscript},${4:string string},${5:hscript hscript})"},


		{ "trigger": "CDOTA_Item_Physical_GetCreationTime()", "contents": "${1:CDOTA_Item_Physical}:GetCreationTime()"},
		{ "trigger": "CDOTA_Item_Physical_GetContainedItem()", "contents": "${1:CDOTA_Item_Physical}:GetContainedItem()"},
		{ "trigger": "CDOTA_Item_Physical_SetContainedItem(Item item)", "contents": "${1:CDOTA_Item_Physical}:SetContainedItem(${2:Item item})"},


		{ "trigger": "CDOTAPlayer_GetPlayerID()", "contents": "${1:CDOTAPlayer}:GetPlayerID()"},
		{ "trigger": "CDOTAPlayer_GetAssignedHero()", "contents": "${1:CDOTAPlayer}:GetAssignedHero()"},
		{ "trigger": "CDOTAPlayer_SetKillCamUnit(hscript unit)", "contents": "${1:CDOTAPlayer}:SetKillCamUnit(${2:hscript unit})"},
		{ "trigger": "CDOTAPlayer_MakeRandomHeroSelection()", "contents": "${1:CDOTAPlayer}:MakeRandomHeroSelection()"},
		{ "trigger": "CDOTAPlayer_SetMusicStatus(int unKnown,float statu)", "contents": "${1:CDOTAPlayer}:SetMusicStatus(${2:int unKnown},${3:float statu})"},



		{ "trigger": "CTriggerCamera_GetFov()", "contents": "${1:CTriggerCamera}:GetFov()"},
		{ "trigger": "CTriggerCamera_SetFov(int degrees,float rate)", "contents": "${1:CTriggerCamera}:SetFov(${2:int degrees},${3:float rate})"},
		{ "trigger": "CTriggerCamera_ScreenFade(int int,int int , int int , int int , float float , float float , int int)", "contents": "${1:CTriggerCamera}:ScreenFade(${2:int int},${3:int int},${4:int int},${5:int int},${6:float float},${7:float float},${8:int int})"},
		{ "trigger": "CTriggerCamera_Enable()", "contents": "${1:CTriggerCamera}:Enable()"},


		{ "trigger": "CSceneEntity_EstimateLength()", "contents": "${1:CSceneEntity}:EstimateLength()"},
		{ "trigger": "CSceneEntity_IsPlayingBack()", "contents": "${1:CSceneEntity}:IsPlayingBack()"},
		{ "trigger": "CSceneEntity_IsPaused()", "contents": "${1:CSceneEntity}:IsPaused()"},
		{ "trigger": "CSceneEntity_Start(Entity activator)", "contents": "${1:CSceneEntity}:Start(${2:Entity activator})"},
		{ "trigger": "CSceneEntity_Cancel()", "contents": "${1:CSceneEntity}:Cancel()"},
		{ "trigger": "CSceneEntity_AddBroadcastTeamTarget(int team)", "contents": "${1:CSceneEntity}:AddBroadcastTeamTarget(${2:int team})"},
		{ "trigger": "CSceneEntity_RemoveBroadcastTeamTarget(int entityIndex)", "contents": "${1:CSceneEntity}:RemoveBroadcastTeamTarget(${2:int entityIndex})"},
		{ "trigger": "CSceneEntity_FindNamedEntity(string entityReference)", "contents": "${1:CSceneEntity}:FindNamedEntity(${2:string entityReference})"},
		{ "trigger": "CSceneEntity_LoadSceneFromString(string sceneName,string vcdFile)", "contents": "${1:CSceneEntity}:LoadSceneFromString(${2:string sceneName},${3:string vcdFile})"},
		{ "trigger": "CSceneEntity_FindCamera()", "contents": "${1:CSceneEntity}:FindCamera()"},


		{ "trigger": "CEnvProjectedTexture_SetLinearAttenuation(float attenuation)", "contents": "${1:CEnvProjectedTexture}:SetLinearAttenuation(${2:float attenuation})"},
		{ "trigger": "CEnvProjectedTexture_SetQuadraticAttenuation(float attenuation)", "contents": "${1:CEnvProjectedTexture}:SetQuadraticAttenuation(${2:float attenuation})"},
		{ "trigger": "CEnvProjectedTexture_SetNearRange(float nearRange)", "contents": "${1:CEnvProjectedTexture}:SetNearRange(${2:float nearRange})"},
		{ "trigger": "CEnvProjectedTexture_SetFarRange(float farRange)", "contents": "${1:CEnvProjectedTexture}:SetFarRange(${2:float farRange})"},
		{ "trigger": "CEnvProjectedTexture_SetVolumetrics(bool on,float intensity , float noise , int planes , float planeOffset)", "contents": "${1:CEnvProjectedTexture}:SetVolumetrics(${2:bool on},${3:float intensity},${4:float noise},${5:int planes},${6:float planeOffset})"},


		{ "trigger": "CEnvEntityMaker_SpawnEntity()", "contents": "${1:CEnvEntityMaker}:SpawnEntity()"},
		{ "trigger": "CEnvEntityMaker_SpawnEntityAtEntityOrigin(Entity entity)", "contents": "${1:CEnvEntityMaker}:SpawnEntityAtEntityOrigin(${2:Entity entity})"},
		{ "trigger": "CEnvEntityMaker_SpawnEntityAtNamedEntityOrigin(string entityName)", "contents": "${1:CEnvEntityMaker}:SpawnEntityAtNamedEntityOrigin(${2:string entityName})"},
		{ "trigger": "CEnvEntityMaker_SpawnEntityAtLocation(vector location,vector orientation)", "contents": "${1:CEnvEntityMaker}:SpawnEntityAtLocation(${2:vector location},${3:vector orientation})"},


		{ "trigger": "CDOTAVoteSystem_StartVote(hscript vote)", "contents": "${1:CDOTAVoteSystem}:StartVote(${2:hscript vote})"},




		{ "trigger": "伤害类型-混合", "contents": "DAMAGE_TYPE_COMPOSITE"},
		{ "trigger": "伤害类型-生命移除", "contents": "DAMAGE_TYPE_HP_REMOVAL"},
		{ "trigger": "伤害类型-魔法", "contents": "DAMAGE_TYPE_MAGICAL"},
		{ "trigger": "伤害类型-物理", "contents": "DAMAGE_TYPE_PHYSICAL"},
		{ "trigger": "伤害类型-纯粹", "contents": "DAMAGE_TYPE_PURE"},
		{ "trigger": "购买-显示在聊天", "contents": "DECLARE_PURCHASES_IN_SPEECH"},
		{ "trigger": "购买-显示给观众", "contents": "DECLARE_PURCHASES_TO_SPECTATORS"},
		{ "trigger": "购买-显示给队友", "contents": "DECLARE_PURCHASES_TO_TEAMMATES"},
		{ "trigger": "技能类型-AOE", "contents": "DOTA_ABILITY_BEHAVIOR_AOE"},
		{ "trigger": "技能类型-攻击", "contents": "DOTA_ABILITY_BEHAVIOR_ATTACK"},
		{ "trigger": "技能类型-光环", "contents": "DOTA_ABILITY_BEHAVIOR_AURA"},
		{ "trigger": "技能类型-自动释放", "contents": "DOTA_ABILITY_BEHAVIOR_AUTOCAST"},
		{ "trigger": "技能类型-持续施法", "contents": "DOTA_ABILITY_BEHAVIOR_CHANNELLED"},
		{ "trigger": "技能类型-方向性", "contents": "DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"},
		{ "trigger": "技能类型-不警示目标", "contents": "DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET"},
		{ "trigger": "技能类型-不取消移动", "contents": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT"},
		{ "trigger": "技能类型-不重置攻击", "contents": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK"},
		{ "trigger": "技能类型-不重置移动", "contents": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT"},
		{ "trigger": "技能类型-隐藏", "contents": "DOTA_ABILITY_BEHAVIOR_HIDDEN"},
		{ "trigger": "技能类型-无视施法后摇", "contents": "DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"},
		{ "trigger": "技能类型-无视施法", "contents": "DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL"},
		{ "trigger": "技能类型-无视随机队列", "contents": "DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE"},
		{ "trigger": "技能类型-无视转向", "contents": "DOTA_ABILITY_BEHAVIOR_IGNORE_TURN"},
		{ "trigger": "技能类型-立即", "contents": "DOTA_ABILITY_BEHAVIOR_IMMEDIATE"},
		{ "trigger": "技能类型-物品", "contents": "DOTA_ABILITY_BEHAVIOR_ITEM"},
		{ "trigger": "技能类型-无目标", "contents": "DOTA_ABILITY_BEHAVIOR_NO_TARGET"},
		{ "trigger": "技能类型-无辅助", "contents": "DOTA_ABILITY_BEHAVIOR_NOASSIST"},
		{ "trigger": "技能类型-无", "contents": "DOTA_ABILITY_BEHAVIOR_NONE"},
		{ "trigger": "技能类型-偷取后正常", "contents": "DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN"},
		{ "trigger": "技能类型-无法学习", "contents": "DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"},
		{ "trigger": "技能类型-被动", "contents": "DOTA_ABILITY_BEHAVIOR_PASSIVE"},
		{ "trigger": "技能类型-点", "contents": "DOTA_ABILITY_BEHAVIOR_POINT"},
		{ "trigger": "技能类型-ROOT-DISABLES", "contents": "DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"},
		{ "trigger": "技能类型-能以神符为目标", "contents": "DOTA_ABILITY_BEHAVIOR_RUNE_TARGET"},
		{ "trigger": "技能类型-切换", "contents": "DOTA_ABILITY_BEHAVIOR_TOGGLE"},
		{ "trigger": "技能类型-单位目标", "contents": "DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"},
		{ "trigger": "技能类型-不收先知", "contents": "DOTA_ABILITY_BEHAVIOR_UNRESTRICTED"},
		{ "trigger": "技能类型-黄点", "contents": "DOTA_ABILITY_TYPE_ATTRIBUTES"},
		{ "trigger": "技能类型-基础", "contents": "DOTA_ABILITY_TYPE_BASIC"},
		{ "trigger": "技能类型-隐藏", "contents": "DOTA_ABILITY_TYPE_HIDDEN"},
		{ "trigger": "技能类型-大招", "contents": "DOTA_ABILITY_TYPE_ULTIMATE"},
		{ "trigger": "属性-敏捷", "contents": "DOTA_ATTRIBUTE_AGILITY"},
		{ "trigger": "属性-智力", "contents": "DOTA_ATTRIBUTE_INTELLECT"},
		{ "trigger": "属性-力量", "contents": "DOTA_ATTRIBUTE_STRENGTH"},
		{ "trigger": "机器人-GANK", "contents": "DOTA_BOT_GANKER"},
		{ "trigger": "机器人-后期", "contents": "DOTA_BOT_HARD_CARRY"},
		{ "trigger": "机器人-爆发", "contents": "DOTA_BOT_NUKER"},
		{ "trigger": "机器人-纯辅助", "contents": "DOTA_BOT_PURE_SUPPORT"},
		{ "trigger": "机器人-推进辅助", "contents": "DOTA_BOT_PUSH_SUPPORT"},
		{ "trigger": "机器人-副C", "contents": "DOTA_BOT_SEMI_CARRY"},
		{ "trigger": "机器人-辅助晕", "contents": "DOTA_BOT_STUN_SUPPORT"},
		{ "trigger": "机器人-坦克", "contents": "DOTA_BOT_TANK"},
		{ "trigger": "攻击类型-基础", "contents": "DOTA_COMBAT_CLASS_ATTACK_BASIC"},
		{ "trigger": "攻击类型-英雄", "contents": "DOTA_COMBAT_CLASS_ATTACK_HERO"},
		{ "trigger": "攻击类型-轻", "contents": "DOTA_COMBAT_CLASS_ATTACK_LIGHT"},
		{ "trigger": "攻击类型-穿刺", "contents": "DOTA_COMBAT_CLASS_ATTACK_PIERCE"},
		{ "trigger": "攻击类型-工程", "contents": "DOTA_COMBAT_CLASS_ATTACK_SIEGE"},
		{ "trigger": "防御类型-基础", "contents": "DOTA_COMBAT_CLASS_DEFEND_BASIC"},
		{ "trigger": "防御类型-英雄", "contents": "DOTA_COMBAT_CLASS_DEFEND_HERO"},
		{ "trigger": "防御类型-软", "contents": "DOTA_COMBAT_CLASS_DEFEND_SOFT"},
		{ "trigger": "防御类型-强", "contents": "DOTA_COMBAT_CLASS_DEFEND_STRONG"},
		{ "trigger": "防御类型-建筑物", "contents": "DOTA_COMBAT_CLASS_DEFEND_STRUCTURE"},
		{ "trigger": "防御类型-虚弱", "contents": "DOTA_COMBAT_CLASS_DEFEND_WEAK"},
		{ "trigger": "游戏阶段-断开", "contents": "DOTA_GAMERULES_STATE_DISCONNECT"},
		{ "trigger": "游戏阶段-游戏中", "contents": "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS"},
		{ "trigger": "游戏阶段-英雄选择", "contents": "DOTA_GAMERULES_STATE_HERO_SELECTION"},
		{ "trigger": "游戏阶段-初始化", "contents": "DOTA_GAMERULES_STATE_INIT"},
		{ "trigger": "游戏阶段-最后", "contents": "DOTA_GAMERULES_STATE_LAST"},
		{ "trigger": "游戏阶段-游戏后", "contents": "DOTA_GAMERULES_STATE_POST_GAME"},
		{ "trigger": "游戏阶段-游戏前", "contents": "DOTA_GAMERULES_STATE_PRE_GAME"},
		{ "trigger": "游戏阶段-战略时间", "contents": "DOTA_GAMERULES_STATE_STRATEGY_TIME"},
		{ "trigger": "游戏阶段-等待玩家载入", "contents": "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD"},
		{ "trigger": "GC队伍-夜宴", "contents": "DOTA_GC_TEAM_BAD_GUYS"},
		{ "trigger": "GC队伍-解说", "contents": "DOTA_GC_TEAM_BROADCASTER"},
		{ "trigger": "GC队伍-天辉", "contents": "DOTA_GC_TEAM_GOOD_GUYS"},
		{ "trigger": "GC队伍-无队伍", "contents": "DOTA_GC_TEAM_NOTEAM"},
		{ "trigger": "GC队伍-玩家池", "contents": "DOTA_GC_TEAM_PLAYER_POOL"},
		{ "trigger": "GC队伍-观战者", "contents": "DOTA_GC_TEAM_SPECTATOR"},
		{ "trigger": "英雄选择阶段-AD选择", "contents": "DOTA_HEROPICK_STATE_AD_SELECT"},
		{ "trigger": "英雄选择阶段-AP选择", "contents": "DOTA_HEROPICK_STATE_AP_SELECT"},
		{ "trigger": "英雄选择阶段-AR选择", "contents": "DOTA_HEROPICK_STATE_AR_SELECT"},
		{ "trigger": "英雄选择阶段-CDBAN1", "contents": "DOTA_HEROPICK_STATE_CD_BAN1"},
		{ "trigger": "英雄选择阶段-CDBAN2", "contents": "DOTA_HEROPICK_STATE_CD_BAN2"},
		{ "trigger": "英雄选择阶段-CDBAN3", "contents": "DOTA_HEROPICK_STATE_CD_BAN3"},
		{ "trigger": "英雄选择阶段-CDBAN4", "contents": "DOTA_HEROPICK_STATE_CD_BAN4"},
		{ "trigger": "英雄选择阶段-CD选择队长", "contents": "DOTA_HEROPICK_STATE_CD_CAPTAINPICK"},
		{ "trigger": "英雄选择阶段-CD介绍", "contents": "DOTA_HEROPICK_STATE_CD_INTRO"},
		{ "trigger": "英雄选择阶段-CD选择", "contents": "DOTA_HEROPICK_STATE_CD_PICK"},
		{ "trigger": "英雄选择阶段-CDPICK1", "contents": "DOTA_HEROPICK_STATE_CD_SELECT1"},
		{ "trigger": "英雄选择阶段-CDPICK10", "contents": "DOTA_HEROPICK_STATE_CD_SELECT10"},
		{ "trigger": "英雄选择阶段-CDPICK2", "contents": "DOTA_HEROPICK_STATE_CD_SELECT2"},
		{ "trigger": "英雄选择阶段-CDPICK3", "contents": "DOTA_HEROPICK_STATE_CD_SELECT3"},
		{ "trigger": "英雄选择阶段-CDPICK4", "contents": "DOTA_HEROPICK_STATE_CD_SELECT4"},
		{ "trigger": "英雄选择阶段-CDPICK5", "contents": "DOTA_HEROPICK_STATE_CD_SELECT5"},
		{ "trigger": "英雄选择阶段-CDPICK6", "contents": "DOTA_HEROPICK_STATE_CD_SELECT6"},
		{ "trigger": "英雄选择阶段-CDPICK7", "contents": "DOTA_HEROPICK_STATE_CD_SELECT7"},
		{ "trigger": "英雄选择阶段-CDPICK8", "contents": "DOTA_HEROPICK_STATE_CD_SELECT8"},
		{ "trigger": "英雄选择阶段-CDPICK9", "contents": "DOTA_HEROPICK_STATE_CD_SELECT9"},
		{ "trigger": "英雄选择阶段-CMBAN1", "contents": "DOTA_HEROPICK_STATE_CM_BAN1"},
		{ "trigger": "英雄选择阶段-CMBAN10", "contents": "DOTA_HEROPICK_STATE_CM_BAN10"},
		{ "trigger": "英雄选择阶段-CMBAN2", "contents": "DOTA_HEROPICK_STATE_CM_BAN2"},
		{ "trigger": "英雄选择阶段-CMBAN3", "contents": "DOTA_HEROPICK_STATE_CM_BAN3"},
		{ "trigger": "英雄选择阶段-CMBAN4", "contents": "DOTA_HEROPICK_STATE_CM_BAN4"},
		{ "trigger": "英雄选择阶段-CMBAN5", "contents": "DOTA_HEROPICK_STATE_CM_BAN5"},
		{ "trigger": "英雄选择阶段-CMBAN6", "contents": "DOTA_HEROPICK_STATE_CM_BAN6"},
		{ "trigger": "英雄选择阶段-CMBAN7", "contents": "DOTA_HEROPICK_STATE_CM_BAN7"},
		{ "trigger": "英雄选择阶段-CMBAN8", "contents": "DOTA_HEROPICK_STATE_CM_BAN8"},
		{ "trigger": "英雄选择阶段-CMBAN9", "contents": "DOTA_HEROPICK_STATE_CM_BAN9"},
		{ "trigger": "英雄选择阶段-CM选择队长", "contents": "DOTA_HEROPICK_STATE_CM_CAPTAINPICK"},
		{ "trigger": "英雄选择阶段-CM简介", "contents": "DOTA_HEROPICK_STATE_CM_INTRO"},
		{ "trigger": "英雄选择阶段-CMPICK", "contents": "DOTA_HEROPICK_STATE_CM_PICK"},
		{ "trigger": "英雄选择阶段-CMPICK1", "contents": "DOTA_HEROPICK_STATE_CM_SELECT1"},
		{ "trigger": "英雄选择阶段-CMPICK10", "contents": "DOTA_HEROPICK_STATE_CM_SELECT10"},
		{ "trigger": "英雄选择阶段-CMPICK2", "contents": "DOTA_HEROPICK_STATE_CM_SELECT2"},
		{ "trigger": "英雄选择阶段-CMPICK3", "contents": "DOTA_HEROPICK_STATE_CM_SELECT3"},
		{ "trigger": "英雄选择阶段-CMPICK4", "contents": "DOTA_HEROPICK_STATE_CM_SELECT4"},
		{ "trigger": "英雄选择阶段-CMPICK5", "contents": "DOTA_HEROPICK_STATE_CM_SELECT5"},
		{ "trigger": "英雄选择阶段-CMPICK6", "contents": "DOTA_HEROPICK_STATE_CM_SELECT6"},
		{ "trigger": "英雄选择阶段-CMPICK7", "contents": "DOTA_HEROPICK_STATE_CM_SELECT7"},
		{ "trigger": "英雄选择阶段-CMPICK8", "contents": "DOTA_HEROPICK_STATE_CM_SELECT8"},
		{ "trigger": "英雄选择阶段-CMPICK9", "contents": "DOTA_HEROPICK_STATE_CM_SELECT9"},
		{ "trigger": "英雄选择阶段-COUNT", "contents": "DOTA_HEROPICK_STATE_COUNT"},
		{ "trigger": "英雄选择阶段-FN选择", "contents": "DOTA_HEROPICK_STATE_FH_SELECT"},
		{ "trigger": "英雄选择阶段-INTRO选择", "contents": "DOTA_HEROPICK_STATE_INTRO_SELECT"},
		{ "trigger": "英雄选择阶段-MO选择", "contents": "DOTA_HEROPICK_STATE_MO_SELECT"},
		{ "trigger": "英雄选择阶段-无", "contents": "DOTA_HEROPICK_STATE_NONE"},
		{ "trigger": "英雄选择阶段-RD选择", "contents": "DOTA_HEROPICK_STATE_RD_SELECT"},
		{ "trigger": "英雄选择阶段-SD选择", "contents": "DOTA_HEROPICK_STATE_SD_SELECT"},
		{ "trigger": "碰撞体积-兵营", "contents": "DOTA_HULL_SIZE_BARRACKS"},
		{ "trigger": "碰撞体积-建筑", "contents": "DOTA_HULL_SIZE_BUILDING"},
		{ "trigger": "碰撞体积-填充", "contents": "DOTA_HULL_SIZE_FILLER"},
		{ "trigger": "碰撞体积-英雄", "contents": "DOTA_HULL_SIZE_HERO"},
		{ "trigger": "碰撞体积-大", "contents": "DOTA_HULL_SIZE_HUGE"},
		{ "trigger": "碰撞体积-常规", "contents": "DOTA_HULL_SIZE_REGULAR"},
		{ "trigger": "碰撞体积-攻城", "contents": "DOTA_HULL_SIZE_SIEGE"},
		{ "trigger": "碰撞体积-小", "contents": "DOTA_HULL_SIZE_SMALL"},
		{ "trigger": "碰撞体积-塔", "contents": "DOTA_HULL_SIZE_TOWER"},
		{ "trigger": "包裹-全部可用", "contents": "DOTA_INVENTORY_ALL_ACCESS"},
		{ "trigger": "包裹-允许丢在泉水", "contents": "DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN"},
		{ "trigger": "包裹-允许丢在地上", "contents": "DOTA_INVENTORY_ALLOW_DROP_ON_GROUND"},
		{ "trigger": "包裹-主允许", "contents": "DOTA_INVENTORY_ALLOW_MAIN"},
		{ "trigger": "包裹-不允许", "contents": "DOTA_INVENTORY_ALLOW_NONE"},
		{ "trigger": "包裹-允许堆叠", "contents": "DOTA_INVENTORY_ALLOW_STASH"},
		{ "trigger": "物品-总是允许拆散", "contents": "DOTA_ITEM_DISASSEMBLE_ALWAYS"},
		{ "trigger": "物品-永不允许拆散", "contents": "DOTA_ITEM_DISASSEMBLE_NEVER"},
		{ "trigger": "物品-包裹大小", "contents": "DOTA_ITEM_INVENTORY_SIZE"},
		{ "trigger": "物品-最大", "contents": "DOTA_ITEM_MAX"},
		{ "trigger": "物品-存量-最大", "contents": "DOTA_ITEM_STASH_MAX"},
		{ "trigger": "物品-存量-最小", "contents": "DOTA_ITEM_STASH_MIN"},
		{ "trigger": "物品-存量-大小", "contents": "DOTA_ITEM_STASH_SIZE"},
		{ "trigger": "物品-临时使用物品", "contents": "DOTA_ITEM_TRANSIENT_CAST_ITEM"},
		{ "trigger": "物品-临时物品", "contents": "DOTA_ITEM_TRANSIENT_ITEM"},
		{ "trigger": "物品-临时卷轴", "contents": "DOTA_ITEM_TRANSIENT_RECIPE"},
		{ "trigger": "修改金钱-放弃玩家贡献", "contents": "DOTA_ModifyGold_AbandonedRedistribute"},
		{ "trigger": "修改金钱-技能消耗", "contents": "DOTA_ModifyGold_AbilityCost"},
		{ "trigger": "修改金钱-买活", "contents": "DOTA_ModifyGold_Buyback"},
		{ "trigger": "修改金钱-死亡", "contents": "DOTA_ModifyGold_Death"},
		{ "trigger": "修改金钱-购买消耗品", "contents": "DOTA_ModifyGold_PurchaseConsumable"},
		{ "trigger": "修改金钱-购买物品", "contents": "DOTA_ModifyGold_PurchaseItem"},
		{ "trigger": "修改金钱-出售物品", "contents": "DOTA_ModifyGold_SellItem"},
		{ "trigger": "修改金钱-未定义", "contents": "DOTA_ModifyGold_Unspecified"},
		{ "trigger": "音乐状态-战斗", "contents": "DOTA_MUSIC_STATUS_BATTLE"},
		{ "trigger": "音乐状态-死亡", "contents": "DOTA_MUSIC_STATUS_DEAD"},
		{ "trigger": "音乐状态-探索", "contents": "DOTA_MUSIC_STATUS_EXPLORATION"},
		{ "trigger": "音乐状态-无", "contents": "DOTA_MUSIC_STATUS_NONE"},
		{ "trigger": "音乐状态-游戏开始", "contents": "DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION"},
		{ "trigger": "DOTA_NPC_MODIFIER_MANAGER_THINK_CONTEXT", "contents": "DOTA_NPC_MODIFIER_MANAGER_THINK_CONTEXT"},
		{ "trigger": "DOTA_NPC_STATS_REGEN_THINK_CONTEXT", "contents": "DOTA_NPC_STATS_REGEN_THINK_CONTEXT"},
		{ "trigger": "DOTA_NPC_THINK_CONTEXT", "contents": "DOTA_NPC_THINK_CONTEXT"},
		{ "trigger": "NPC单位-关系类型-BARRACKS", "contents": "DOTA_NPC_UNIT_RELATIONSHIP_TYPE_BARRACKS"},
		{ "trigger": "NPC单位-关系类型-BUILDING", "contents": "DOTA_NPC_UNIT_RELATIONSHIP_TYPE_BUILDING"},
		{ "trigger": "NPC单位-关系类型-COURIER", "contents": "DOTA_NPC_UNIT_RELATIONSHIP_TYPE_COURIER"},
		{ "trigger": "NPC单位-关系类型-DEFAULT", "contents": "DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"},
		{ "trigger": "NPC单位-关系类型-HERO", "contents": "DOTA_NPC_UNIT_RELATIONSHIP_TYPE_HERO"},
		{ "trigger": "NPC单位-关系类型-SIEGE", "contents": "DOTA_NPC_UNIT_RELATIONSHIP_TYPE_SIEGE"},
		{ "trigger": "NPC单位-关系类型-WARD", "contents": "DOTA_NPC_UNIT_RELATIONSHIP_TYPE_WARD"},
		{ "trigger": "法球-标签_DEFAULT", "contents": "DOTA_ORB_LABEL_DEFAULT"},
		{ "trigger": "法球-标签_EXCEPTION", "contents": "DOTA_ORB_LABEL_EXCEPTION"},
		{ "trigger": "法球-标签_NONE", "contents": "DOTA_ORB_LABEL_NONE"},
		{ "trigger": "法球-标签_SKADI", "contents": "DOTA_ORB_LABEL_SKADI"},
		{ "trigger": "法球-属性_ABILITY", "contents": "DOTA_ORB_PRIORITY_ABILITY"},
		{ "trigger": "法球-属性_DEFAULT", "contents": "DOTA_ORB_PRIORITY_DEFAULT"},
		{ "trigger": "法球-属性_ITEM", "contents": "DOTA_ORB_PRIORITY_ITEM"},
		{ "trigger": "法球-属性_ITEM_PROC", "contents": "DOTA_ORB_PRIORITY_ITEM_PROC"},
		{ "trigger": "法球-属性_NONE", "contents": "DOTA_ORB_PRIORITY_NONE"},
		{ "trigger": "DOTA_PRECACHE_FILENAME", "contents": "DOTA_PRECACHE_FILENAME"},
		{ "trigger": "特效绑定-位置-ATTACK_1", "contents": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_1"},
		{ "trigger": "特效绑定-位置-ATTACK_2", "contents": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_2"},
		{ "trigger": "特效绑定-位置-ATTACK_3", "contents": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_3"},
		{ "trigger": "特效绑定-位置-ATTACK_4", "contents": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_4"},
		{ "trigger": "特效绑定-位置-HITLOCATION", "contents": "DOTA_PROJECTILE_ATTACHMENT_HITLOCATION"},
		{ "trigger": "特效绑定-位置-NONE", "contents": "DOTA_PROJECTILE_ATTACHMENT_NONE"},
		{ "trigger": "随机类型_BREWMASTER_CRIT", "contents": "DOTA_PSEUDO_RANDOM_BREWMASTER_CRIT"},
		{ "trigger": "随机类型_CHAOS_CRIT", "contents": "DOTA_PSEUDO_RANDOM_CHAOS_CRIT"},
		{ "trigger": "随机类型_FACELESS_BASH", "contents": "DOTA_PSEUDO_RANDOM_FACELESS_BASH"},
		{ "trigger": "随机类型_物品_ABYSSAL", "contents": "DOTA_PSEUDO_RANDOM_ITEM_ABYSSAL"},
		{ "trigger": "随机类型_物品_BASHER", "contents": "DOTA_PSEUDO_RANDOM_ITEM_BASHER"},
		{ "trigger": "随机类型_物品_BUTTERFLY", "contents": "DOTA_PSEUDO_RANDOM_ITEM_BUTTERFLY"},
		{ "trigger": "随机类型_物品_GREATERCRIT", "contents": "DOTA_PSEUDO_RANDOM_ITEM_GREATERCRIT"},
		{ "trigger": "随机类型_物品_HALBRED_MAIM", "contents": "DOTA_PSEUDO_RANDOM_ITEM_HALBRED_MAIM"},
		{ "trigger": "随机类型_物品_LESSERCRIT", "contents": "DOTA_PSEUDO_RANDOM_ITEM_LESSERCRIT"},
		{ "trigger": "随机类型_物品_MAELSTROM", "contents": "DOTA_PSEUDO_RANDOM_ITEM_MAELSTROM"},
		{ "trigger": "随机类型_物品_MJOLLNIR", "contents": "DOTA_PSEUDO_RANDOM_ITEM_MJOLLNIR"},
		{ "trigger": "随机类型_物品_MJOLLNIR_STATIC", "contents": "DOTA_PSEUDO_RANDOM_ITEM_MJOLLNIR_STATIC"},
		{ "trigger": "随机类型_物品_MKB", "contents": "DOTA_PSEUDO_RANDOM_ITEM_MKB"},
		{ "trigger": "随机类型_物品_PMS", "contents": "DOTA_PSEUDO_RANDOM_ITEM_PMS"},
		{ "trigger": "随机类型_物品_SANGE_MAIM", "contents": "DOTA_PSEUDO_RANDOM_ITEM_SANGE_MAIM"},
		{ "trigger": "随机类型_物品_SANGEYASHA_MAIM", "contents": "DOTA_PSEUDO_RANDOM_ITEM_SANGEYASHA_MAIM"},
		{ "trigger": "随机类型_物品_STOUT", "contents": "DOTA_PSEUDO_RANDOM_ITEM_STOUT"},
		{ "trigger": "随机类型_物品_VANGUARD", "contents": "DOTA_PSEUDO_RANDOM_ITEM_VANGUARD"},
		{ "trigger": "随机类型_JUGG_CRIT", "contents": "DOTA_PSEUDO_RANDOM_JUGG_CRIT"},
		{ "trigger": "随机类型_LYCAN_CRIT", "contents": "DOTA_PSEUDO_RANDOM_LYCAN_CRIT"},
		{ "trigger": "随机类型_PHANTOMASSASSIN_CRIT", "contents": "DOTA_PSEUDO_RANDOM_PHANTOMASSASSIN_CRIT"},
		{ "trigger": "随机类型_SKELETONKING_CRIT", "contents": "DOTA_PSEUDO_RANDOM_SKELETONKING_CRIT"},
		{ "trigger": "随机类型_SLARDAR_BASH", "contents": "DOTA_PSEUDO_RANDOM_SLARDAR_BASH"},
		{ "trigger": "随机类型_SNIPER_HEADSHOT", "contents": "DOTA_PSEUDO_RANDOM_SNIPER_HEADSHOT"},
		{ "trigger": "随机类型_TROLL_BASH", "contents": "DOTA_PSEUDO_RANDOM_TROLL_BASH"},
		{ "trigger": "神符-DOUBLEDAMAGE", "contents": "DOTA_RUNE_DOUBLEDAMAGE"},
		{ "trigger": "神符-HASTE", "contents": "DOTA_RUNE_HASTE"},
		{ "trigger": "神符-HAUNTED", "contents": "DOTA_RUNE_HAUNTED"},
		{ "trigger": "神符-ILLUSION", "contents": "DOTA_RUNE_ILLUSION"},
		{ "trigger": "神符-INVISIBILITY", "contents": "DOTA_RUNE_INVISIBILITY"},
		{ "trigger": "神符-MYSTERY", "contents": "DOTA_RUNE_MYSTERY"},
		{ "trigger": "神符-RAPIER", "contents": "DOTA_RUNE_RAPIER"},
		{ "trigger": "神符-REGENERATION", "contents": "DOTA_RUNE_REGENERATION"},
		{ "trigger": "神符-SPOOKY", "contents": "DOTA_RUNE_SPOOKY"},
		{ "trigger": "神符-TURBO", "contents": "DOTA_RUNE_TURBO"},
		{ "trigger": "队伍-天辉", "contents": "DOTA_TEAM_BADGUYS"},
		{ "trigger": "队伍-夜魇", "contents": "DOTA_TEAM_GOODGUYS"},
		{ "trigger": "队伍-中立", "contents": "DOTA_TEAM_NEUTRALS"},
		{ "trigger": "队伍-无队伍", "contents": "DOTA_TEAM_NOTEAM"},
		{ "trigger": "DOTA_MAX_PLAYERS", "contents": "DOTA_MAX_PLAYERS"},
		{ "trigger": "DOTA_MAX_TEAM", "contents": "DOTA_MAX_TEAM"},
		{ "trigger": "DOTA_MAX_PLAYER_TEAMS", "contents": "DOTA_MAX_PLAYER_TEAMS"},
		{ "trigger": "DOTA_MAX_TEAM_PLAYERS", "contents": "DOTA_MAX_TEAM_PLAYERS"},
		{ "trigger": "单位-攻击类型-近战", "contents": "DOTA_UNIT_CAP_MELEE_ATTACK"},
		{ "trigger": "单位-移动-空中", "contents": "DOTA_UNIT_CAP_MOVE_FLY"},
		{ "trigger": "单位-移动-地面", "contents": "DOTA_UNIT_CAP_MOVE_GROUND"},
		{ "trigger": "单位-移动-无法移动", "contents": "DOTA_UNIT_CAP_MOVE_NONE"},
		{ "trigger": "单位-攻击-无法攻击", "contents": "DOTA_UNIT_CAP_NO_ATTACK"},
		{ "trigger": "单位-攻击-远程攻击", "contents": "DOTA_UNIT_CAP_RANGED_ATTACK"},
		{ "trigger": "单位指令-攻击移动", "contents": "DOTA_UNIT_ORDER_ATTACK_MOVE"},
		{ "trigger": "单位指令-攻击目标", "contents": "DOTA_UNIT_ORDER_ATTACK_TARGET"},
		{ "trigger": "单位指令-买活", "contents": "DOTA_UNIT_ORDER_BUYBACK"},
		{ "trigger": "单位指令-释放无目标技能", "contents": "DOTA_UNIT_ORDER_CAST_NO_TARGET"},
		{ "trigger": "单位指令-释放对点技能", "contents": "DOTA_UNIT_ORDER_CAST_POSITION"},
		{ "trigger": "单位指令-使用神符", "contents": "DOTA_UNIT_ORDER_CAST_RUNE"},
		{ "trigger": "单位指令-对单位释放技能", "contents": "DOTA_UNIT_ORDER_CAST_TARGET"},
		{ "trigger": "单位指令-对树木释放技能", "contents": "DOTA_UNIT_ORDER_CAST_TARGET_TREE"},
		{ "trigger": "单位指令-切换技能", "contents": "DOTA_UNIT_ORDER_CAST_TOGGLE"},
		{ "trigger": "单位指令-切换技能-自动", "contents": "DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO"},
		{ "trigger": "单位指令-拆散物品", "contents": "DOTA_UNIT_ORDER_DISASSEMBLE_ITEM"},
		{ "trigger": "单位指令-丢下物品", "contents": "DOTA_UNIT_ORDER_DROP_ITEM"},
		{ "trigger": "单位指令-从储藏处获取物品", "contents": "DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH"},
		{ "trigger": "单位指令-给予物品", "contents": "DOTA_UNIT_ORDER_GIVE_ITEM"},
		{ "trigger": "单位指令-GLYPH", "contents": "DOTA_UNIT_ORDER_GLYPH"},
		{ "trigger": "单位指令-保持原味", "contents": "DOTA_UNIT_ORDER_HOLD_POSITION"},
		{ "trigger": "单位指令-移动物品", "contents": "DOTA_UNIT_ORDER_MOVE_ITEM"},
		{ "trigger": "单位指令-移动到点", "contents": "DOTA_UNIT_ORDER_MOVE_TO_POSITION"},
		{ "trigger": "单位指令-移动到目标位置", "contents": "DOTA_UNIT_ORDER_MOVE_TO_TARGET"},
		{ "trigger": "单位指令-无", "contents": "DOTA_UNIT_ORDER_NONE"},
		{ "trigger": "单位指令-拾取物品", "contents": "DOTA_UNIT_ORDER_PICKUP_ITEM"},
		{ "trigger": "单位指令-拾取神符", "contents": "DOTA_UNIT_ORDER_PICKUP_RUNE"},
		{ "trigger": "单位指令-购买物品", "contents": "DOTA_UNIT_ORDER_PURCHASE_ITEM"},
		{ "trigger": "单位指令-售出物品", "contents": "DOTA_UNIT_ORDER_SELL_ITEM"},
		{ "trigger": "单位指令-停止", "contents": "DOTA_UNIT_ORDER_STOP"},
		{ "trigger": "单位指令-嘲讽", "contents": "DOTA_UNIT_ORDER_TAUNT"},
		{ "trigger": "单位指令-学习技能", "contents": "DOTA_UNIT_ORDER_TRAIN_ABILITY"},
		{ "trigger": "目标类型-全部", "contents": "DOTA_UNIT_TARGET_ALL"},
		{ "trigger": "目标类型-基础", "contents": "DOTA_UNIT_TARGET_BASIC"},
		{ "trigger": "目标类型-建筑", "contents": "DOTA_UNIT_TARGET_BUILDING"},
		{ "trigger": "目标类型-信使", "contents": "DOTA_UNIT_TARGET_COURIER"},
		{ "trigger": "目标类型-小兵", "contents": "DOTA_UNIT_TARGET_CREEP"},
		{ "trigger": "目标类型-自定义", "contents": "DOTA_UNIT_TARGET_CUSTOM"},
		{ "trigger": "目标类型-英雄", "contents": "DOTA_UNIT_TARGET_HERO"},
		{ "trigger": "目标类型-机械", "contents": "DOTA_UNIT_TARGET_MECHANICAL"},
		{ "trigger": "目标类型-无", "contents": "DOTA_UNIT_TARGET_NONE"},
		{ "trigger": "目标类型-其他", "contents": "DOTA_UNIT_TARGET_OTHER"},
		{ "trigger": "目标类型-树木", "contents": "DOTA_UNIT_TARGET_TREE"},
		{ "trigger": "目标类型-检查是否禁用帮助", "contents": "DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP"},
		{ "trigger": "目标类型-死亡", "contents": "DOTA_UNIT_TARGET_FLAG_DEAD"},
		{ "trigger": "目标类型-战争迷雾可见", "contents": "DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE"},
		{ "trigger": "目标类型-无敌", "contents": "DOTA_UNIT_TARGET_FLAG_INVULNERABLE"},
		{ "trigger": "目标类型-魔免单位", "contents": "DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"},
		{ "trigger": "目标类型-仅有魔法单位", "contents": "DOTA_UNIT_TARGET_FLAG_MANA_ONLY"},
		{ "trigger": "目标类型-仅近战单位", "contents": "DOTA_UNIT_TARGET_FLAG_MELEE_ONLY"},
		{ "trigger": "目标类型-仅可见目标", "contents": "DOTA_UNIT_TARGET_FLAG_NO_INVIS"},
		{ "trigger": "目标类型-无", "contents": "DOTA_UNIT_TARGET_FLAG_NONE"},
		{ "trigger": "目标类型-不能对遗迹释放", "contents": "DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS"},
		{ "trigger": "目标类型-不攻击魔免单位", "contents": "DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE"},
		{ "trigger": "目标类型-只能对英雄释放", "contents": "DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO"},
		{ "trigger": "目标类型-不能对玩家控制单位释放", "contents": "DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED"},
		{ "trigger": "目标类型-不能对幻像释放", "contents": "DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS"},
		{ "trigger": "目标类型-不能对魔免盟友释放", "contents": "DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES"},
		{ "trigger": "目标类型-不能对噩梦单位释放", "contents": "DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED"},
		{ "trigger": "目标类型-不能对召唤单位释放", "contents": "DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED"},
		{ "trigger": "目标类型-OUTOFWORLD", "contents": "DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD"},
		{ "trigger": "目标类型-对玩家控制的单位释放", "contents": "DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED"},
		{ "trigger": "目标类型-仅远程单位", "contents": "DOTA_UNIT_TARGET_FLAG_RANGED_ONLY"},
		{ "trigger": "目标类型-对双方队伍释放", "contents": "DOTA_UNIT_TARGET_TEAM_BOTH"},
		{ "trigger": "目标类型-对自定义队伍释放", "contents": "DOTA_UNIT_TARGET_TEAM_CUSTOM"},
		{ "trigger": "目标类型-对敌方队伍释放", "contents": "DOTA_UNIT_TARGET_TEAM_ENEMY"},
		{ "trigger": "目标类型-对友方队伍释放", "contents": "DOTA_UNIT_TARGET_TEAM_FRIENDLY"},
		{ "trigger": "目标类型-无队伍", "contents": "DOTA_UNIT_TARGET_TEAM_NONE"},
		{ "trigger": "FCVAR_ARCHIVE", "contents": "FCVAR_ARCHIVE"},
		{ "trigger": "FCVAR_CHEAT", "contents": "FCVAR_CHEAT"},
		{ "trigger": "FCVAR_DEMO", "contents": "FCVAR_DEMO"},
		{ "trigger": "FCVAR_DEVELOPMENTONLY", "contents": "FCVAR_DEVELOPMENTONLY"},
		{ "trigger": "FCVAR_DONTRECORD", "contents": "FCVAR_DONTRECORD"},
		{ "trigger": "FCVAR_HIDDEN", "contents": "FCVAR_HIDDEN"},
		{ "trigger": "FCVAR_NEVER_AS_STRING", "contents": "FCVAR_NEVER_AS_STRING"},
		{ "trigger": "FCVAR_NOT_CONNECTED", "contents": "FCVAR_NOT_CONNECTED"},
		{ "trigger": "FCVAR_NOTIFY", "contents": "FCVAR_NOTIFY"},
		{ "trigger": "FCVAR_PRINTABLEONLY", "contents": "FCVAR_PRINTABLEONLY"},
		{ "trigger": "FCVAR_PROTECTED", "contents": "FCVAR_PROTECTED"},
		{ "trigger": "FCVAR_REPLICATED", "contents": "FCVAR_REPLICATED"},
		{ "trigger": "FCVAR_SPONLY", "contents": "FCVAR_SPONLY"},
		{ "trigger": "FCVAR_SS", "contents": "FCVAR_SS"},
		{ "trigger": "FCVAR_UNLOGGED", "contents": "FCVAR_UNLOGGED"},
		{ "trigger": "FCVAR_UNREGISTERED", "contents": "FCVAR_UNREGISTERED"},
		{ "trigger": "FCVAR_USERINFO", "contents": "FCVAR_USERINFO"},
		{ "trigger": "FCVAR_VCONSOLE_SET_FOCUS", "contents": "FCVAR_VCONSOLE_SET_FOCUS"},
		{ "trigger": "寻找顺序-任意", "contents": "FIND_ANY_ORDER"},
		{ "trigger": "寻找顺序-最近的", "contents": "FIND_CLOSEST"},
		{ "trigger": "寻找顺序-最远的", "contents": "FIND_FARTHEST"},
		{ "trigger": "寻找顺序-所有地点", "contents": "FIND_UNITS_EVERYWHERE"},
		{ "trigger": "物品-可完全共享", "contents": "ITEM_FULLY_SHAREABLE"},
		{ "trigger": "物品-可完全共享-对多", "contents": "ITEM_FULLY_SHAREABLE_STACKING"},
		{ "trigger": "物品-不可共享", "contents": "ITEM_NOT_SHAREABLE"},
		{ "trigger": "物品-部分共享", "contents": "ITEM_PARTIALLY_SHAREABLE"},
		{ "trigger": "物品-消耗品", "contents": "ITEM_CONSUMABLE"},
		{ "trigger": "物品-核心", "contents": "ITEM_CORE"},
		{ "trigger": "物品-衍生", "contents": "ITEM_DERIVED"},
		{ "trigger": "物品-派生", "contents": "ITEM_EXTENSION"},
		{ "trigger": "物品-奢侈", "contents": "ITEM_LUXURY"},
		{ "trigger": "物品-可出售", "contents": "ITEM_SELLABLE"},
		{ "trigger": "物品-标签-DOHITLOCATIONDMG", "contents": "ITEM_FLAG_DOHITLOCATIONDMG"},
		{ "trigger": "物品-标签-EXHAUSTIBLE", "contents": "ITEM_FLAG_EXHAUSTIBLE"},
		{ "trigger": "物品-标签-LIMITINWORLD", "contents": "ITEM_FLAG_LIMITINWORLD"},
		{ "trigger": "物品-标签-NOAMMOPICKUPS", "contents": "ITEM_FLAG_NOAMMOPICKUPS"},
		{ "trigger": "物品-标签-NOAUTORELOAD", "contents": "ITEM_FLAG_NOAUTORELOAD"},
		{ "trigger": "物品-标签-NOAUTOSWITCHEMPTY", "contents": "ITEM_FLAG_NOAUTOSWITCHEMPTY"},
		{ "trigger": "物品-标签-NOITEMPICKUP", "contents": "ITEM_FLAG_NOITEMPICKUP"},
		{ "trigger": "物品-标签-SELECTONEMPTY", "contents": "ITEM_FLAG_SELECTONEMPTY"},
		{ "trigger": "修改器-属性-无视魔免", "contents": "MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE"},
		{ "trigger": "修改器-属性-多重", "contents": "MODIFIER_ATTRIBUTE_MULTIPLE"},
		{ "trigger": "修改器-属性-无", "contents": "MODIFIER_ATTRIBUTE_NONE"},
		{ "trigger": "修改器-属性-永久", "contents": "MODIFIER_ATTRIBUTE_PERMANENT"},
		{ "trigger": "修改器-事件-当技能施法中止", "contents": "MODIFIER_EVENT_ON_ABILITY_END_CHANNEL"},
		{ "trigger": "修改器-事件-当释放技能", "contents": "MODIFIER_EVENT_ON_ABILITY_EXECUTED"},
		{ "trigger": "修改器-事件-当开始释放技能", "contents": "MODIFIER_EVENT_ON_ABILITY_START"},
		{ "trigger": "修改器-事件-当攻击", "contents": "MODIFIER_EVENT_ON_ATTACK"},
		{ "trigger": "修改器-事件-当攻击队友", "contents": "MODIFIER_EVENT_ON_ATTACK_ALLIED"},
		{ "trigger": "修改器-事件-当攻击失败", "contents": "MODIFIER_EVENT_ON_ATTACK_FAIL"},
		{ "trigger": "修改器-事件-当攻击到位", "contents": "MODIFIER_EVENT_ON_ATTACK_LANDED"},
		{ "trigger": "修改器-事件-当攻击开始", "contents": "MODIFIER_EVENT_ON_ATTACK_START"},
		{ "trigger": "修改器-事件-当受到攻击", "contents": "MODIFIER_EVENT_ON_ATTACKED"},
		{ "trigger": "修改器-事件-当脱离隐身", "contents": "MODIFIER_EVENT_ON_BREAK_INVISIBILITY"},
		{ "trigger": "修改器-事件-当死亡", "contents": "MODIFIER_EVENT_ON_DEATH"},
		{ "trigger": "修改器-事件-当获得生命值", "contents": "MODIFIER_EVENT_ON_HEALTH_GAINED"},
		{ "trigger": "修改器-事件-当获得魔法", "contents": "MODIFIER_EVENT_ON_MANA_GAINED"},
		{ "trigger": "修改器-事件-当法球生效", "contents": "MODIFIER_EVENT_ON_ORB_EFFECT"},
		{ "trigger": "修改器-事件-当命令", "contents": "MODIFIER_EVENT_ON_ORDER"},
		{ "trigger": "修改器-事件-当阶段升级", "contents": "MODIFIER_EVENT_ON_PROCESS_UPGRADE"},
		{ "trigger": "修改器-事件-当闪躲子弹", "contents": "MODIFIER_EVENT_ON_PROJECTILE_DODGE"},
		{ "trigger": "修改器-事件-当刷新", "contents": "MODIFIER_EVENT_ON_REFRESH"},
		{ "trigger": "修改器-事件-当复活", "contents": "MODIFIER_EVENT_ON_RESPAWN"},
		{ "trigger": "修改器-事件-当花费魔法", "contents": "MODIFIER_EVENT_ON_SPENT_MANA"},
		{ "trigger": "修改器-事件-当阶段改变", "contents": "MODIFIER_EVENT_ON_STATE_CHANGED"},
		{ "trigger": "修改器-事件-当受到伤害", "contents": "MODIFIER_EVENT_ON_TAKEDAMAGE"},
		{ "trigger": "修改器-事件-当受到伤害圣剑羊刀", "contents": "MODIFIER_EVENT_ON_TAKEDAMAGE_REAPERSCYTHE"},
		{ "trigger": "修改器-事件-当传送完成", "contents": "MODIFIER_EVENT_ON_TELEPORTED"},
		{ "trigger": "修改器-事件-当传送中", "contents": "MODIFIER_EVENT_ON_TELEPORTING"},
		{ "trigger": "修改器-事件-当单位移动", "contents": "MODIFIER_EVENT_ON_UNIT_MOVED"},
		{ "trigger": "修改器-属性-绝对无魔法伤害", "contents": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL"},
		{ "trigger": "修改器-属性-绝对无物理伤害", "contents": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL"},
		{ "trigger": "修改器-属性-绝对无纯粹伤害", "contents": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE"},
		{ "trigger": "修改器-属性-吸收机能", "contents": "MODIFIER_PROPERTY_ABSORB_SPELL"},
		{ "trigger": "修改器-属性-攻击距离加成", "contents": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS"},
		{ "trigger": "修改器-属性-攻击速度加成-常量", "contents": "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT"},
		{ "trigger": "修改器-属性-攻击速度加成-常量-PT", "contents": "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_POWER_TREADS"},
		{ "trigger": "修改器-属性-攻击速度加成-常量-第二", "contents": "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_SECONDARY"},
		{ "trigger": "修改器-属性-AVOID-CONSTANT", "contents": "MODIFIER_PROPERTY_AVOID_CONSTANT"},
		{ "trigger": "修改器-属性-AVOID-SPELL", "contents": "MODIFIER_PROPERTY_AVOID_SPELL"},
		{ "trigger": "修改器-属性-基础攻击间隔-常量", "contents": "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT"},
		{ "trigger": "修改器-属性-基础魔法恢复", "contents": "MODIFIER_PROPERTY_BASE_MANA_REGEN"},
		{ "trigger": "修改器-属性-基础攻击-额外攻击", "contents": "MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE"},
		{ "trigger": "修改器-属性-基础伤害输出-常量", "contents": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE"},
		{ "trigger": "修改器-属性-额外白天视野", "contents": "MODIFIER_PROPERTY_BONUS_DAY_VISION"},
		{ "trigger": "修改器-属性-额外夜晚视野", "contents": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION"},
		{ "trigger": "修改器-属性-视野加成-百分比", "contents": "MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE"},
		{ "trigger": "修改器-属性-冷却时间减少-常量", "contents": "MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT"},
		{ "trigger": "修改器-属性-伤害输出-百分比", "contents": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE"},
		{ "trigger": "修改器-属性-伤害输出-百分比-幻像", "contents": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION"},
		{ "trigger": "修改器-属性-死亡损失金钱", "contents": "MODIFIER_PROPERTY_DEATHGOLDCOST"},
		{ "trigger": "修改器-属性-禁止自动攻击", "contents": "MODIFIER_PROPERTY_DISABLE_AUTOATTACK"},
		{ "trigger": "修改器-属性-禁止治疗", "contents": "MODIFIER_PROPERTY_DISABLE_HEALING"},
		{ "trigger": "修改器-属性-闪避-常量", "contents": "MODIFIER_PROPERTY_EVASION_CONSTANT"},
		{ "trigger": "修改器-属性-额外生命加成", "contents": "MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS"},
		{ "trigger": "修改器-属性-额外魔法加成", "contents": "MODIFIER_PROPERTY_EXTRA_MANA_BONUS"},
		{ "trigger": "修改器-属性-额外力量加成", "contents": "MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS"},
		{ "trigger": "修改器-属性-强制-绘制小地图", "contents": "MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP"},
		{ "trigger": "修改器-属性-生命加成", "contents": "MODIFIER_PROPERTY_HEALTH_BONUS"},
		{ "trigger": "修改器-属性-生命恢复加成-常量", "contents": "MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT"},
		{ "trigger": "修改器-属性-生命恢复加成-百分比", "contents": "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE"},
		{ "trigger": "修改器-属性-所受伤害加成-百分比", "contents": "MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE"},
		{ "trigger": "修改器-属性-所受物理伤害加成-百分比", "contents": "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE"},
		{ "trigger": "修改器-属性-所受技能伤害加成-常量", "contents": "MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT"},
		{ "trigger": "修改器-属性-隐身等级", "contents": "MODIFIER_PROPERTY_INVISIBILITY_LEVEL"},
		{ "trigger": "修改器-属性-是否幻象", "contents": "MODIFIER_PROPERTY_IS_ILLUSION"},
		{ "trigger": "修改器-属性-是否变羊", "contents": "MODIFIER_PROPERTY_IS_SCEPTER"},
		{ "trigger": "修改器-属性-生命周期-片段", "contents": "MODIFIER_PROPERTY_LIFETIME_FRACTION"},
		{ "trigger": "修改器-属性-魔法抗性加厚层", "contents": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS"},
		{ "trigger": "修改器-属性-魔法抗性（放逐-独特）", "contents": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE"},
		{ "trigger": "修改器-属性-魔法抗性（物品-独特）", "contents": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_ITEM_UNIQUE"},
		{ "trigger": "修改器-属性-修改器-魔法加厚层", "contents": "MODIFIER_PROPERTY_MANA_BONUS"},
		{ "trigger": "修改器-属性-魔法恢复加成-常量", "contents": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT"},
		{ "trigger": "修改器-属性-魔法恢复加成-常量（特殊）", "contents": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE"},
		{ "trigger": "修改器-属性-魔法恢复百分比", "contents": "MODIFIER_PROPERTY_MANA_REGEN_PERCENTAGE"},
		{ "trigger": "修改器-属性-魔法恢复-总体百分比", "contents": "MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE"},
		{ "trigger": "修改器-属性-最小生命值", "contents": "MODIFIER_PROPERTY_MIN_HEALTH"},
		{ "trigger": "修改器-属性-丢失概率", "contents": "MODIFIER_PROPERTY_MISS_PERCENTAGE"},
		{ "trigger": "修改器-属性-修改模型", "contents": "MODIFIER_PROPERTY_MODEL_CHANGE"},
		{ "trigger": "修改器-属性-模型大小", "contents": "MODIFIER_PROPERTY_MODEL_SCALE"},
		{ "trigger": "修改器-属性-移动速度-绝对", "contents": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE"},
		{ "trigger": "修改器-属性-移动速度-覆盖基础移动速度", "contents": "MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE"},
		{ "trigger": "修改器-属性-移动速度-加成-常量", "contents": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT"},
		{ "trigger": "修改器-属性-移动速度加成-百分比", "contents": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE"},
		{ "trigger": "修改器-属性-移动速度加成-百分比（特殊）", "contents": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE"},
		{ "trigger": "修改器-属性-移动速度加成-特殊", "contents": "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE"},
		{ "trigger": "修改器-属性-移动速度加成-限制", "contents": "MODIFIER_PROPERTY_MOVESPEED_LIMIT"},
		{ "trigger": "修改器-属性-移动速度加成-最大", "contents": "MODIFIER_PROPERTY_MOVESPEED_MAX"},
		{ "trigger": "修改器-属性-覆盖动画", "contents": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION"},
		{ "trigger": "修改器-属性-覆盖动画速度", "contents": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE"},
		{ "trigger": "修改器-属性-覆盖动画权值", "contents": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT"},
		{ "trigger": "修改器-属性-永久隐身", "contents": "MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY"},
		{ "trigger": "修改器-属性-物理护甲加成", "contents": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS"},
		{ "trigger": "修改器-属性-物理护甲加成-幻想", "contents": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_ILLUSIONS"},
		{ "trigger": "修改器-属性-物理护甲加成-独特", "contents": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE"},
		{ "trigger": "修改器-属性-物理护甲加成-独特-激活", "contents": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE"},
		{ "trigger": "修改器-属性-物理CONSTANT BLOCK", "contents": "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_POST_ATTACK"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_COMPOSITE"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_PROCATTACK_FEEDBACK"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_PROVIDES_FOW_POSITION"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_REINCARNATION"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_RESPAWNTIME"},
		{ "trigger": "修改器-属性-敏捷加成", "contents": "MODIFIER_PROPERTY_STATS_AGILITY_BONUS"},
		{ "trigger": "修改器-属性-智力加成", "contents": "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS"},
		{ "trigger": "修改器-属性-力量加成", "contents": "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_TOOLTIP"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE"},
		{ "trigger": "修改器-属性-", "contents": "MODIFIER_STATE_ATTACK_IMMUNE"},
		{ "trigger": "修改器-状态-盲", "contents": "MODIFIER_STATE_BLIND"},
		{ "trigger": "修改器-状态-BLOCK-DISABLED", "contents": "MODIFIER_STATE_BLOCK_DISABLED"},
		{ "trigger": "修改器-状态-不会丢失", "contents": "MODIFIER_STATE_CANNOT_MISS"},
		{ "trigger": "修改器-状态-命令限制", "contents": "MODIFIER_STATE_COMMAND_RESTRICTED"},
		{ "trigger": "修改器-状态-缴械", "contents": "MODIFIER_STATE_DISARMED"},
		{ "trigger": "修改器-状态-被控制", "contents": "MODIFIER_STATE_DOMINATED"},
		{ "trigger": "修改器-状态-无法闪避", "contents": "MODIFIER_STATE_EVADE_DISABLED"},
		{ "trigger": "修改器-状态-飞行", "contents": "MODIFIER_STATE_FLYING"},
		{ "trigger": "修改器-状态-冰冻", "contents": "MODIFIER_STATE_FROZEN"},
		{ "trigger": "修改器-状态-变羊", "contents": "MODIFIER_STATE_HEXED"},
		{ "trigger": "修改器-状态-隐身", "contents": "MODIFIER_STATE_INVISIBLE"},
		{ "trigger": "修改器-状态-无敌", "contents": "MODIFIER_STATE_INVULNERABLE"},
		{ "trigger": "修改器-状态-低攻击优先", "contents": "MODIFIER_STATE_LOW_ATTACK_PRIORITY"},
		{ "trigger": "修改器-状态-魔法免疫", "contents": "MODIFIER_STATE_MAGIC_IMMUNE"},
		{ "trigger": "修改器-状态-被静音", "contents": "MODIFIER_STATE_MUTED"},
		{ "trigger": "修改器-状态-被噩梦", "contents": "MODIFIER_STATE_NIGHTMARED"},
		{ "trigger": "修改器-状态-无生命条", "contents": "MODIFIER_STATE_NO_HEALTH_BAR"},
		{ "trigger": "修改器-状态-无队伍移动", "contents": "MODIFIER_STATE_NO_TEAM_MOVE_TO"},
		{ "trigger": "修改器-状态-无队伍选择", "contents": "MODIFIER_STATE_NO_TEAM_SELECT"},
		{ "trigger": "修改器-状态-无单位碰撞", "contents": "MODIFIER_STATE_NO_UNIT_COLLISION"},
		{ "trigger": "修改器-状态-不在小地图显示", "contents": "MODIFIER_STATE_NOT_ON_MINIMAP"},
		{ "trigger": "修改器-状态-不在小地图显示（对敌方）", "contents": "MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES"},
		{ "trigger": "修改器-状态-游戏外", "contents": "MODIFIER_STATE_OUT_OF_GAME"},
		{ "trigger": "修改器-状态-PASSIVE-DISABLED", "contents": "MODIFIER_STATE_PASSIVES_DISABLED"},
		{ "trigger": "修改器-状态-提供视野", "contents": "MODIFIER_STATE_PROVIDES_VISION"},
		{ "trigger": "修改器-状态-被定身", "contents": "MODIFIER_STATE_ROOTED"},
		{ "trigger": "修改器-状态-被沉默", "contents": "MODIFIER_STATE_SILENCED"},
		{ "trigger": "修改器-状态-被（软）缴械", "contents": "MODIFIER_STATE_SOFT_DISARMED"},
		{ "trigger": "修改器-状态-能被反补", "contents": "MODIFIER_STATE_SPECIALLY_DENIABLE"},
		{ "trigger": "修改器-状态-被徐娜运", "contents": "MODIFIER_STATE_STUNNED"},
		{ "trigger": "修改器-状态-无法选取", "contents": "MODIFIER_STATE_UNSELECTABLE"},
		{ "trigger": "修改器-状态VALUE-DISABLED", "contents": "MODIFIER_STATE_VALUE_DISABLED"},
		{ "trigger": "修改器-状态-VALUE-ENABLED", "contents": "MODIFIER_STATE_VALUE_ENABLED"},
		{ "trigger": "修改器-状态-VALUE-NO-ACTION", "contents": "MODIFIER_STATE_VALUE_NO_ACTION"},
		{ "trigger": "MAX_PATTACH_TYPES", "contents": "MAX_PATTACH_TYPES"},
		{ "trigger": "PATTACH_ABSORIGIN", "contents": "PATTACH_ABSORIGIN"},
		{ "trigger": "PATTACH_ABSORIGIN_FOLLOW", "contents": "PATTACH_ABSORIGIN_FOLLOW"},
		{ "trigger": "PATTACH_CUSTOMORIGIN", "contents": "PATTACH_CUSTOMORIGIN"},
		{ "trigger": "PATTACH_CUSTOMORIGIN_FOLLOW", "contents": "PATTACH_CUSTOMORIGIN_FOLLOW"},
		{ "trigger": "PATTACH_EYES_FOLLOW", "contents": "PATTACH_EYES_FOLLOW"},
		{ "trigger": "PATTACH_OVERHEAD_FOLLOW", "contents": "PATTACH_OVERHEAD_FOLLOW"},
		{ "trigger": "PATTACH_POINT", "contents": "PATTACH_POINT"},
		{ "trigger": "PATTACH_POINT_FOLLOW", "contents": "PATTACH_POINT_FOLLOW"},
		{ "trigger": "PATTACH_POINT_FOLLOW_SUBSTEPPED", "contents": "PATTACH_POINT_FOLLOW_SUBSTEPPED"},
		{ "trigger": "PATTACH_RENDERORIGIN_FOLLOW", "contents": "PATTACH_RENDERORIGIN_FOLLOW"},
		{ "trigger": "PATTACH_ROOTBONE_FOLLOW", "contents": "PATTACH_ROOTBONE_FOLLOW"},
		{ "trigger": "PATTACH_WORLDORIGIN", "contents": "PATTACH_WORLDORIGIN"},
		{ "trigger": "QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE", "contents": "QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE"},
		{ "trigger": "QUEST_TEXT_REPLACE_VALUE_REWARD", "contents": "QUEST_TEXT_REPLACE_VALUE_REWARD"},
		{ "trigger": "QUEST_TEXT_REPLACE_VALUE_ROUND", "contents": "QUEST_TEXT_REPLACE_VALUE_ROUND"},
		{ "trigger": "QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE", "contents": "QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE"},
		{ "trigger": "SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE", "contents": "SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE"},
		{ "trigger": "SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE", "contents": "SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE"},



		{ "trigger": "XavierCHN","contents":"XavierCHN"}
>>>>>>> origin/master


















		{ "trigger": "粒子管理器-CreateParticle(string particleName,int ParticleAttach , Entity owningEntity , Player viewingPlayer)", "contents": "${1:ParticleManager}:CreateParticle(${2:string particleName},${3:int ParticleAttach},${4:Entity owningEntity},${5:Player viewingPlayer})"},
		{ "trigger": "粒子管理器-CreateParticleForPlayer(string particleName,int ParticleAttach , Entity owningEntity , Player viewingPlayer)", "contents": "${1:ParticleManager}:CreateParticleForPlayer(${2:string particleName},${3:int ParticleAttach},${4:Entity owningEntity},${5:Player viewingPlayer})"},
		{ "trigger": "粒子管理器-SetParticleControl(int particleId,int controlIndex , vector controlData)", "contents": "${1:ParticleManager}:SetParticleControl(${2:int particleId},${3:int controlIndex},${4:vector controlData})"},
		{ "trigger": "粒子管理器-ReleaseParticleIndex(int particleId)", "contents": "${1:ParticleManager}:ReleaseParticleIndex(${2:int particleId})"},


		{ "trigger": "GameRules_State_Get()", "contents": "${1:GameRules}:State_Get()"},
		{ "trigger": "GameRules_GetGameTime()", "contents": "${1:GameRules}:GetGameTime()"},
		{ "trigger": "GameRules_GetDifficulty()", "contents": "${1:GameRules}:GetDifficulty()"},
		{ "trigger": "GameRules_GetCustomGameDifficulty()", "contents": "${1:GameRules}:GetCustomGameDifficulty()"},
		{ "trigger": "GameRules_Defeated()", "contents": "${1:GameRules}:Defeated()"},
		{ "trigger": "GameRules_ResetDefeated()", "contents": "${1:GameRules}:ResetDefeated()"},
		{ "trigger": "GameRules_SetGameWinner(int team)", "contents": "${1:GameRules}:SetGameWinner(${2:int team})"},
		{ "trigger": "GameRules_MakeTeamLose(int team)", "contents": "${1:GameRules}:MakeTeamLose(${2:int team})"},
		{ "trigger": "GameRules_ResetMap(int unKnown)", "contents": "${1:GameRules}:ResetMap(${2:int unKnown})"},
		{ "trigger": "GameRules_GetDroppedItem(int dropIndex)", "contents": "${1:GameRules}:GetDroppedItem(${2:int dropIndex})"},
		{ "trigger": "GameRules_NumDroppedItems()", "contents": "${1:GameRules}:NumDroppedItems()"},
		{ "trigger": "GameRules_SendCustomMessage(string stringText,int unKnown , int unKnown)", "contents": "${1:GameRules}:SendCustomMessage(${2:string stringText},${3:int unKnown},${4:int unKnown})"},
		{ "trigger": "GameRules_SetHeroRespawnEnabled(bool canRespawn)", "contents": "${1:GameRules}:SetHeroRespawnEnabled(${2:bool canRespawn})"},
		{ "trigger": "GameRules_Playtesting_UpdateCustomKeyValues()", "contents": "${1:GameRules}:Playtesting_UpdateCustomKeyValues()"},
		{ "trigger": "GameRules_ResetToHeroSelection()", "contents": "${1:GameRules}:ResetToHeroSelection()"},
		{ "trigger": "GameRules_SetTreeRegrowTime(float seconds)", "contents": "${1:GameRules}:SetTreeRegrowTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetHeroSelectionTime(float seconds)", "contents": "${1:GameRules}:SetHeroSelectionTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetPreGameTime(float seconds)", "contents": "${1:GameRules}:SetPreGameTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetPostGameTime(float seconds)", "contents": "${1:GameRules}:SetPostGameTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetRuneSpawnTime(float seconds)", "contents": "${1:GameRules}:SetRuneSpawnTime(${2:float seconds})"},
		{ "trigger": "GameRules_SetSameHeroSelectionEnabled(bool enabled)", "contents": "${1:GameRules}:SetSameHeroSelectionEnabled(${2:bool enabled})"},
		{ "trigger": "GameRules_SetUseUniversalShopMode(bool enabled)", "contents": "${1:GameRules}:SetUseUniversalShopMode(${2:bool enabled})"},
		{ "trigger": "GameRules_SetTimeOfDay(float time)", "contents": "${1:GameRules}:SetTimeOfDay(${2:float time})"},
		{ "trigger": "GameRules_SetOverlayHealthBarUnit(Unit unit,int style)", "contents": "${1:GameRules}:SetOverlayHealthBarUnit(${2:Unit unit},${3:int style})"},
		{ "trigger": "GameRules_SetHeroMinimapIconSize(int iconSize)", "contents": "${1:GameRules}:SetHeroMinimapIconSize(${2:int iconSize})"},
		{ "trigger": "GameRules_SetCreepMinimapIconScale(float creepScale)", "contents": "${1:GameRules}:SetCreepMinimapIconScale(${2:float creepScale})"},
		{ "trigger": "GameRules_SetRuneMinimapIconScale(float runeScale)", "contents": "${1:GameRules}:SetRuneMinimapIconScale(${2:float runeScale})"},
		{ "trigger": "GameRules_SetSafeToLeave(bool safeToLeave)", "contents": "${1:GameRules}:SetSafeToLeave(${2:bool safeToLeave})"},
		{ "trigger": "GameRules_SetUseCustomHeroXPValues(bool unKnown)", "contents": "${1:GameRules}:SetUseCustomHeroXPValues(${2:bool unKnown})"},
		{ "trigger": "GameRules_SetCustomGameDifficulty(int unKnown)", "contents": "${1:GameRules}:SetCustomGameDifficulty(${2:int unKnown})"},
		{ "trigger": "GameRules_SetGoldTickTime(float unKnown)", "contents": "${1:GameRules}:SetGoldTickTime(${2:float unKnown})"},
		{ "trigger": "GameRules_SetGoldPerTick(int unKnown)", "contents": "${1:GameRules}:SetGoldPerTick(${2:int unKnown})"},
		{ "trigger": "GameRules_SetNianFightStartTime(float unKnown)", "contents": "${1:GameRules}:SetNianFightStartTime(${2:float unKnown})"},
		{ "trigger": "GameRules_GetNianFightStartTime()", "contents": "${1:GameRules}:GetNianFightStartTime()"},
		{ "trigger": "GameRules_GetMatchSignoutComplete()", "contents": "${1:GameRules}:GetMatchSignoutComplete()"},
		{ "trigger": "GameRules_DidMatchSignoutTimeOut()", "contents": "${1:GameRules}:DidMatchSignoutTimeOut()"},
		{ "trigger": "GameRules_GetNianTotalDamageTaken()", "contents": "${1:GameRules}:GetNianTotalDamageTaken()"},


		{ "trigger": "Entities_First()", "contents": "${1:Entities}:First()"},
		{ "trigger": "Entities_Next(Entity startFrom)", "contents": "${1:Entities}:Next(${2:Entity startFrom})"},
		{ "trigger": "Entities_CreateByClassname(string className)", "contents": "${1:Entities}:CreateByClassname(${2:string className})"},
		{ "trigger": "Entities_FindByClassname(Entity startFrom,string className)", "contents": "${1:Entities}:FindByClassname(${2:Entity startFrom},${3:string className})"},
		{ "trigger": "Entities_FindAllByClassname(string className)", "contents": "${1:Entities}:FindAllByClassname(${2:string className})"},
		{ "trigger": "Entities_FindByName(Entity startFrom,string entName)", "contents": "${1:Entities}:FindByName(${2:Entity startFrom},${3:string entName})"},
		{ "trigger": "Entities_FindAllByName(string name)", "contents": "${1:Entities}:FindAllByName(${2:string name})"},
		{ "trigger": "Entities_FindInSphere(Entity startFrom,vector origin , float radius)", "contents": "${1:Entities}:FindInSphere(${2:Entity startFrom},${3:vector origin},${4:float radius})"},
		{ "trigger": "Entities_FindAllInSphere(vector origin,float radius)", "contents": "${1:Entities}:FindAllInSphere(${2:vector origin},${3:float radius})"},
		{ "trigger": "Entities_FindByTarget(Entity startFrom,string targetName)", "contents": "${1:Entities}:FindByTarget(${2:Entity startFrom},${3:string targetName})"},
		{ "trigger": "Entities_FindAllByTarget(string targetName)", "contents": "${1:Entities}:FindAllByTarget(${2:string targetName})"},
		{ "trigger": "Entities_FindByModel(Entity startFrom,string modelName)", "contents": "${1:Entities}:FindByModel(${2:Entity startFrom},${3:string modelName})"},
		{ "trigger": "Entities_FindAllByModel(string modelName)", "contents": "${1:Entities}:FindAllByModel(${2:string modelName})"},
		{ "trigger": "Entities_FindByNameNearest(string entityName,vector origin , float radius)", "contents": "${1:Entities}:FindByNameNearest(${2:string entityName},${3:vector origin},${4:float radius})"},
		{ "trigger": "Entities_FindByNameWithin(Entity startFrom,string entityName , vector origin , float radius)", "contents": "${1:Entities}:FindByNameWithin(${2:Entity startFrom},${3:string entityName},${4:vector origin},${5:float radius})"},
		{ "trigger": "Entities_FindAllByNameWithin(string entityName,vector origin , float radius)", "contents": "${1:Entities}:FindAllByNameWithin(${2:string entityName},${3:vector origin},${4:float radius})"},
		{ "trigger": "Entities_FindByClassnameNearest(string className,vector origin , float radius)", "contents": "${1:Entities}:FindByClassnameNearest(${2:string className},${3:vector origin},${4:float radius})"},
		{ "trigger": "Entities_FindByClassnameWithin(Entity startFrom,string className , vector origin , float radius)", "contents": "${1:Entities}:FindByClassnameWithin(${2:Entity startFrom},${3:string className},${4:vector origin},${5:float radius})"},
		{ "trigger": "Entities_FindAllByClassnameWithin(string className,vector origin , float radius)", "contents": "${1:Entities}:FindAllByClassnameWithin(${2:string className},${3:vector origin},${4:float radius})"},


		{ "trigger": "CScriptHeroList_GetHero(int heroId)", "contents": "${1:CScriptHeroList}:GetHero(${2:int heroId})"},
		{ "trigger": "CScriptHeroList_GetHeroCount()", "contents": "${1:CScriptHeroList}:GetHeroCount()"},
		{ "trigger": "CScriptHeroList_GetAllHeroes()", "contents": "${1:CScriptHeroList}:GetAllHeroes()"},


		{ "trigger": "ConVars_GetFloat(string varName)", "contents": "${1:ConVars}:GetFloat(${2:string varName})"},
		{ "trigger": "ConVars_GetStr(string varName)", "contents": "${1:ConVars}:GetStr(${2:string varName})"},
		{ "trigger": "ConVars_GetBool(string varName)", "contents": "${1:ConVars}:GetBool(${2:string varName})"},
		{ "trigger": "ConVars_RegisterCommand(string varName,function func , string helpText , int flags)", "contents": "${1:ConVars}:RegisterCommand(${2:string varName},${3:function func},${4:string helpText},${5:int flags})"},
		{ "trigger": "ConVars_RegisterConvar(string name,string default , string helpText , int flags)", "contents": "${1:ConVars}:RegisterConvar(${2:string name},${3:string default},${4:string helpText},${5:int flags})"},
		{ "trigger": "ConVars_GetCommandClient()", "contents": "${1:ConVars}:GetCommandClient()"},
		{ "trigger": "ConVars_GetDOTACommandClient()", "contents": "${1:ConVars}:GetDOTACommandClient()"},


		{ "trigger": "CBaseEntity_ConnectOutput(string unKnown,string unKnown)", "contents": "${1:CBaseEntity}:ConnectOutput(${2:string unKnown},${3:string unKnown})"},
		{ "trigger": "CBaseEntity_DisconnectOutput(string unKnown,string unKnown)", "contents": "${1:CBaseEntity}:DisconnectOutput(${2:string unKnown},${3:string unKnown})"},
		{ "trigger": "CBaseEntity_GetHealth()", "contents": "${1:CBaseEntity}:GetHealth()"},
		{ "trigger": "CBaseEntity_SetHealth(int hp)", "contents": "${1:CBaseEntity}:SetHealth(${2:int hp})"},
		{ "trigger": "CBaseEntity_GetMaxHealth()", "contents": "${1:CBaseEntity}:GetMaxHealth()"},
		{ "trigger": "CBaseEntity_SetMaxHealth(int hp)", "contents": "${1:CBaseEntity}:SetMaxHealth(${2:int hp})"},
		{ "trigger": "CBaseEntity_IsAlive()", "contents": "${1:CBaseEntity}:IsAlive()"},
		{ "trigger": "CBaseEntity_Remove()", "contents": "${1:CBaseEntity}:Remove()"},
		{ "trigger": "CBaseEntity_SetModel(string modelName)", "contents": "${1:CBaseEntity}:SetModel(${2:string modelName})"},
		{ "trigger": "CBaseEntity_GetModelName()", "contents": "${1:CBaseEntity}:GetModelName()"},
		{ "trigger": "CBaseEntity_EmitSound(string soundName)", "contents": "${1:CBaseEntity}:EmitSound(${2:string soundName})"},
		{ "trigger": "CBaseEntity_EmitSoundParams(string soundName,int pitch , float volume)", "contents": "${1:CBaseEntity}:EmitSoundParams(${2:string soundName},${3:int pitch},${4:float volume})"},
		{ "trigger": "CBaseEntity_StopSound(string soundName)", "contents": "${1:CBaseEntity}:StopSound(${2:string soundName})"},
		{ "trigger": "CBaseEntity_PrecacheSoundScript(string soundName)", "contents": "${1:CBaseEntity}:PrecacheSoundScript(${2:string soundName})"},
		{ "trigger": "CBaseEntity_GetSoundDuration(string soundName,string actorModelname)", "contents": "${1:CBaseEntity}:GetSoundDuration(${2:string soundName},${3:string actorModelname})"},
		{ "trigger": "CBaseEntity_GetClassname()", "contents": "${1:CBaseEntity}:GetClassname()"},
		{ "trigger": "CBaseEntity_GetName()", "contents": "${1:CBaseEntity}:GetName()"},
		{ "trigger": "CBaseEntity_GetPreTemplateName()", "contents": "${1:CBaseEntity}:GetPreTemplateName()"},
		{ "trigger": "CBaseEntity_GetAbsOrigin()", "contents": "${1:CBaseEntity}:GetAbsOrigin()"},
		{ "trigger": "CBaseEntity_SetAbsOrigin(vector vec)", "contents": "${1:CBaseEntity}:SetAbsOrigin(${2:vector vec})"},
		{ "trigger": "CBaseEntity_GetOrigin()", "contents": "${1:CBaseEntity}:GetOrigin()"},
		{ "trigger": "CBaseEntity_SetAbsOrigin(vector vec)", "contents": "${1:CBaseEntity}:SetAbsOrigin(${2:vector vec})"},
		{ "trigger": "CBaseEntity_SetOrigin(vector vec)", "contents": "${1:CBaseEntity}:SetOrigin(${2:vector vec})"},
		{ "trigger": "CBaseEntity_GetForwardVector()", "contents": "${1:CBaseEntity}:GetForwardVector()"},
		{ "trigger": "CBaseEntity_GetRightVector()", "contents": "${1:CBaseEntity}:GetRightVector()"},
		{ "trigger": "CBaseEntity_GetUpVector()", "contents": "${1:CBaseEntity}:GetUpVector()"},
		{ "trigger": "CBaseEntity_SetForwardVector(vector forward)", "contents": "${1:CBaseEntity}:SetForwardVector(${2:vector forward})"},
		{ "trigger": "CBaseEntity_GetVelocity()", "contents": "${1:CBaseEntity}:GetVelocity()"},
		{ "trigger": "CBaseEntity_SetVelocity(vector velocity)", "contents": "${1:CBaseEntity}:SetVelocity(${2:vector velocity})"},
		{ "trigger": "CBaseEntity_SetAngularVelocity(float pitch,float yaw , float roll)", "contents": "${1:CBaseEntity}:SetAngularVelocity(${2:float pitch},${3:float yaw},${4:float roll})"},
		{ "trigger": "CBaseEntity_GetAngularVelocity()", "contents": "${1:CBaseEntity}:GetAngularVelocity()"},
		{ "trigger": "CBaseEntity_GetCenter()", "contents": "${1:CBaseEntity}:GetCenter()"},
		{ "trigger": "CBaseEntity_EyePosition()", "contents": "${1:CBaseEntity}:EyePosition()"},
		{ "trigger": "CBaseEntity_SetAngles(float pitch,float yaw , float roll)", "contents": "${1:CBaseEntity}:SetAngles(${2:float pitch},${3:float yaw},${4:float roll})"},
		{ "trigger": "CBaseEntity_GetAngles()", "contents": "${1:CBaseEntity}:GetAngles()"},
		{ "trigger": "CBaseEntity_SetSize(vector vec,vector vec)", "contents": "${1:CBaseEntity}:SetSize(${2:vector vec},${3:vector vec})"},
		{ "trigger": "CBaseEntity_GetBoundingMins()", "contents": "${1:CBaseEntity}:GetBoundingMins()"},
		{ "trigger": "CBaseEntity_GetBoundingMaxs()", "contents": "${1:CBaseEntity}:GetBoundingMaxs()"},
		{ "trigger": "CBaseEntity_Destroy()", "contents": "${1:CBaseEntity}:Destroy()"},
		{ "trigger": "CBaseEntity_SetOwner(Entity parent)", "contents": "${1:CBaseEntity}:SetOwner(${2:Entity parent})"},
		{ "trigger": "CBaseEntity_GetTeam()", "contents": "${1:CBaseEntity}:GetTeam()"},
		{ "trigger": "CBaseEntity_SetTeam(int team)", "contents": "${1:CBaseEntity}:SetTeam(${2:int team})"},
		{ "trigger": "CBaseEntity_GetMoveParent()", "contents": "${1:CBaseEntity}:GetMoveParent()"},
		{ "trigger": "CBaseEntity_GetRootMoveParent()", "contents": "${1:CBaseEntity}:GetRootMoveParent()"},
		{ "trigger": "CBaseEntity_FirstMoveChild()", "contents": "${1:CBaseEntity}:FirstMoveChild()"},
		{ "trigger": "CBaseEntity_NextMovePeer()", "contents": "${1:CBaseEntity}:NextMovePeer()"},
		{ "trigger": "CBaseEntity___KeyValueFromString(string key,string value)", "contents": "${1:CBaseEntity}:__KeyValueFromString(${2:string key},${3:string value})"},
		{ "trigger": "CBaseEntity___KeyValueFromFloat(string key,float value)", "contents": "${1:CBaseEntity}:__KeyValueFromFloat(${2:string key},${3:float value})"},
		{ "trigger": "CBaseEntity___KeyValueFromInt(string key,int value)", "contents": "${1:CBaseEntity}:__KeyValueFromInt(${2:string key},${3:int value})"},
		{ "trigger": "CBaseEntity___KeyValueFromVector(string key,vector value)", "contents": "${1:CBaseEntity}:__KeyValueFromVector(${2:string key},${3:vector value})"},
		{ "trigger": "CBaseEntity_Trigger()", "contents": "${1:CBaseEntity}:Trigger()"},
		{ "trigger": "CBaseEntity_ValidateScriptScope()", "contents": "${1:CBaseEntity}:ValidateScriptScope()"},
		{ "trigger": "CBaseEntity_GetScriptScope()", "contents": "${1:CBaseEntity}:GetScriptScope()"},
		{ "trigger": "CBaseEntity_GetScriptId()", "contents": "${1:CBaseEntity}:GetScriptId()"},
		{ "trigger": "CBaseEntity_GetOwner()", "contents": "${1:CBaseEntity}:GetOwner()"},
		{ "trigger": "CBaseEntity_entindex()", "contents": "${1:CBaseEntity}:entindex()"},


		{ "trigger": "Players_SetHasRepicked(int playerId)", "contents": "${1:Players}:SetHasRepicked(${2:int playerId})"},
		{ "trigger": "Players_HasRepicked(int playerId)", "contents": "${1:Players}:HasRepicked(${2:int playerId})"},
		{ "trigger": "Players_SetHasRandomed(int playerId)", "contents": "${1:Players}:SetHasRandomed(${2:int playerId})"},
		{ "trigger": "Players_HasRandomed(int playerId)", "contents": "${1:Players}:HasRandomed(${2:int playerId})"},
		{ "trigger": "Players_IsValidTeamPlayerID(int playerId)", "contents": "${1:Players}:IsValidTeamPlayerID(${2:int playerId})"},
		{ "trigger": "Players_IsValidTeamPlayer(int playerId)", "contents": "${1:Players}:IsValidTeamPlayer(${2:int playerId})"},
		{ "trigger": "Players_IsValidPlayerID(int playerId)", "contents": "${1:Players}:IsValidPlayerID(${2:int playerId})"},
		{ "trigger": "Players_IsValidPlayer(int playerId)", "contents": "${1:Players}:IsValidPlayer(${2:int playerId})"},
		{ "trigger": "Players_GetLevel(int playerId)", "contents": "${1:Players}:GetLevel(${2:int playerId})"},
		{ "trigger": "Players_IncrementKills(int playerId,int kills)", "contents": "${1:Players}:IncrementKills(${2:int playerId},${3:int kills})"},
		{ "trigger": "Players_IncrementAssists(int playerId)", "contents": "${1:Players}:IncrementAssists(${2:int playerId})"},
		{ "trigger": "Players_IncrementDeaths(int playerId)", "contents": "${1:Players}:IncrementDeaths(${2:int playerId})"},
		{ "trigger": "Players_GetKills(int playerId)", "contents": "${1:Players}:GetKills(${2:int playerId})"},
		{ "trigger": "Players_GetAssists(int playerId)", "contents": "${1:Players}:GetAssists(${2:int playerId})"},
		{ "trigger": "Players_GetDeaths(int playerId)", "contents": "${1:Players}:GetDeaths(${2:int playerId})"},
		{ "trigger": "Players_GetStuns(int playerId)", "contents": "${1:Players}:GetStuns(${2:int playerId})"},
		{ "trigger": "Players_GetHealing(int playerId)", "contents": "${1:Players}:GetHealing(${2:int playerId})"},
		{ "trigger": "Players_GetTowerKills(int playerId)", "contents": "${1:Players}:GetTowerKills(${2:int playerId})"},
		{ "trigger": "Players_GetRoshanKills(int playerId)", "contents": "${1:Players}:GetRoshanKills(${2:int playerId})"},
		{ "trigger": "Players_GetTeamKills(int playerId)", "contents": "${1:Players}:GetTeamKills(${2:int playerId})"},
		{ "trigger": "Players_IncrementStreak(int playerId)", "contents": "${1:Players}:IncrementStreak(${2:int playerId})"},
		{ "trigger": "Players_ClearStreak(int playerId)", "contents": "${1:Players}:ClearStreak(${2:int playerId})"},
		{ "trigger": "Players_GetStreak(int playerId)", "contents": "${1:Players}:GetStreak(${2:int playerId})"},
		{ "trigger": "Players_ModifyGold(int playerId,int goldAmt , bool reliable , int unknown)", "contents": "${1:Players}:ModifyGold(${2:int playerId},${3:int goldAmt},${4:bool reliable},${5:int unknown})"},
		{ "trigger": "Players_SetGold(int playerId,int goldAmt , bool reliable)", "contents": "${1:Players}:SetGold(${2:int playerId},${3:int goldAmt},${4:bool reliable})"},
		{ "trigger": "Players_SpendGold(int playerId,int amt , int unknown)", "contents": "${1:Players}:SpendGold(${2:int playerId},${3:int amt},${4:int unknown})"},
		{ "trigger": "Players_GetGold(int playerId)", "contents": "${1:Players}:GetGold(${2:int playerId})"},
		{ "trigger": "Players_GetReliableGold(int playerId)", "contents": "${1:Players}:GetReliableGold(${2:int playerId})"},
		{ "trigger": "Players_GetUnreliableGold(int playerId)", "contents": "${1:Players}:GetUnreliableGold(${2:int playerId})"},
		{ "trigger": "Players_ResetTotalEarnedGold(int playerId)", "contents": "${1:Players}:ResetTotalEarnedGold(${2:int playerId})"},
		{ "trigger": "Players_GetTotalEarnedGold(int playerId)", "contents": "${1:Players}:GetTotalEarnedGold(${2:int playerId})"},
		{ "trigger": "Players_GetTotalGoldSpent(int playerId)", "contents": "${1:Players}:GetTotalGoldSpent(${2:int playerId})"},
		{ "trigger": "Players_AddGoldSpentOnSupport(int unknown,int unknown)", "contents": "${1:Players}:AddGoldSpentOnSupport(${2:int unknown},${3:int unknown})"},
		{ "trigger": "Players_GetGoldSpentOnSupport(int playerId)", "contents": "${1:Players}:GetGoldSpentOnSupport(${2:int playerId})"},
		{ "trigger": "Players_GetGoldSpentOnConsumables(int playerId)", "contents": "${1:Players}:GetGoldSpentOnConsumables(${2:int playerId})"},
		{ "trigger": "Players_GetGoldSpentOnItems(int playerId)", "contents": "${1:Players}:GetGoldSpentOnItems(${2:int playerId})"},
		{ "trigger": "Players_GetGoldLostToDeath(int playerId)", "contents": "${1:Players}:GetGoldLostToDeath(${2:int playerId})"},
		{ "trigger": "Players_GetGoldSpentOnBuybacks(int playerId)", "contents": "${1:Players}:GetGoldSpentOnBuybacks(${2:int playerId})"},
		{ "trigger": "Players_GetGoldPerMin(int playerId)", "contents": "${1:Players}:GetGoldPerMin(${2:int playerId})"},
		{ "trigger": "Players_GetXPPerMin(int playerId)", "contents": "${1:Players}:GetXPPerMin(${2:int playerId})"},
		{ "trigger": "Players_GetAegisPickups(int playerId)", "contents": "${1:Players}:GetAegisPickups(${2:int playerId})"},
		{ "trigger": "Players_AddAegisPickup(int playerId)", "contents": "${1:Players}:AddAegisPickup(${2:int playerId})"},
		{ "trigger": "Players_GetRunePickups(int playerId)", "contents": "${1:Players}:GetRunePickups(${2:int playerId})"},
		{ "trigger": "Players_AddRunePickup(int playerId)", "contents": "${1:Players}:AddRunePickup(${2:int playerId})"},
		{ "trigger": "Players_GetNumConsumablesPurchased(int playerId)", "contents": "${1:Players}:GetNumConsumablesPurchased(${2:int playerId})"},
		{ "trigger": "Players_GetNumItemsPurchased(int playerId)", "contents": "${1:Players}:GetNumItemsPurchased(${2:int playerId})"},
		{ "trigger": "Players_GetTimeOfLastItemPurchase(int playerId)", "contents": "${1:Players}:GetTimeOfLastItemPurchase(${2:int playerId})"},
		{ "trigger": "Players_GetTimeOfLastConsumablePurchase(int playerId)", "contents": "${1:Players}:GetTimeOfLastConsumablePurchase(${2:int playerId})"},
		{ "trigger": "Players_GetTimeOfLastDeath(int playerId)", "contents": "${1:Players}:GetTimeOfLastDeath(${2:int playerId})"},
		{ "trigger": "Players_GetRespawnSeconds(int playerId)", "contents": "${1:Players}:GetRespawnSeconds(${2:int playerId})"},
		{ "trigger": "Players_IncrementTotalEarnedXP(int playerId,int amt)", "contents": "${1:Players}:IncrementTotalEarnedXP(${2:int playerId},${3:int amt})"},
		{ "trigger": "Players_GetTotalEarnedXP(int playerId)", "contents": "${1:Players}:GetTotalEarnedXP(${2:int playerId})"},
		{ "trigger": "Players_AddClaimedFarm(int playerId,float farm)", "contents": "${1:Players}:AddClaimedFarm(${2:int playerId},${3:float farm})"},
		{ "trigger": "Players_GetClaimedFarm(int playerId)", "contents": "${1:Players}:GetClaimedFarm(${2:int playerId})"},
		{ "trigger": "Players_GetRawPlayerDamage(int playerId)", "contents": "${1:Players}:GetRawPlayerDamage(${2:int playerId})"},
		{ "trigger": "Players_ClearRawPlayerDamageMatrix(int playerId)", "contents": "${1:Players}:ClearRawPlayerDamageMatrix(${2:int playerId})"},
		{ "trigger": "Players_ClearKillsMatrix(int playerId)", "contents": "${1:Players}:ClearKillsMatrix(${2:int playerId})"},
		{ "trigger": "Players_GetTowerDamageTaken(int playerId)", "contents": "${1:Players}:GetTowerDamageTaken(${2:int playerId})"},
		{ "trigger": "Players_GetCreepDamageTaken(int playerId)", "contents": "${1:Players}:GetCreepDamageTaken(${2:int playerId})"},
		{ "trigger": "Players_GetHeroDamageTaken(int playerId)", "contents": "${1:Players}:GetHeroDamageTaken(${2:int playerId})"},
		{ "trigger": "Players_GetDamageDoneToHero(int playerId,int heroId)", "contents": "${1:Players}:GetDamageDoneToHero(${2:int playerId},${3:int heroId})"},
		{ "trigger": "Players_GetKillsDoneToHero(int playerId,int heroId)", "contents": "${1:Players}:GetKillsDoneToHero(${2:int playerId},${3:int heroId})"},
		{ "trigger": "Players_GetSelectedHeroName(int playerId)", "contents": "${1:Players}:GetSelectedHeroName(${2:int playerId})"},
		{ "trigger": "Players_GetSelectedHeroID(int playerId)", "contents": "${1:Players}:GetSelectedHeroID(${2:int playerId})"},
		{ "trigger": "Players_IsHeroSelected(string heroName)", "contents": "${1:Players}:IsHeroSelected(${2:string heroName})"},
		{ "trigger": "Players_WhoSelectedHero(string heroName)", "contents": "${1:Players}:WhoSelectedHero(${2:string heroName})"},
		{ "trigger": "Players_GetSelectedHeroEntity(int playerId)", "contents": "${1:Players}:GetSelectedHeroEntity(${2:int playerId})"},
		{ "trigger": "Players_HasSelectedHero(int playerId)", "contents": "${1:Players}:HasSelectedHero(${2:int playerId})"},
		{ "trigger": "Players_GetPlayer(int playerId)", "contents": "${1:Players}:GetPlayer(${2:int playerId})"},
		{ "trigger": "Players_GetNthPlayerIDOnTeam(int index,int team)", "contents": "${1:Players}:GetNthPlayerIDOnTeam(${2:int index},${3:int team})"},
		{ "trigger": "Players_IncrementLastHits(int playerId)", "contents": "${1:Players}:IncrementLastHits(${2:int playerId})"},
		{ "trigger": "Players_GetLastHits(int playerId)", "contents": "${1:Players}:GetLastHits(${2:int playerId})"},
		{ "trigger": "Players_IncrementGoldBagsCollected(int playerId)", "contents": "${1:Players}:IncrementGoldBagsCollected(${2:int playerId})"},
		{ "trigger": "Players_GetGoldBagsCollected(int playerId)", "contents": "${1:Players}:GetGoldBagsCollected(${2:int playerId})"},
		{ "trigger": "Players_IncrementLastHitStreak(int playerId)", "contents": "${1:Players}:IncrementLastHitStreak(${2:int playerId})"},
		{ "trigger": "Players_ClearLastHitStreak(int playerId)", "contents": "${1:Players}:ClearLastHitStreak(${2:int playerId})"},
		{ "trigger": "Players_GetLastHitStreak(int playerId)", "contents": "${1:Players}:GetLastHitStreak(${2:int playerId})"},
		{ "trigger": "Players_IncrementLastHitMultikill(int playerId)", "contents": "${1:Players}:IncrementLastHitMultikill(${2:int playerId})"},
		{ "trigger": "Players_ClearLastHitMultikill(int playerId)", "contents": "${1:Players}:ClearLastHitMultikill(${2:int playerId})"},
		{ "trigger": "Players_GetLastHitMultikill(int playerId)", "contents": "${1:Players}:GetLastHitMultikill(${2:int playerId})"},
		{ "trigger": "Players_IncrementNearbyCreepDeaths(int playerId)", "contents": "${1:Players}:IncrementNearbyCreepDeaths(${2:int playerId})"},
		{ "trigger": "Players_GetNearbyCreepDeaths(int playerId)", "contents": "${1:Players}:GetNearbyCreepDeaths(${2:int playerId})"},
		{ "trigger": "Players_IncrementDenies(int playerId)", "contents": "${1:Players}:IncrementDenies(${2:int playerId})"},
		{ "trigger": "Players_GetDenies(int playerId)", "contents": "${1:Players}:GetDenies(${2:int playerId})"},
		{ "trigger": "Players_IncrementClaimedMisses(int playerId)", "contents": "${1:Players}:IncrementClaimedMisses(${2:int playerId})"},
		{ "trigger": "Players_GetClaimedMisses(int playerId)", "contents": "${1:Players}:GetClaimedMisses(${2:int playerId})"},
		{ "trigger": "Players_IncrementClaimedDenies(int playerId)", "contents": "${1:Players}:IncrementClaimedDenies(${2:int playerId})"},
		{ "trigger": "Players_GetClaimedDenies(int playerId)", "contents": "${1:Players}:GetClaimedDenies(${2:int playerId})"},
		{ "trigger": "Players_IncrementMisses(int playerId)", "contents": "${1:Players}:IncrementMisses(${2:int playerId})"},
		{ "trigger": "Players_GetMisses(int playerId)", "contents": "${1:Players}:GetMisses(${2:int playerId})"},
		{ "trigger": "Players_UpdateTeamSlot(int playerId,int slot)", "contents": "${1:Players}:UpdateTeamSlot(${2:int playerId},${3:int slot})"},
		{ "trigger": "Players_GetTeam(int playerId)", "contents": "${1:Players}:GetTeam(${2:int playerId})"},
		{ "trigger": "Players_IsBroadcaster(int playerId)", "contents": "${1:Players}:IsBroadcaster(${2:int playerId})"},
		{ "trigger": "Players_GetBroadcasterChannel(int playerId)", "contents": "${1:Players}:GetBroadcasterChannel(${2:int playerId})"},
		{ "trigger": "Players_GetBroadcasterChannelSlot(int playerId)", "contents": "${1:Players}:GetBroadcasterChannelSlot(${2:int playerId})"},
		{ "trigger": "Players_GetSteamAccountID(int playerId)", "contents": "${1:Players}:GetSteamAccountID(${2:int playerId})"},
		{ "trigger": "Players_IsFakeClient(int playerId)", "contents": "${1:Players}:IsFakeClient(${2:int playerId})"},
		{ "trigger": "Players_HaveAllPlayersJoined()", "contents": "${1:Players}:HaveAllPlayersJoined()"},
		{ "trigger": "Players_GetPlayerLoadedCompletely(int playerId)", "contents": "${1:Players}:GetPlayerLoadedCompletely(${2:int playerId})"},
		{ "trigger": "Players_SetPlayerReservedState(int playerId,bool reserved)", "contents": "${1:Players}:SetPlayerReservedState(${2:int playerId},${3:bool reserved})"},
		{ "trigger": "Players_GetPlayerReservedState(int playerId)", "contents": "${1:Players}:GetPlayerReservedState(${2:int playerId})"},
		{ "trigger": "Players_GetConnectionState(int playerId)", "contents": "${1:Players}:GetConnectionState(${2:int playerId})"},
		{ "trigger": "Players_HeroLevelUp(int playerId)", "contents": "${1:Players}:HeroLevelUp(${2:int playerId})"},
		{ "trigger": "Players_SetLastBuybackTime(int playerId,int time)", "contents": "${1:Players}:SetLastBuybackTime(${2:int playerId},${3:int time})"},
		{ "trigger": "Players_GetPlayerName(int playerId)", "contents": "${1:Players}:GetPlayerName(${2:int playerId})"},
		{ "trigger": "Players_GetUnitShareMaskForPlayer(int playerId,int otherPlayerId)", "contents": "${1:Players}:GetUnitShareMaskForPlayer(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "Players_IsHeroSharedWithPlayerID(int playerId,int otherPlayerId)", "contents": "${1:Players}:IsHeroSharedWithPlayerID(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "Players_AreUnitsSharedWithPlayerID(int playerId,int otherPlayerId)", "contents": "${1:Players}:AreUnitsSharedWithPlayerID(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "Players_IsDisableHelpSetForPlayerID(int playerId,int otherPlayerId)", "contents": "${1:Players}:IsDisableHelpSetForPlayerID(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "Players_SetUnitShareMaskForPlayer(int unKnown,int unKnown , int unKnown , bool unKnown)", "contents": "${1:Players}:SetUnitShareMaskForPlayer(${2:int unKnown},${3:int unKnown},${4:int unKnown},${5:bool unKnown})"},
		{ "trigger": "Players_GetNumCouriersForTeam(int team)", "contents": "${1:Players}:GetNumCouriersForTeam(${2:int team})"},
		{ "trigger": "Players_GetNthCourierForTeam(int index,int team)", "contents": "${1:Players}:GetNthCourierForTeam(${2:int index},${3:int team})"},
		{ "trigger": "Players_SetBuybackCooldownTime(int playerId,float cooldown)", "contents": "${1:Players}:SetBuybackCooldownTime(${2:int playerId},${3:float cooldown})"},
		{ "trigger": "Players_SetBuybackGoldLimitTime(int playerId,float buybackGold)", "contents": "${1:Players}:SetBuybackGoldLimitTime(${2:int playerId},${3:float buybackGold})"},
		{ "trigger": "Players_ResetBuybackCostTime(int playerId)", "contents": "${1:Players}:ResetBuybackCostTime(${2:int playerId})"},
		{ "trigger": "Players_ReplaceHeroWith(int playerId,string heroName , int gold , int exp)", "contents": "${1:Players}:ReplaceHeroWith(${2:int playerId},${3:string heroName},${4:int gold},${5:int exp})"},
		{ "trigger": "Players_SetCustomBuybackCost(int playerId,int cost)", "contents": "${1:Players}:SetCustomBuybackCost(${2:int playerId},${3:int cost})"},
		{ "trigger": "Players_SetCustomBuybackCooldown(int playerId,float cooldown)", "contents": "${1:Players}:SetCustomBuybackCooldown(${2:int playerId},${3:float cooldown})"},
		{ "trigger": "Players_GetCustomBuybackCost(int playerId)", "contents": "${1:Players}:GetCustomBuybackCost(${2:int playerId})"},
		{ "trigger": "Players_GetCustomBuybackCooldown(int playerId)", "contents": "${1:Players}:GetCustomBuybackCooldown(${2:int playerId})"},
		{ "trigger": "Players_SetCameraTarget(int playerId,hscript target)", "contents": "${1:Players}:SetCameraTarget(${2:int playerId},${3:hscript target})"},
		{ "trigger": "Players_GetEventPointsForPlayerID(int playerId)", "contents": "${1:Players}:GetEventPointsForPlayerID(${2:int playerId})"},
		{ "trigger": "Players_GetEventPremiumPointsGranted(int playerId)", "contents": "${1:Players}:GetEventPremiumPointsGranted(${2:int playerId})"},
		{ "trigger": "Players_GetEventRankGranted(int playerId)", "contents": "${1:Players}:GetEventRankGranted(${2:int playerId})"},


		{ "trigger": "ProjectileManager_CreateTrackingProjectile(hscript projectile)", "contents": "${1:ProjectileManager}:CreateTrackingProjectile(${2:hscript projectile})"},
		{ "trigger": "ProjectileManager_CreateLinearProjectile(hscript projectile)", "contents": "${1:ProjectileManager}:CreateLinearProjectile(${2:hscript projectile})"},
		{ "trigger": "ProjectileManager_DestroyLinearProjectile(int projectile)", "contents": "${1:ProjectileManager}:DestroyLinearProjectile(${2:int projectile})"},
		{ "trigger": "ProjectileManager_ProjectileDodge(hscript projectile)", "contents": "${1:ProjectileManager}:ProjectileDodge(${2:hscript projectile})"},


		{ "trigger": "CDOTABaseGameMode_BeginThink(string thinkName,function func , float intervalInSeconds)", "contents": "${1:CDOTABaseGameMode}:BeginThink(${2:string thinkName},${3:function func},${4:float intervalInSeconds})"},
		{ "trigger": "CDOTABaseGameMode_EndThink(string thinkName)", "contents": "${1:CDOTABaseGameMode}:EndThink(${2:string thinkName})"},
		{ "trigger": "CDOTABaseGameMode_SetAlwaysShowPlayerInventory(bool alwaysShow)", "contents": "${1:CDOTABaseGameMode}:SetAlwaysShowPlayerInventory(${2:bool alwaysShow})"},
		{ "trigger": "CDOTABaseGameMode_SetGoldSoundDisabled(bool playSound)", "contents": "${1:CDOTABaseGameMode}:SetGoldSoundDisabled(${2:bool playSound})"},
		{ "trigger": "CDOTABaseGameMode_SetRecommendedItemsDisabled(bool disableRecItems)", "contents": "${1:CDOTABaseGameMode}:SetRecommendedItemsDisabled(${2:bool disableRecItems})"},
		{ "trigger": "CDOTABaseGameMode_SetCameraDistanceOverride(float cameraDistance)", "contents": "${1:CDOTABaseGameMode}:SetCameraDistanceOverride(${2:float cameraDistance})"},
		{ "trigger": "CDOTABaseGameMode_SetOverrideSelectionEntity(Unit unit)", "contents": "${1:CDOTABaseGameMode}:SetOverrideSelectionEntity(${2:Unit unit})"},
		{ "trigger": "CDOTABaseGameMode_SetRemoveIllusionsOnDeath(bool removeIllusions)", "contents": "${1:CDOTABaseGameMode}:SetRemoveIllusionsOnDeath(${2:bool removeIllusions})"},
		{ "trigger": "CDOTABaseGameMode_ClientLoadGridNav()", "contents": "${1:CDOTABaseGameMode}:ClientLoadGridNav()"},
		{ "trigger": "CDOTABaseGameMode_SetFogOfWarDisabled(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetFogOfWarDisabled(${2:bool enabled})"},
		{ "trigger": "CDOTABaseGameMode_SetCustomBuybackCostEnabled(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetCustomBuybackCostEnabled(${2:bool enabled})"},
		{ "trigger": "CDOTABaseGameMode_SetCustomBuybackCooldownEnabled(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetCustomBuybackCooldownEnabled(${2:bool enabled})"},
		{ "trigger": "CDOTABaseGameMode_SetTopBarTeamValuesOverride(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetTopBarTeamValuesOverride(${2:bool enabled})"},
		{ "trigger": "CDOTABaseGameMode_SetTopBarTeamValuesVisible(bool visible)", "contents": "${1:CDOTABaseGameMode}:SetTopBarTeamValuesVisible(${2:bool visible})"},
		{ "trigger": "CDOTABaseGameMode_SetTopBarTeamValue(int team,int value)", "contents": "${1:CDOTABaseGameMode}:SetTopBarTeamValue(${2:int team},${3:int value})"},


		{ "trigger": "CBaseAnimating_LookupAttachment(string attachmentName)", "contents": "${1:CBaseAnimating}:LookupAttachment(${2:string attachmentName})"},
		{ "trigger": "CBaseAnimating_GetAttachmentOrigin(int attachmentId)", "contents": "${1:CBaseAnimating}:GetAttachmentOrigin(${2:int attachmentId})"},
		{ "trigger": "CBaseAnimating_GetAttachmentAngles(int attachmentId)", "contents": "${1:CBaseAnimating}:GetAttachmentAngles(${2:int attachmentId})"},
		{ "trigger": "CBaseAnimating_IsSequenceFinished()", "contents": "${1:CBaseAnimating}:IsSequenceFinished()"},
		{ "trigger": "CBaseAnimating_SetBodygroup(int unKnown,int unKnown)", "contents": "${1:CBaseAnimating}:SetBodygroup(${2:int unKnown},${3:int unKnown})"},
		{ "trigger": "CBaseAnimating_SetModelScale(float scale,float fadeTimeSeconds)", "contents": "${1:CBaseAnimating}:SetModelScale(${2:float scale},${3:float fadeTimeSeconds})"},
		{ "trigger": "CBaseAnimating_GetModelScale()", "contents": "${1:CBaseAnimating}:GetModelScale()"},



		{ "trigger": "CBaseFlex_GetCurrentScene()", "contents": "${1:CBaseFlex}:GetCurrentScene()"},
		{ "trigger": "CBaseFlex_GetSceneByIndex(int index)", "contents": "${1:CBaseFlex}:GetSceneByIndex(${2:int index})"},



		{ "trigger": "CDOTA_BaseNPC_IsAncient()", "contents": "${1:CDOTA_BaseNPC}:IsAncient()"},
		{ "trigger": "CDOTA_BaseNPC_IsNeutralUnitType()", "contents": "${1:CDOTA_BaseNPC}:IsNeutralUnitType()"},
		{ "trigger": "CDOTA_BaseNPC_IsSummoned()", "contents": "${1:CDOTA_BaseNPC}:IsSummoned()"},
		{ "trigger": "CDOTA_BaseNPC_IsCreature()", "contents": "${1:CDOTA_BaseNPC}:IsCreature()"},
		{ "trigger": "CDOTA_BaseNPC_IsHero()", "contents": "${1:CDOTA_BaseNPC}:IsHero()"},
		{ "trigger": "CDOTA_BaseNPC_IsRealHero()", "contents": "${1:CDOTA_BaseNPC}:IsRealHero()"},
		{ "trigger": "CDOTA_BaseNPC_IsTower()", "contents": "${1:CDOTA_BaseNPC}:IsTower()"},
		{ "trigger": "CDOTA_BaseNPC_IsAlive()", "contents": "${1:CDOTA_BaseNPC}:IsAlive()"},
		{ "trigger": "CDOTA_BaseNPC_IsMechanical()", "contents": "${1:CDOTA_BaseNPC}:IsMechanical()"},
		{ "trigger": "CDOTA_BaseNPC_IsPhantom()", "contents": "${1:CDOTA_BaseNPC}:IsPhantom()"},
		{ "trigger": "CDOTA_BaseNPC_SetInitialGoalEntity(Entity goalEntity)", "contents": "${1:CDOTA_BaseNPC}:SetInitialGoalEntity(${2:Entity goalEntity})"},
		{ "trigger": "CDOTA_BaseNPC_GetInitialGoalEntity()", "contents": "${1:CDOTA_BaseNPC}:GetInitialGoalEntity()"},
		{ "trigger": "CDOTA_BaseNPC_SetMustReachEachGoalEntity(bool mustReach)", "contents": "${1:CDOTA_BaseNPC}:SetMustReachEachGoalEntity(${2:bool mustReach})"},
		{ "trigger": "CDOTA_BaseNPC_GetMustReachEachGoalEntity()", "contents": "${1:CDOTA_BaseNPC}:GetMustReachEachGoalEntity()"},
		{ "trigger": "CDOTA_BaseNPC_AddNewModifier(Unit caster,Ability optionalSrcAbility , string modifierName , table modifierData)", "contents": "${1:CDOTA_BaseNPC}:AddNewModifier(${2:Unit caster},${3:Ability optionalSrcAbility},${4:string modifierName},${5:table modifierData})"},
		{ "trigger": "CDOTA_BaseNPC_HasModifier(string modifierName)", "contents": "${1:CDOTA_BaseNPC}:HasModifier(${2:string modifierName})"},
		{ "trigger": "CDOTA_BaseNPC_RemoveModifierByName(string modifierName)", "contents": "${1:CDOTA_BaseNPC}:RemoveModifierByName(${2:string modifierName})"},
		{ "trigger": "CDOTA_BaseNPC_RemoveModifierByNameAndCaster(string name,Unit caster)", "contents": "${1:CDOTA_BaseNPC}:RemoveModifierByNameAndCaster(${2:string name},${3:Unit caster})"},
		{ "trigger": "CDOTA_BaseNPC_AddItem(Item itemName)", "contents": "${1:CDOTA_BaseNPC}:AddItem(${2:Item itemName})"},
		{ "trigger": "CDOTA_BaseNPC_AddAbility(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:AddAbility(${2:string abilityName})"},
		{ "trigger": "CDOTA_BaseNPC_RemoveAbility(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:RemoveAbility(${2:string abilityName})"},
		{ "trigger": "CDOTA_BaseNPC_HasAbility(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:HasAbility(${2:string abilityName})"},
		{ "trigger": "CDOTA_BaseNPC_HasItemInInventory(string itemName)", "contents": "${1:CDOTA_BaseNPC}:HasItemInInventory(${2:string itemName})"},
		{ "trigger": "CDOTA_BaseNPC_FindAbilityByName(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:FindAbilityByName(${2:string abilityName})"},
		{ "trigger": "CDOTA_BaseNPC_GetGoldBounty()", "contents": "${1:CDOTA_BaseNPC}:GetGoldBounty()"},
		{ "trigger": "CDOTA_BaseNPC_SetDeathXP(int xpBounty)", "contents": "${1:CDOTA_BaseNPC}:SetDeathXP(${2:int xpBounty})"},
		{ "trigger": "CDOTA_BaseNPC_GetDeathXP()", "contents": "${1:CDOTA_BaseNPC}:GetDeathXP()"},
		{ "trigger": "CDOTA_BaseNPC_GetUnitName()", "contents": "${1:CDOTA_BaseNPC}:GetUnitName()"},
		{ "trigger": "CDOTA_BaseNPC_GetTeamNumber()", "contents": "${1:CDOTA_BaseNPC}:GetTeamNumber()"},
		{ "trigger": "CDOTA_BaseNPC_GetPlayerOwner()", "contents": "${1:CDOTA_BaseNPC}:GetPlayerOwner()"},
		{ "trigger": "CDOTA_BaseNPC_SetMaximumGoldBounty(int goldBounty)", "contents": "${1:CDOTA_BaseNPC}:SetMaximumGoldBounty(${2:int goldBounty})"},
		{ "trigger": "CDOTA_BaseNPC_SetMinimumGoldBounty(int goldBounty)", "contents": "${1:CDOTA_BaseNPC}:SetMinimumGoldBounty(${2:int goldBounty})"},
		{ "trigger": "CDOTA_BaseNPC_GetTotalPurchasedUpgradeGoldCost()", "contents": "${1:CDOTA_BaseNPC}:GetTotalPurchasedUpgradeGoldCost()"},
		{ "trigger": "CDOTA_BaseNPC_ForceKill(bool playAegisLines)", "contents": "${1:CDOTA_BaseNPC}:ForceKill(${2:bool playAegisLines})"},
		{ "trigger": "CDOTA_BaseNPC_GetBaseDamageMin()", "contents": "${1:CDOTA_BaseNPC}:GetBaseDamageMin()"},
		{ "trigger": "CDOTA_BaseNPC_GetBaseDamageMax()", "contents": "${1:CDOTA_BaseNPC}:GetBaseDamageMax()"},
		{ "trigger": "CDOTA_BaseNPC_Heal(int amount,Unit source)", "contents": "${1:CDOTA_BaseNPC}:Heal(${2:int amount},${3:Unit source})"},
		{ "trigger": "CDOTA_BaseNPC_GetMaxHealth()", "contents": "${1:CDOTA_BaseNPC}:GetMaxHealth()"},
		{ "trigger": "CDOTA_BaseNPC_GetHealthPercent()", "contents": "${1:CDOTA_BaseNPC}:GetHealthPercent()"},
		{ "trigger": "CDOTA_BaseNPC_SetMana(float mana)", "contents": "${1:CDOTA_BaseNPC}:SetMana(${2:float mana})"},
		{ "trigger": "CDOTA_BaseNPC_GetMaxMana()", "contents": "${1:CDOTA_BaseNPC}:GetMaxMana()"},
		{ "trigger": "CDOTA_BaseNPC_RespawnUnit()", "contents": "${1:CDOTA_BaseNPC}:RespawnUnit()"},
		{ "trigger": "CDOTA_BaseNPC_GetLevel()", "contents": "${1:CDOTA_BaseNPC}:GetLevel()"},
		{ "trigger": "CDOTA_BaseNPC_GetItemInSlot(int slotId)", "contents": "${1:CDOTA_BaseNPC}:GetItemInSlot(${2:int slotId})"},
		{ "trigger": "CDOTA_BaseNPC_SetOriginalModel(string originalModel)", "contents": "${1:CDOTA_BaseNPC}:SetOriginalModel(${2:string originalModel})"},
		{ "trigger": "CDOTA_BaseNPC_AddNoDraw()", "contents": "${1:CDOTA_BaseNPC}:AddNoDraw()"},
		{ "trigger": "CDOTA_BaseNPC_RemoveNoDraw()", "contents": "${1:CDOTA_BaseNPC}:RemoveNoDraw()"},
		{ "trigger": "CDOTA_BaseNPC_GetPlayerOwnerID()", "contents": "${1:CDOTA_BaseNPC}:GetPlayerOwnerID()"},
		{ "trigger": "CDOTA_BaseNPC_IsRangedAttacker()", "contents": "${1:CDOTA_BaseNPC}:IsRangedAttacker()"},
		{ "trigger": "CDOTA_BaseNPC_GetCurrentActiveAbility()", "contents": "${1:CDOTA_BaseNPC}:GetCurrentActiveAbility()"},
		{ "trigger": "CDOTA_BaseNPC_MoveToPosition(vector position)", "contents": "${1:CDOTA_BaseNPC}:MoveToPosition(${2:vector position})"},
		{ "trigger": "CDOTA_BaseNPC_MoveToPositionAggressive(vector position)", "contents": "${1:CDOTA_BaseNPC}:MoveToPositionAggressive(${2:vector position})"},
		{ "trigger": "CDOTA_BaseNPC_MoveToNPC(hscript target)", "contents": "${1:CDOTA_BaseNPC}:MoveToNPC(${2:hscript target})"},
		{ "trigger": "CDOTA_BaseNPC_MoveToTargetToAttack(hscript target)", "contents": "${1:CDOTA_BaseNPC}:MoveToTargetToAttack(${2:hscript target})"},
		{ "trigger": "CDOTA_BaseNPC_Hold()", "contents": "${1:CDOTA_BaseNPC}:Hold()"},
		{ "trigger": "CDOTA_BaseNPC_Stop()", "contents": "${1:CDOTA_BaseNPC}:Stop()"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityToggle(hscript ability,int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityToggle(${2:hscript ability},${3:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityImmediately(hscript int,int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityImmediately(${2:hscript int},${3:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityOnPosition(vector vector,hscript ability , int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityOnPosition(${2:vector vector},${3:hscript ability},${4:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityOnTarget(Unit target,Ability ability , int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityOnTarget(${2:Unit target},${3:Ability ability},${4:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_CastAbilityNoTarget(Ability ability,int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityNoTarget(${2:Ability ability},${3:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_DropItemAtPosition(vector vector,hscript item)", "contents": "${1:CDOTA_BaseNPC}:DropItemAtPosition(${2:vector vector},${3:hscript item})"},
		{ "trigger": "CDOTA_BaseNPC_MoveToNPCToGiveItem(hscript target,hscript item)", "contents": "${1:CDOTA_BaseNPC}:MoveToNPCToGiveItem(${2:hscript target},${3:hscript item})"},
		{ "trigger": "CDOTA_BaseNPC_PickupDroppedItem(hscript item)", "contents": "${1:CDOTA_BaseNPC}:PickupDroppedItem(${2:hscript item})"},
		{ "trigger": "CDOTA_BaseNPC_PickupRune(hscript rune)", "contents": "${1:CDOTA_BaseNPC}:PickupRune(${2:hscript rune})"},
		{ "trigger": "CDOTA_BaseNPC_DropItemAtPositionImmediate(hscript item,vector position)", "contents": "${1:CDOTA_BaseNPC}:DropItemAtPositionImmediate(${2:hscript item},${3:vector position})"},
		{ "trigger": "CDOTA_BaseNPC_SetAdditionalBattleMusicWeight(float weight)", "contents": "${1:CDOTA_BaseNPC}:SetAdditionalBattleMusicWeight(${2:float weight})"},
		{ "trigger": "CDOTA_BaseNPC_GetAdditionalBattleMusicWeight()", "contents": "${1:CDOTA_BaseNPC}:GetAdditionalBattleMusicWeight()"},


		{ "trigger": "CDOTA_BaseNPC_Building_GetInvulnCount()", "contents": "${1:CDOTA_BaseNPC_Building}:GetInvulnCount()"},
		{ "trigger": "CDOTA_BaseNPC_Building_SetInvulnCount(int count)", "contents": "${1:CDOTA_BaseNPC_Building}:SetInvulnCount(${2:int count})"},



		{ "trigger": "CDOTA_BaseNPC_Creature_CreatureLevelUp(int numLevels)", "contents": "${1:CDOTA_BaseNPC_Creature}:CreatureLevelUp(${2:int numLevels})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_AddItemDrop(PhysicalItem item)", "contents": "${1:CDOTA_BaseNPC_Creature}:AddItemDrop(${2:PhysicalItem item})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetChampion(bool champion)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetChampion(${2:bool champion})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_IsChampion()", "contents": "${1:CDOTA_BaseNPC_Creature}:IsChampion()"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetHPGain(int hpPerLevel)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetHPGain(${2:int hpPerLevel})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetManaGain(int manaPerLevel)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetManaGain(${2:int manaPerLevel})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetHPRegenGain(float regenPerLevel)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetHPRegenGain(${2:float regenPerLevel})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetManaRegenGain(float manaRegenGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetManaRegenGain(${2:float manaRegenGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetDamageGain(int damageGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetDamageGain(${2:int damageGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetArmorGain(float armorGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetArmorGain(${2:float armorGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetMagicResistanceGain(float magicResistGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetMagicResistanceGain(${2:float magicResistGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetDisableResistanceGain(float disableResist)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetDisableResistanceGain(${2:float disableResist})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetAttackTimeGain(float attackSpeedGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetAttackTimeGain(${2:float attackSpeedGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetMoveSpeedGain(int moveSpeedGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetMoveSpeedGain(${2:int moveSpeedGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetBountyGain(int bountyGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetBountyGain(${2:int bountyGain})"},
		{ "trigger": "CDOTA_BaseNPC_Creature_SetXPGain(int xpGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetXPGain(${2:int xpGain})"},


		{ "trigger": "CDOTA_Unit_Nian_IsHornAlive()", "contents": "${1:CDOTA_Unit_Nian}:IsHornAlive()"},
		{ "trigger": "CDOTA_Unit_Nian_IsTailAlive()", "contents": "${1:CDOTA_Unit_Nian}:IsTailAlive()"},
		{ "trigger": "CDOTA_Unit_Nian_GetHorn()", "contents": "${1:CDOTA_Unit_Nian}:GetHorn()"},
		{ "trigger": "CDOTA_Unit_Nian_GetTail()", "contents": "${1:CDOTA_Unit_Nian}:GetTail()"},


		{ "trigger": "CDOTA_BaseNPC_Hero_ModifyGold(int goldAmmount,bool reliable , int unKnown)", "contents": "${1:CDOTA_BaseNPC_Hero}:ModifyGold(${2:int goldAmmount},${3:bool reliable},${4:int unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_GetGold()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetGold()"},
		{ "trigger": "CDOTA_BaseNPC_Hero_SetGold(int goldAmmount,bool reliable)", "contents": "${1:CDOTA_BaseNPC_Hero}:SetGold(${2:int goldAmmount},${3:bool reliable})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_GetCurrentXP()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetCurrentXP()"},
		{ "trigger": "CDOTA_BaseNPC_Hero_GetPlayerID()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetPlayerID()"},
		{ "trigger": "CDOTA_BaseNPC_Hero_RespawnHero(bool buyback,bool unKnown , bool unKnown)", "contents": "${1:CDOTA_BaseNPC_Hero}:RespawnHero(${2:bool buyback},${3:bool unKnown},${4:bool unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_HeroLevelUp(bool unKnown)", "contents": "${1:CDOTA_BaseNPC_Hero}:HeroLevelUp(${2:bool unKnown})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_GetAbilityPoints()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetAbilityPoints()"},
		{ "trigger": "CDOTA_BaseNPC_Hero_SetAbilityPoints(int points)", "contents": "${1:CDOTA_BaseNPC_Hero}:SetAbilityPoints(${2:int points})"},
		{ "trigger": "CDOTA_BaseNPC_Hero_SetCustomDeathXP(int points)", "contents": "${1:CDOTA_BaseNPC_Hero}:SetCustomDeathXP(${2:int points})"},



		{ "trigger": "CDOTABaseAbility_GetAbilityName()", "contents": "${1:CDOTABaseAbility}:GetAbilityName()"},
		{ "trigger": "CDOTABaseAbility_GetSpecialValueFor(string specialValue)", "contents": "${1:CDOTABaseAbility}:GetSpecialValueFor(${2:string specialValue})"},
		{ "trigger": "CDOTABaseAbility_GetCastRange()", "contents": "${1:CDOTABaseAbility}:GetCastRange()"},
		{ "trigger": "CDOTABaseAbility_IsFullyCastable()", "contents": "${1:CDOTABaseAbility}:IsFullyCastable()"},
		{ "trigger": "CDOTABaseAbility_IsChanneling()", "contents": "${1:CDOTABaseAbility}:IsChanneling()"},
		{ "trigger": "CDOTABaseAbility_IsInAbilityPhase()", "contents": "${1:CDOTABaseAbility}:IsInAbilityPhase()"},
		{ "trigger": "CDOTABaseAbility_GetCooldown(int level)", "contents": "${1:CDOTABaseAbility}:GetCooldown(${2:int level})"},
		{ "trigger": "CDOTABaseAbility_EndCooldown()", "contents": "${1:CDOTABaseAbility}:EndCooldown()"},
		{ "trigger": "CDOTABaseAbility_MarkAbilityButtonDirty()", "contents": "${1:CDOTABaseAbility}:MarkAbilityButtonDirty()"},
		{ "trigger": "CDOTABaseAbility_SetLevel(int abilityLevel)", "contents": "${1:CDOTABaseAbility}:SetLevel(${2:int abilityLevel})"},


		{ "trigger": "CDOTA_Ability_Animation_Attack_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Animation_Attack}:SetPlaybackRate(${2:float playbackrate})"},


		{ "trigger": "CDOTA_Ability_Animation_Tailspin_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Animation_Tailspin}:SetPlaybackRate(${2:float playbackrate})"},


		{ "trigger": "CDOTA_Ability_Nian_Dive_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Nian_Dive}:SetPlaybackRate(${2:float playbackrate})"},


		{ "trigger": "CDOTA_Ability_Nian_Leap_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Nian_Leap}:SetPlaybackRate(${2:float playbackrate})"},


		{ "trigger": "CDOTA_Ability_Nian_Roar_GetCastCount()", "contents": "${1:CDOTA_Ability_Nian_Roar}:GetCastCount()"},


		{ "trigger": "CDotaQuest_SetTextReplaceValue(int questText,int value)", "contents": "${1:CDotaQuest}:SetTextReplaceValue(${2:int questText},${3:int value})"},
		{ "trigger": "CDotaQuest_CompleteQuest()", "contents": "${1:CDotaQuest}:CompleteQuest()"},
		{ "trigger": "CDotaQuest_SetTextReplaceString(string replace)", "contents": "${1:CDotaQuest}:SetTextReplaceString(${2:string replace})"},
		{ "trigger": "CDotaQuest_AddSubquest(hscript subquest)", "contents": "${1:CDotaQuest}:AddSubquest(${2:hscript subquest})"},
		{ "trigger": "CDotaQuest_RemoveSubquest(hscript subquest)", "contents": "${1:CDotaQuest}:RemoveSubquest(${2:hscript subquest})"},
		{ "trigger": "CDotaQuest_GetSubquestByName(string unKnown)", "contents": "${1:CDotaQuest}:GetSubquestByName(${2:string unKnown})"},
		{ "trigger": "CDotaQuest_GetSubquest(int unKnown)", "contents": "${1:CDotaQuest}:GetSubquest(${2:int unKnown})"},


		{ "trigger": "CDotaSubquestBase_SetTextReplaceValue(int unKnown,int unKnown)", "contents": "${1:CDotaSubquestBase}:SetTextReplaceValue(${2:int unKnown},${3:int unKnown})"},
		{ "trigger": "CDotaSubquestBase_CompleteSubquest()", "contents": "${1:CDotaSubquestBase}:CompleteSubquest()"},
		{ "trigger": "CDotaSubquestBase_SetTextReplaceString(string text)", "contents": "${1:CDotaSubquestBase}:SetTextReplaceString(${2:string text})"},


		{ "trigger": "CDOTA_Item_SetPurchaseTime(float purchaseTime)", "contents": "${1:CDOTA_Item}:SetPurchaseTime(${2:float purchaseTime})"},
		{ "trigger": "CDOTA_Item_GetPurchaseTime()", "contents": "${1:CDOTA_Item}:GetPurchaseTime()"},
		{ "trigger": "CDOTA_Item_SetPurchaser(Unit unit)", "contents": "${1:CDOTA_Item}:SetPurchaser(${2:Unit unit})"},
		{ "trigger": "CDOTA_Item_GetInitialCharges()", "contents": "${1:CDOTA_Item}:GetInitialCharges()"},
		{ "trigger": "CDOTA_Item_GetCurrentCharges()", "contents": "${1:CDOTA_Item}:GetCurrentCharges()"},
		{ "trigger": "CDOTA_Item_SetCurrentCharges(int charges)", "contents": "${1:CDOTA_Item}:SetCurrentCharges(${2:int charges})"},
		{ "trigger": "CDOTA_Item_GetPurchaser()", "contents": "${1:CDOTA_Item}:GetPurchaser()"},
		{ "trigger": "CDOTA_Item_Think()", "contents": "${1:CDOTA_Item}:Think()"},
		{ "trigger": "CDOTA_Item_IsPermanent()", "contents": "${1:CDOTA_Item}:IsPermanent()"},
		{ "trigger": "CDOTA_Item_StacksWithOtherOwners()", "contents": "${1:CDOTA_Item}:StacksWithOtherOwners()"},
		{ "trigger": "CDOTA_Item_SetStacksWithOtherOwners(bool stacks)", "contents": "${1:CDOTA_Item}:SetStacksWithOtherOwners(${2:bool stacks})"},
		{ "trigger": "CDOTA_Item_GetShareability()", "contents": "${1:CDOTA_Item}:GetShareability()"},
		{ "trigger": "CDOTA_Item_GetCost()", "contents": "${1:CDOTA_Item}:GetCost()"},
		{ "trigger": "CDOTA_Item_LaunchLoot(bool bool,float float , float float , vector vector)", "contents": "${1:CDOTA_Item}:LaunchLoot(${2:bool bool},${3:float float},${4:float float},${5:vector vector})"},
		{ "trigger": "CDOTA_Item_GetContainer()", "contents": "${1:CDOTA_Item}:GetContainer()"},


		{ "trigger": "CDOTA_Item_DataDriven_ApplyDataDrivenModifier(hscript hscript,hscript hscript , string string , hscript hscript)", "contents": "${1:CDOTA_Item_DataDriven}:ApplyDataDrivenModifier(${2:hscript hscript},${3:hscript hscript},${4:string string},${5:hscript hscript})"},


		{ "trigger": "CDOTA_Item_Physical_GetCreationTime()", "contents": "${1:CDOTA_Item_Physical}:GetCreationTime()"},
		{ "trigger": "CDOTA_Item_Physical_GetContainedItem()", "contents": "${1:CDOTA_Item_Physical}:GetContainedItem()"},
		{ "trigger": "CDOTA_Item_Physical_SetContainedItem(Item item)", "contents": "${1:CDOTA_Item_Physical}:SetContainedItem(${2:Item item})"},


		{ "trigger": "CDOTAPlayer_GetPlayerID()", "contents": "${1:CDOTAPlayer}:GetPlayerID()"},
		{ "trigger": "CDOTAPlayer_GetAssignedHero()", "contents": "${1:CDOTAPlayer}:GetAssignedHero()"},
		{ "trigger": "CDOTAPlayer_SetKillCamUnit(hscript unit)", "contents": "${1:CDOTAPlayer}:SetKillCamUnit(${2:hscript unit})"},
		{ "trigger": "CDOTAPlayer_MakeRandomHeroSelection()", "contents": "${1:CDOTAPlayer}:MakeRandomHeroSelection()"},
		{ "trigger": "CDOTAPlayer_SetMusicStatus(int unKnown,float statu)", "contents": "${1:CDOTAPlayer}:SetMusicStatus(${2:int unKnown},${3:float statu})"},



		{ "trigger": "CTriggerCamera_GetFov()", "contents": "${1:CTriggerCamera}:GetFov()"},
		{ "trigger": "CTriggerCamera_SetFov(int degrees,float rate)", "contents": "${1:CTriggerCamera}:SetFov(${2:int degrees},${3:float rate})"},
		{ "trigger": "CTriggerCamera_ScreenFade(int int,int int , int int , int int , float float , float float , int int)", "contents": "${1:CTriggerCamera}:ScreenFade(${2:int int},${3:int int},${4:int int},${5:int int},${6:float float},${7:float float},${8:int int})"},
		{ "trigger": "CTriggerCamera_Enable()", "contents": "${1:CTriggerCamera}:Enable()"},


		{ "trigger": "CSceneEntity_EstimateLength()", "contents": "${1:CSceneEntity}:EstimateLength()"},
		{ "trigger": "CSceneEntity_IsPlayingBack()", "contents": "${1:CSceneEntity}:IsPlayingBack()"},
		{ "trigger": "CSceneEntity_IsPaused()", "contents": "${1:CSceneEntity}:IsPaused()"},
		{ "trigger": "CSceneEntity_Start(Entity activator)", "contents": "${1:CSceneEntity}:Start(${2:Entity activator})"},
		{ "trigger": "CSceneEntity_Cancel()", "contents": "${1:CSceneEntity}:Cancel()"},
		{ "trigger": "CSceneEntity_AddBroadcastTeamTarget(int team)", "contents": "${1:CSceneEntity}:AddBroadcastTeamTarget(${2:int team})"},
		{ "trigger": "CSceneEntity_RemoveBroadcastTeamTarget(int entityIndex)", "contents": "${1:CSceneEntity}:RemoveBroadcastTeamTarget(${2:int entityIndex})"},
		{ "trigger": "CSceneEntity_FindNamedEntity(string entityReference)", "contents": "${1:CSceneEntity}:FindNamedEntity(${2:string entityReference})"},
		{ "trigger": "CSceneEntity_LoadSceneFromString(string sceneName,string vcdFile)", "contents": "${1:CSceneEntity}:LoadSceneFromString(${2:string sceneName},${3:string vcdFile})"},
		{ "trigger": "CSceneEntity_FindCamera()", "contents": "${1:CSceneEntity}:FindCamera()"},


		{ "trigger": "CEnvProjectedTexture_SetLinearAttenuation(float attenuation)", "contents": "${1:CEnvProjectedTexture}:SetLinearAttenuation(${2:float attenuation})"},
		{ "trigger": "CEnvProjectedTexture_SetQuadraticAttenuation(float attenuation)", "contents": "${1:CEnvProjectedTexture}:SetQuadraticAttenuation(${2:float attenuation})"},
		{ "trigger": "CEnvProjectedTexture_SetNearRange(float nearRange)", "contents": "${1:CEnvProjectedTexture}:SetNearRange(${2:float nearRange})"},
		{ "trigger": "CEnvProjectedTexture_SetFarRange(float farRange)", "contents": "${1:CEnvProjectedTexture}:SetFarRange(${2:float farRange})"},
		{ "trigger": "CEnvProjectedTexture_SetVolumetrics(bool on,float intensity , float noise , int planes , float planeOffset)", "contents": "${1:CEnvProjectedTexture}:SetVolumetrics(${2:bool on},${3:float intensity},${4:float noise},${5:int planes},${6:float planeOffset})"},


		{ "trigger": "CEnvEntityMaker_SpawnEntity()", "contents": "${1:CEnvEntityMaker}:SpawnEntity()"},
		{ "trigger": "CEnvEntityMaker_SpawnEntityAtEntityOrigin(Entity entity)", "contents": "${1:CEnvEntityMaker}:SpawnEntityAtEntityOrigin(${2:Entity entity})"},
		{ "trigger": "CEnvEntityMaker_SpawnEntityAtNamedEntityOrigin(string entityName)", "contents": "${1:CEnvEntityMaker}:SpawnEntityAtNamedEntityOrigin(${2:string entityName})"},
		{ "trigger": "CEnvEntityMaker_SpawnEntityAtLocation(vector location,vector orientation)", "contents": "${1:CEnvEntityMaker}:SpawnEntityAtLocation(${2:vector location},${3:vector orientation})"},


		{ "trigger": "CDOTAVoteSystem_StartVote(hscript vote)", "contents": "${1:CDOTAVoteSystem}:StartVote(${2:hscript vote})"},

	]
}

{
  "scope": "source.lua",

	"completions":
	[
		{ "trigger": "如果", "contents": "if (${1:situation}) then\n	${4:--todo}\nend"},
		{ "trigger": "如果-否则", "contents": "if (${1:situation}) then\n	${4:--todo}\nelse\n	${5:--todo}\nend"},
		{ "trigger": "中断", "contents": "break"},
		{ "trigger": "开始循环", "contents": "do"},
		{ "trigger": "且", "contents": "and"},
		{ "trigger": "或", "contents": "or"},
		{ "trigger": "非", "contents": "not"},
		{ "trigger": "其他", "contents": "else"},
		{ "trigger": "否则-如果", "contents": "elseif (${1:situation}) then\n	${4:--todo}\nend"},
		{ "trigger": "返回", "contents": "return"},
		{ "trigger": "那么", "contents": "then"},
		{ "trigger": "那么-结束", "contents": "then\n	--todo\n	end"},
		{ "trigger": "重复", "contents": "repeat\n	--${4:--todo}\nuntil (${1:arg})"},
		{ "trigger": "当", "contents": "while (${1:arg}) do\n	--${4:--todo}\nend"},
		{ "trigger": "直到", "contents": "until( ${1:arg} )"},
		{ "trigger": "结束", "contents": "end"},
		{ "trigger": "在", "contents": "in"},
		{ "trigger": "在-表中-循环", "contents": "in pairs( ${1:table} ) do\n	${2:--todo}\nend"},
		{ "trigger": "在-表中-顺序循环", "contents": "in ipairs( ${1:table} ) do\n	${2:--todo}\nend"},
		
		{ "trigger": "函数", "contents": "function ${1:functionName}(...)\n	--todo\n	end"},



		{ "trigger": "assert", "contents": "assert( ${1:v} ${2:[, message]} )"},
		{ "trigger": "collectgarbage", "contents": "collectgarbage( ${1:opt} ${2:[, arg]} )"},
		{ "trigger": "dofile", "contents": "dofile"},
		{ "trigger": "error", "contents": "error"},
		{ "trigger": "getfenv", "contents": "getfenv"},
		{ "trigger": "getmetatable", "contents": "getmetatable"},
		{ "trigger": "ipairs", "contents": "ipairs"},
		{ "trigger": "loadfile", "contents": "loadfile"},
		{ "trigger": "loadstring", "contents": "loadstring"},
		{ "trigger": "module", "contents": "module"},
		{ "trigger": "next", "contents": "next"},
		{ "trigger": "pairs", "contents": "pairs"},
		{ "trigger": "pcall", "contents": "pcall (${1:functionname} , ${2:arg1} , ${3:...} )"},
		{ "trigger": "print", "contents": "print(\"print_these_strings_to_console\")"},
		{ "trigger": "rawequal", "contents": "rawequal"},
		{ "trigger": "rawget", "contents": "rawget"},
		{ "trigger": "rawset", "contents": "rawset"},
		{ "trigger": "require", "contents": "require"},
		{ "trigger": "select", "contents": "select"},
		{ "trigger": "setfenv", "contents": "setfenv"},
		{ "trigger": "setmetatable", "contents": "setmetatable(${1:o}, ${2:self})"},
		{ "trigger": "tonumber", "contents": "tonumber"},
		{ "trigger": "tostring", "contents": "tostring"},
		{ "trigger": "type", "contents": "type"},
		{ "trigger": "unpack", "contents": "unpack"},
		{ "trigger": "xpcall", "contents": "xpcall"},


		{ "trigger": "create", "contents": "create"},
		{ "trigger": "resume", "contents": "resume"},
		{ "trigger": "running", "contents": "running"},
		{ "trigger": "status", "contents": "status"},
		{ "trigger": "wrap", "contents": "wrap"},
		{ "trigger": "yield", "contents": "yield"},

		{ "trigger": "coroutine_create", "contents": "coroutine.create"},
		{ "trigger": "coroutine_resume", "contents": "coroutine.resume"},
		{ "trigger": "coroutine_running", "contents": "coroutine.running"},
		{ "trigger": "coroutine_status", "contents": "coroutine.status"},
		{ "trigger": "coroutine_wrap", "contents": "coroutine.wrap"},
		{ "trigger": "coroutine_yield", "contents": "coroutine.yield"},


		{ "trigger": "byte", "contents": "byte( ${1:string} , ${2:int} )"},
		{ "trigger": "char", "contents": "char( ${1:numbers} )"},
		{ "trigger": "dump", "contents": "dump( ${1:string} )"},
		{ "trigger": "find", "contents": "find( ${1:string} , ${2:match string} ${3:, optionalint})"},
		{ "trigger": "format", "contents": "format( \"${1:stringssssss} %d\",${2:arg} )"},
		{ "trigger": "gsub", "contents": "gsub( ${1:string} , ${2:replacedchar} , ${3:replacechar})"},
		{ "trigger": "len", "contents": "len( ${1:string} )"},
		{ "trigger": "lower", "contents": "lower( ${1:string} )"},
		{ "trigger": "match", "contents": "match( ${1:string} )"},
		{ "trigger": "rep", "contents": "rep( ${1:string} , ${2:int copies} )"},
		{ "trigger": "reverse", "contents": "reverse( ${1:string} )"},
		{ "trigger": "sub", "contents": "sub( ${1:string} , ${2:int start} , ${3: int oprionalend} )"},
		{ "trigger": "upper", "contents": "upper( ${1:string} )"},

		{ "trigger": "string_byte", "contents": "string.byte( ${1:string} , ${2:int} )"},
		{ "trigger": "string_char", "contents": "string.char( ${1:numbers} )"},
		{ "trigger": "string_dump", "contents": "string.dump( ${1:string} )"},
		{ "trigger": "string_find", "contents": "string.find( ${1:string} , ${2:match string} ${3:, optionalint})"},
		{ "trigger": "字符串-格式化", "contents": "string.format( \"${1:stringssssss} %d\",${2:arg} )"},
		{ "trigger": "字符串-替换字符", "contents": "string.gsub( ${1:string} , ${2:replacedchar} , ${3:replacechar})"},
		{ "trigger": "字符串-长度", "contents": "string.len( ${1:string} )"},
		{ "trigger": "字符串-小写", "contents": "string.lower( ${1:string} )"},
		{ "trigger": "string_match", "contents": "string.match( ${1:string} )"},
		{ "trigger": "string_rep", "contents": "string.rep( ${1:string} , ${2:int copies} )"},
		{ "trigger": "string_reverse", "contents": "string.reverse( ${1:string} )"},
		{ "trigger": "string_sub", "contents": "string.sub( ${1:string} , ${2:int start} , ${3: int oprionalend} )"},
		{ "trigger": "字符串-大写", "contents": "string.upper( ${1:string} )"},



		{ "trigger": "concat", "contents": "concat( ${1:table} , ${2:sep} , ${3:start} , ${4:end} )"},
		{ "trigger": "insert", "contents": "insert( ${1:table} , ${2:pos} , ${3:value} )"},
		{ "trigger": "maxn", "contents": "maxn( ${1:table} )"},
		{ "trigger": "remove", "contents": "remove( ${1:table} , ${2:pos} )"},
		{ "trigger": "sort", "contents": "sort( ${1:table} , ${2:comp} )" , "description":"sort the table"},

		{ "trigger": "table_concat", "contents": "table.concat( ${1:table} , ${2:sep} , ${3:start} , ${4:end} )"},
		{ "trigger": "table_insert", "contents": "table.insert( ${1:table} , ${2:pos} , ${3:value} )"},
		{ "trigger": "table_maxn", "contents": "table.maxn( ${1:table} )"},
		{ "trigger": "table_remove", "contents": "table.remove( ${1:table} , ${2:pos} )"},
		{ "trigger": "table_sort", "contents": "table.sort( ${1:table} , ${2:comp} )" , "description":"sort the table"},


		{ "trigger": "pi", "contents": "pi"},
		{ "trigger": "abs", "contents": "abs(${1:arg})"},
		{ "trigger": "ceil", "contents": "ceil(${1:arg})"},
		{ "trigger": "floor", "contents": "floor(${1:arg})"},
		{ "trigger": "max", "contents": "max(${1:args})"},
		{ "trigger": "min", "contents": "min(${1:args})"},
		{ "trigger": "pow", "contents": "pow(${1:x},${2:y})"},
		{ "trigger": "sqrt", "contents": "sqrt(${1:arg})"},
		{ "trigger": "mod", "contents": "mod(${1:arg1},${2:arg2})"},
		{ "trigger": "modf", "contents": "modf(${1:arg})"},
		{ "trigger": "randomseed", "contents": "randomseed(os.time())"},
		{ "trigger": "random", "contents": "random(${1:min},${2:max})"},
		{ "trigger": "rad", "contents": "rad(${1:arg})"},
		{ "trigger": "deg", "contents": "deg(${1:arg})"},
		{ "trigger": "exp", "contents": "exp(${1:arg})"},
		{ "trigger": "log", "contents": "log(${1:arg})"},
		{ "trigger": "log10", "contents": "log10(${1:arg})"},
		{ "trigger": "frexp", "contents": "frexp(${1:arg})"},
		{ "trigger": "ldexp", "contents": "ldexp"},
		{ "trigger": "sin", "contents": "sin(${1:arg})"},
		{ "trigger": "cos", "contents": "cos(${1:arg})"},
		{ "trigger": "tan", "contents": "tan(${1:arg})"},
		{ "trigger": "asin", "contents": "deg(math.asin(${1:arg}))"},
		{ "trigger": "acos", "contents": "deg(math.acos(${1:arg}))"},
		{ "trigger": "atan", "contents": "deg(math.atan(${1:arg}))"},

		{ "trigger": "数学-pi", "contents": "math.pi"},
		{ "trigger": "数学-abs", "contents": "math.abs(${1:arg})"},
		{ "trigger": "数学-ceil", "contents": "math.ceil(${1:arg})"},
		{ "trigger": "数学_floor", "contents": "math.floor(${1:arg})"},
		{ "trigger": "数学_max", "contents": "math.max(${1:args})"},
		{ "trigger": "数学_min", "contents": "math.min(${1:args})"},
		{ "trigger": "数学_pow", "contents": "math.pow(${1:x},${2:y})"},
		{ "trigger": "数学_sqrt", "contents": "math.sqrt(${1:arg})"},
		{ "trigger": "数学_mod", "contents": "math.mod(${1:arg1},${2:arg2})"},
		{ "trigger": "数学_modf", "contents": "math.modf(${1:arg})"},
		{ "trigger": "数学_randomseed", "contents": "math.randomseed(os.time())"},
		{ "trigger": "数学_random", "contents": "math.random(${1:min},${2:max})"},
		{ "trigger": "数学_rad", "contents": "math.rad(${1:arg})"},
		{ "trigger": "数学_deg", "contents": "math.deg(${1:arg})"},
		{ "trigger": "数学_exp", "contents": "math.exp(${1:arg})"},
		{ "trigger": "数学_log", "contents": "math.log(${1:arg})"},
		{ "trigger": "数学_log10", "contents": "math.log10(${1:arg})"},
		{ "trigger": "数学_frexp", "contents": "math.frexp(${1:arg})"},
		{ "trigger": "数学_ldexp", "contents": "math.ldexp"},
		{ "trigger": "数学_sin", "contents": "math.sin(${1:arg})"},
		{ "trigger": "数学_cos", "contents": "math.cos(${1:arg})"},
		{ "trigger": "数学_tan", "contents": "math.tan(${1:arg})"},
		{ "trigger": "数学_asin", "contents": "math.deg(math.asin(${1:arg}))"},
		{ "trigger": "数学_acos", "contents": "math.deg(math.acos(${1:arg}))"},
		{ "trigger": "数学_atan", "contents": "math.deg(math.atan(${1:arg}))"},


		{ "trigger": "close", "contents": "close"},
		{ "trigger": "flush", "contents": "flush"},
		{ "trigger": "input", "contents": "input"},
		{ "trigger": "lines", "contents": "lines"},
		{ "trigger": "open", "contents": "open"},
		{ "trigger": "output", "contents": "output"},
		{ "trigger": "popen", "contents": "popen"},
		{ "trigger": "read", "contents": "read"},
		{ "trigger": "tmpfile", "contents": "tmpfile"},
		{ "trigger": "type", "contents": "type"},
		{ "trigger": "write", "contents": "write"},

		{ "trigger": "io_close", "contents": "io.close"},
		{ "trigger": "io_flush", "contents": "io.flush"},
		{ "trigger": "io_input", "contents": "io.input"},
		{ "trigger": "io_lines", "contents": "io.lines"},
		{ "trigger": "io_open", "contents": "io.open"},
		{ "trigger": "io_output", "contents": "io.output"},
		{ "trigger": "io_popen", "contents": "io.popen"},
		{ "trigger": "io_read", "contents": "io.read"},
		{ "trigger": "io_tmpfile", "contents": "io.tmpfile"},
		{ "trigger": "io_type", "contents": "io.type"},
		{ "trigger": "io_write", "contents": "io.write"},


		{ "trigger": "clock", "contents": "clock"},
		{ "trigger": "date", "contents": "date"},
		{ "trigger": "difftime", "contents": "difftime"},
		{ "trigger": "execute", "contents": "execute"},
		{ "trigger": "exit", "contents": "exit"},
		{ "trigger": "getenv", "contents": "getenv"},
		{ "trigger": "remove", "contents": "remove"},
		{ "trigger": "rename", "contents": "rename"},
		{ "trigger": "setlocale", "contents": "setlocale"},
		{ "trigger": "time", "contents": "time"},
		{ "trigger": "tmpname", "contents": "tmpname"},

		{ "trigger": "os_clock", "contents": "os.clock"},
		{ "trigger": "os_date", "contents": "os.date"},
		{ "trigger": "os_difftime", "contents": "os.difftime"},
		{ "trigger": "os_execute", "contents": "os.execute"},
		{ "trigger": "os_exit", "contents": "os.exit"},
		{ "trigger": "os_getenv", "contents": "os.getenv"},
		{ "trigger": "os_remove", "contents": "os.remove"},
		{ "trigger": "os_rename", "contents": "os.rename"},
		{ "trigger": "os_setlocale", "contents": "os.setlocale"},
		{ "trigger": "os_time", "contents": "os.time"},
		{ "trigger": "os_tmpname", "contents": "os.tmpname"},


		{ "trigger": "cpath", "contents": "cpath"},
		{ "trigger": "loaded", "contents": "loaded"},
		{ "trigger": "loadlib", "contents": "loadlib"},
		{ "trigger": "path", "contents": "path"},
		{ "trigger": "preload", "contents": "preload"},
		{ "trigger": "seeall", "contents": "seeall"},

		{ "trigger": "package_cpath", "contents": "package.cpath"},
		{ "trigger": "package_loaded", "contents": "package.loaded"},
		{ "trigger": "package_loadlib", "contents": "package.loadlib"},
		{ "trigger": "package_path", "contents": "package.path"},
		{ "trigger": "package_preload", "contents": "package.preload"},
		{ "trigger": "package_seeall", "contents": "package.seeall"},




		{ "trigger": "CreateParticle(string particleName,int ParticleAttach , Entity owningEntity , Player viewingPlayer)", "contents": "CreateParticle(${1:string particleName},${2:int ParticleAttach},${3:Entity owningEntity},${4:Player viewingPlayer})"},
		{ "trigger": "CreateParticleForPlayer(string particleName,int ParticleAttach , Entity owningEntity , Player viewingPlayer)", "contents": "CreateParticleForPlayer(${1:string particleName},${2:int ParticleAttach},${3:Entity owningEntity},${4:Player viewingPlayer})"},
		{ "trigger": "SetParticleControl(int particleId,int controlIndex , vector controlData)", "contents": "SetParticleControl(${1:int particleId},${2:int controlIndex},${3:vector controlData})"},
		{ "trigger": "ReleaseParticleIndex(int particleId)", "contents": "ReleaseParticleIndex(${1:int particleId})"},


		{ "trigger": "State_Get()", "contents": "State_Get()"},
		{ "trigger": "GetGameModeEntity()", "contents": "GetGameModeEntity()"},
		{ "trigger": "GetGameTime()", "contents": "GetGameTime()"},
		{ "trigger": "GetDifficulty()", "contents": "GetDifficulty()"},
		{ "trigger": "GetCustomGameDifficulty()", "contents": "GetCustomGameDifficulty()"},
		{ "trigger": "Defeated()", "contents": "Defeated()"},
		{ "trigger": "ResetDefeated()", "contents": "ResetDefeated()"},
		{ "trigger": "SetGameWinner(int team)", "contents": "SetGameWinner(${1:int team})"},
		{ "trigger": "MakeTeamLose(int team)", "contents": "MakeTeamLose(${1:int team})"},
		{ "trigger": "ResetMap(int unKnown)", "contents": "ResetMap(${1:int unKnown})"},
		{ "trigger": "GetDroppedItem(int dropIndex)", "contents": "GetDroppedItem(${1:int dropIndex})"},
		{ "trigger": "NumDroppedItems()", "contents": "NumDroppedItems()"},
		{ "trigger": "SendCustomMessage(string stringText,int unKnown , int unKnown)", "contents": "SendCustomMessage(${1:string stringText},${2:int unKnown},${3:int unKnown})"},
		{ "trigger": "SetHeroRespawnEnabled(bool canRespawn)", "contents": "SetHeroRespawnEnabled(${1:bool canRespawn})"},
		{ "trigger": "Playtesting_UpdateCustomKeyValues()", "contents": "Playtesting_UpdateCustomKeyValues()"},
		{ "trigger": "ResetToHeroSelection()", "contents": "ResetToHeroSelection()"},
		{ "trigger": "SetTreeRegrowTime(float seconds)", "contents": "SetTreeRegrowTime(${1:float seconds})"},
		{ "trigger": "SetHeroSelectionTime(float seconds)", "contents": "SetHeroSelectionTime(${1:float seconds})"},
		{ "trigger": "SetPreGameTime(float seconds)", "contents": "SetPreGameTime(${1:float seconds})"},
		{ "trigger": "SetPostGameTime(float seconds)", "contents": "SetPostGameTime(${1:float seconds})"},
		{ "trigger": "SetRuneSpawnTime(float seconds)", "contents": "SetRuneSpawnTime(${1:float seconds})"},
		{ "trigger": "SetSameHeroSelectionEnabled(bool enabled)", "contents": "SetSameHeroSelectionEnabled(${1:bool enabled})"},
		{ "trigger": "SetUseUniversalShopMode(bool enabled)", "contents": "SetUseUniversalShopMode(${1:bool enabled})"},
		{ "trigger": "SetTimeOfDay(float time)", "contents": "SetTimeOfDay(${1:float time})"},
		{ "trigger": "SetOverlayHealthBarUnit(Unit unit,int style)", "contents": "SetOverlayHealthBarUnit(${1:Unit unit},${2:int style})"},
		{ "trigger": "SetHeroMinimapIconSize(int iconSize)", "contents": "SetHeroMinimapIconSize(${1:int iconSize})"},
		{ "trigger": "SetCreepMinimapIconScale(float creepScale)", "contents": "SetCreepMinimapIconScale(${1:float creepScale})"},
		{ "trigger": "SetRuneMinimapIconScale(float runeScale)", "contents": "SetRuneMinimapIconScale(${1:float runeScale})"},
		{ "trigger": "SetSafeToLeave(bool safeToLeave)", "contents": "SetSafeToLeave(${1:bool safeToLeave})"},
		{ "trigger": "SetUseCustomHeroXPValues(bool unKnown)", "contents": "SetUseCustomHeroXPValues(${1:bool unKnown})"},
		{ "trigger": "SetCustomGameDifficulty(int unKnown)", "contents": "SetCustomGameDifficulty(${1:int unKnown})"},
		{ "trigger": "SetGoldTickTime(float unKnown)", "contents": "SetGoldTickTime(${1:float unKnown})"},
		{ "trigger": "SetGoldPerTick(int unKnown)", "contents": "SetGoldPerTick(${1:int unKnown})"},
		{ "trigger": "SetNianFightStartTime(float unKnown)", "contents": "SetNianFightStartTime(${1:float unKnown})"},
		{ "trigger": "GetNianFightStartTime()", "contents": "GetNianFightStartTime()"},
		{ "trigger": "GetMatchSignoutComplete()", "contents": "GetMatchSignoutComplete()"},
		{ "trigger": "DidMatchSignoutTimeOut()", "contents": "DidMatchSignoutTimeOut()"},
		{ "trigger": "GetNianTotalDamageTaken()", "contents": "GetNianTotalDamageTaken()"},


		{ "trigger": "第一个实体()", "contents": "First()"},
		{ "trigger": "下一个实体(Entity startFrom)", "contents": "Next(${1:Entity startFrom})"},
		{ "trigger": "CreateByClassname(string className)", "contents": "CreateByClassname(${1:string className})"},
		{ "trigger": "FindByClassname(Entity startFrom,string className)", "contents": "FindByClassname(${1:Entity startFrom},${2:string className})"},
		{ "trigger": "FindAllByClassname(string className)", "contents": "FindAllByClassname(${1:string className})"},
		{ "trigger": "FindByName(Entity startFrom,string entName)", "contents": "FindByName(${1:Entity startFrom},${2:string entName})"},
		{ "trigger": "FindAllByName(string name)", "contents": "FindAllByName(${1:string name})"},
		{ "trigger": "FindInSphere(Entity startFrom,vector origin , float radius)", "contents": "FindInSphere(${1:Entity startFrom},${2:vector origin},${3:float radius})"},
		{ "trigger": "FindAllInSphere(vector origin,float radius)", "contents": "FindAllInSphere(${1:vector origin},${2:float radius})"},
		{ "trigger": "FindByTarget(Entity startFrom,string targetName)", "contents": "FindByTarget(${1:Entity startFrom},${2:string targetName})"},
		{ "trigger": "FindAllByTarget(string targetName)", "contents": "FindAllByTarget(${1:string targetName})"},
		{ "trigger": "FindByModel(Entity startFrom,string modelName)", "contents": "FindByModel(${1:Entity startFrom},${2:string modelName})"},
		{ "trigger": "FindAllByModel(string modelName)", "contents": "FindAllByModel(${1:string modelName})"},
		{ "trigger": "FindByNameNearest(string entityName,vector origin , float radius)", "contents": "FindByNameNearest(${1:string entityName},${2:vector origin},${3:float radius})"},
		{ "trigger": "FindByNameWithin(Entity startFrom,string entityName , vector origin , float radius)", "contents": "FindByNameWithin(${1:Entity startFrom},${2:string entityName},${3:vector origin},${4:float radius})"},
		{ "trigger": "FindAllByNameWithin(string entityName,vector origin , float radius)", "contents": "FindAllByNameWithin(${1:string entityName},${2:vector origin},${3:float radius})"},
		{ "trigger": "FindByClassnameNearest(string className,vector origin , float radius)", "contents": "FindByClassnameNearest(${1:string className},${2:vector origin},${3:float radius})"},
		{ "trigger": "FindByClassnameWithin(Entity startFrom,string className , vector origin , float radius)", "contents": "FindByClassnameWithin(${1:Entity startFrom},${2:string className},${3:vector origin},${4:float radius})"},
		{ "trigger": "FindAllByClassnameWithin(string className,vector origin , float radius)", "contents": "FindAllByClassnameWithin(${1:string className},${2:vector origin},${3:float radius})"},


		{ "trigger": "GetHero(int heroId)", "contents": "GetHero(${1:int heroId})"},
		{ "trigger": "GetHeroCount()", "contents": "GetHeroCount()"},
		{ "trigger": "GetAllHeroes()", "contents": "GetAllHeroes()"},


		{ "trigger": "GetFloat(string varName)", "contents": "GetFloat(${1:string varName})"},
		{ "trigger": "GetStr(string varName)", "contents": "GetStr(${1:string varName})"},
		{ "trigger": "GetBool(string varName)", "contents": "GetBool(${1:string varName})"},
		{ "trigger": "RegisterCommand(string varName,function func , string helpText , int flags)", "contents": "RegisterCommand(${1:string varName},${2:function func},${3:string helpText},${4:int flags(seemsAlwaysToBe0)})"},
		{ "trigger": "RegisterConvar(string name,string default , string helpText , int flags)", "contents": "RegisterConvar(${1:string name},${2:string default},${3:string helpText},${4:int flags})"},
		{ "trigger": "GetCommandClient()", "contents": "GetCommandClient()"},
		{ "trigger": "GetDOTACommandClient()", "contents": "GetDOTACommandClient()"},


		{ "trigger": "ConnectOutput(string unKnown,string unKnown)", "contents": "ConnectOutput(${1:string unKnown},${2:string unKnown})"},
		{ "trigger": "DisconnectOutput(string unKnown,string unKnown)", "contents": "DisconnectOutput(${1:string unKnown},${2:string unKnown})"},
		{ "trigger": "GetHealth()", "contents": "GetHealth()"},
		{ "trigger": "SetHealth(int hp)", "contents": "SetHealth(${1:int hp})"},
		{ "trigger": "GetMaxHealth()", "contents": "GetMaxHealth()"},
		{ "trigger": "SetMaxHealth(int hp)", "contents": "SetMaxHealth(${1:int hp})"},
		{ "trigger": "IsAlive()", "contents": "IsAlive()"},
		{ "trigger": "Remove()", "contents": "Remove()"},
		{ "trigger": "SetModel(string modelName)", "contents": "SetModel(${1:string modelName})"},
		{ "trigger": "GetModelName()", "contents": "GetModelName()"},
		{ "trigger": "EmitSound(string soundName)", "contents": "EmitSound(${1:string soundName})"},
		{ "trigger": "EmitSoundParams(string soundName,int pitch , float volume)", "contents": "EmitSoundParams(${1:string soundName},${2:int pitch},${3:float volume})"},
		{ "trigger": "StopSound(string soundName)", "contents": "StopSound(${1:string soundName})"},
		{ "trigger": "PrecacheSoundScript(string soundName)", "contents": "PrecacheSoundScript(${1:string soundName})"},
		{ "trigger": "GetSoundDuration(string soundName,string actorModelname)", "contents": "GetSoundDuration(${1:string soundName},${2:string actorModelname})"},
		{ "trigger": "GetClassname()", "contents": "GetClassname()"},
		{ "trigger": "GetName()", "contents": "GetName()"},
		{ "trigger": "GetPreTemplateName()", "contents": "GetPreTemplateName()"},
		{ "trigger": "GetAbsOrigin()", "contents": "GetAbsOrigin()"},
		{ "trigger": "SetAbsOrigin(vector vec)", "contents": "SetAbsOrigin(${1:vector vec})"},
		{ "trigger": "GetOrigin()", "contents": "GetOrigin()"},
		{ "trigger": "SetAbsOrigin(vector vec)", "contents": "SetAbsOrigin(${1:vector vec})"},
		{ "trigger": "SetOrigin(vector vec)", "contents": "SetOrigin(${1:vector vec})"},
		{ "trigger": "GetForwardVector()", "contents": "GetForwardVector()"},
		{ "trigger": "GetRightVector()", "contents": "GetRightVector()"},
		{ "trigger": "GetUpVector()", "contents": "GetUpVector()"},
		{ "trigger": "SetForwardVector(vector forward)", "contents": "SetForwardVector(${1:vector forward})"},
		{ "trigger": "GetVelocity()", "contents": "GetVelocity()"},
		{ "trigger": "SetVelocity(vector velocity)", "contents": "SetVelocity(${1:vector velocity})"},
		{ "trigger": "SetAngularVelocity(float pitch,float yaw , float roll)", "contents": "SetAngularVelocity(${1:float pitch},${2:float yaw},${3:float roll})"},
		{ "trigger": "GetAngularVelocity()", "contents": "GetAngularVelocity()"},
		{ "trigger": "GetCenter()", "contents": "GetCenter()"},
		{ "trigger": "EyePosition()", "contents": "EyePosition()"},
		{ "trigger": "SetAngles(float pitch,float yaw , float roll)", "contents": "SetAngles(${1:float pitch},${2:float yaw},${3:float roll})"},
		{ "trigger": "GetAngles()", "contents": "GetAngles()"},
		{ "trigger": "SetSize(vector vec,vector vec)", "contents": "SetSize(${1:vector vec},${2:vector vec})"},
		{ "trigger": "GetBoundingMins()", "contents": "GetBoundingMins()"},
		{ "trigger": "GetBoundingMaxs()", "contents": "GetBoundingMaxs()"},
		{ "trigger": "Destroy()", "contents": "Destroy()"},
		{ "trigger": "SetOwner(Entity parent)", "contents": "SetOwner(${1:Entity parent})"},
		{ "trigger": "GetTeam()", "contents": "GetTeam()"},
		{ "trigger": "SetTeam(int team)", "contents": "SetTeam(${1:int team})"},
		{ "trigger": "GetMoveParent()", "contents": "GetMoveParent()"},
		{ "trigger": "GetRootMoveParent()", "contents": "GetRootMoveParent()"},
		{ "trigger": "FirstMoveChild()", "contents": "FirstMoveChild()"},
		{ "trigger": "NextMovePeer()", "contents": "NextMovePeer()"},
		{ "trigger": "__KeyValueFromString(string key,string value)", "contents": "__KeyValueFromString(${1:string key},${2:string value})"},
		{ "trigger": "__KeyValueFromFloat(string key,float value)", "contents": "__KeyValueFromFloat(${1:string key},${2:float value})"},
		{ "trigger": "__KeyValueFromInt(string key,int value)", "contents": "__KeyValueFromInt(${1:string key},${2:int value})"},
		{ "trigger": "__KeyValueFromVector(string key,vector value)", "contents": "__KeyValueFromVector(${1:string key},${2:vector value})"},
		{ "trigger": "Trigger()", "contents": "Trigger()"},
		{ "trigger": "ValidateScriptScope()", "contents": "ValidateScriptScope()"},
		{ "trigger": "GetScriptScope()", "contents": "GetScriptScope()"},
		{ "trigger": "GetScriptId()", "contents": "GetScriptId()"},
		{ "trigger": "GetOwner()", "contents": "GetOwner()"},
		{ "trigger": "entindex()", "contents": "entindex()"},


		{ "trigger": "SetHasRepicked(int playerId)", "contents": "SetHasRepicked(${1:int playerId})"},
		{ "trigger": "HasRepicked(int playerId)", "contents": "HasRepicked(${1:int playerId})"},
		{ "trigger": "SetHasRandomed(int playerId)", "contents": "SetHasRandomed(${1:int playerId})"},
		{ "trigger": "HasRandomed(int playerId)", "contents": "HasRandomed(${1:int playerId})"},
		{ "trigger": "IsValidTeamPlayerID(int playerId)", "contents": "IsValidTeamPlayerID(${1:int playerId})"},
		{ "trigger": "IsValidTeamPlayer(int playerId)", "contents": "IsValidTeamPlayer(${1:int playerId})"},
		{ "trigger": "IsValidPlayerID(int playerId)", "contents": "IsValidPlayerID(${1:int playerId})"},
		{ "trigger": "IsValidPlayer(int playerId)", "contents": "IsValidPlayer(${1:int playerId})"},
		{ "trigger": "GetLevel(int playerId)", "contents": "GetLevel(${1:int playerId})"},
		{ "trigger": "IncrementKills(int playerId,int kills)", "contents": "IncrementKills(${1:int playerId},${2:int kills})"},
		{ "trigger": "IncrementAssists(int playerId)", "contents": "IncrementAssists(${1:int playerId})"},
		{ "trigger": "IncrementDeaths(int playerId)", "contents": "IncrementDeaths(${1:int playerId})"},
		{ "trigger": "GetKills(int playerId)", "contents": "GetKills(${1:int playerId})"},
		{ "trigger": "GetAssists(int playerId)", "contents": "GetAssists(${1:int playerId})"},
		{ "trigger": "GetDeaths(int playerId)", "contents": "GetDeaths(${1:int playerId})"},
		{ "trigger": "GetStuns(int playerId)", "contents": "GetStuns(${1:int playerId})"},
		{ "trigger": "GetHealing(int playerId)", "contents": "GetHealing(${1:int playerId})"},
		{ "trigger": "GetTowerKills(int playerId)", "contents": "GetTowerKills(${1:int playerId})"},
		{ "trigger": "GetRoshanKills(int playerId)", "contents": "GetRoshanKills(${1:int playerId})"},
		{ "trigger": "GetTeamKills(int playerId)", "contents": "GetTeamKills(${1:int playerId})"},
		{ "trigger": "IncrementStreak(int playerId)", "contents": "IncrementStreak(${1:int playerId})"},
		{ "trigger": "ClearStreak(int playerId)", "contents": "ClearStreak(${1:int playerId})"},
		{ "trigger": "GetStreak(int playerId)", "contents": "GetStreak(${1:int playerId})"},
		{ "trigger": "ModifyGold(int playerId,int goldAmt , bool reliable , int unknown)", "contents": "ModifyGold(${1:int playerId},${2:int goldAmt},${3:bool reliable},${4:int unknown})"},
		{ "trigger": "SetGold(int playerId,int goldAmt , bool reliable)", "contents": "SetGold(${1:int playerId},${2:int goldAmt},${3:bool reliable})"},
		{ "trigger": "SpendGold(int playerId,int amt , int unknown)", "contents": "SpendGold(${1:int playerId},${2:int amt},${3:int unknown})"},
		{ "trigger": "GetGold(int playerId)", "contents": "GetGold(${1:int playerId})"},
		{ "trigger": "GetReliableGold(int playerId)", "contents": "GetReliableGold(${1:int playerId})"},
		{ "trigger": "GetUnreliableGold(int playerId)", "contents": "GetUnreliableGold(${1:int playerId})"},
		{ "trigger": "ResetTotalEarnedGold(int playerId)", "contents": "ResetTotalEarnedGold(${1:int playerId})"},
		{ "trigger": "GetTotalEarnedGold(int playerId)", "contents": "GetTotalEarnedGold(${1:int playerId})"},
		{ "trigger": "GetTotalGoldSpent(int playerId)", "contents": "GetTotalGoldSpent(${1:int playerId})"},
		{ "trigger": "AddGoldSpentOnSupport(int unknown,int unknown)", "contents": "AddGoldSpentOnSupport(${1:int unknown},${2:int unknown})"},
		{ "trigger": "GetGoldSpentOnSupport(int playerId)", "contents": "GetGoldSpentOnSupport(${1:int playerId})"},
		{ "trigger": "GetGoldSpentOnConsumables(int playerId)", "contents": "GetGoldSpentOnConsumables(${1:int playerId})"},
		{ "trigger": "GetGoldSpentOnItems(int playerId)", "contents": "GetGoldSpentOnItems(${1:int playerId})"},
		{ "trigger": "GetGoldLostToDeath(int playerId)", "contents": "GetGoldLostToDeath(${1:int playerId})"},
		{ "trigger": "GetGoldSpentOnBuybacks(int playerId)", "contents": "GetGoldSpentOnBuybacks(${1:int playerId})"},
		{ "trigger": "GetGoldPerMin(int playerId)", "contents": "GetGoldPerMin(${1:int playerId})"},
		{ "trigger": "GetXPPerMin(int playerId)", "contents": "GetXPPerMin(${1:int playerId})"},
		{ "trigger": "GetAegisPickups(int playerId)", "contents": "GetAegisPickups(${1:int playerId})"},
		{ "trigger": "AddAegisPickup(int playerId)", "contents": "AddAegisPickup(${1:int playerId})"},
		{ "trigger": "GetRunePickups(int playerId)", "contents": "GetRunePickups(${1:int playerId})"},
		{ "trigger": "AddRunePickup(int playerId)", "contents": "AddRunePickup(${1:int playerId})"},
		{ "trigger": "GetNumConsumablesPurchased(int playerId)", "contents": "GetNumConsumablesPurchased(${1:int playerId})"},
		{ "trigger": "GetNumItemsPurchased(int playerId)", "contents": "GetNumItemsPurchased(${1:int playerId})"},
		{ "trigger": "GetTimeOfLastItemPurchase(int playerId)", "contents": "GetTimeOfLastItemPurchase(${1:int playerId})"},
		{ "trigger": "GetTimeOfLastConsumablePurchase(int playerId)", "contents": "GetTimeOfLastConsumablePurchase(${1:int playerId})"},
		{ "trigger": "GetTimeOfLastDeath(int playerId)", "contents": "GetTimeOfLastDeath(${1:int playerId})"},
		{ "trigger": "GetRespawnSeconds(int playerId)", "contents": "GetRespawnSeconds(${1:int playerId})"},
		{ "trigger": "IncrementTotalEarnedXP(int playerId,int amt)", "contents": "IncrementTotalEarnedXP(${1:int playerId},${2:int amt})"},
		{ "trigger": "GetTotalEarnedXP(int playerId)", "contents": "GetTotalEarnedXP(${1:int playerId})"},
		{ "trigger": "AddClaimedFarm(int playerId,float farm)", "contents": "AddClaimedFarm(${1:int playerId},${2:float farm})"},
		{ "trigger": "GetClaimedFarm(int playerId)", "contents": "GetClaimedFarm(${1:int playerId})"},
		{ "trigger": "GetRawPlayerDamage(int playerId)", "contents": "GetRawPlayerDamage(${1:int playerId})"},
		{ "trigger": "ClearRawPlayerDamageMatrix(int playerId)", "contents": "ClearRawPlayerDamageMatrix(${1:int playerId})"},
		{ "trigger": "ClearKillsMatrix(int playerId)", "contents": "ClearKillsMatrix(${1:int playerId})"},
		{ "trigger": "GetTowerDamageTaken(int playerId)", "contents": "GetTowerDamageTaken(${1:int playerId})"},
		{ "trigger": "GetCreepDamageTaken(int playerId)", "contents": "GetCreepDamageTaken(${1:int playerId})"},
		{ "trigger": "GetHeroDamageTaken(int playerId)", "contents": "GetHeroDamageTaken(${1:int playerId})"},
		{ "trigger": "GetDamageDoneToHero(int playerId,int heroId)", "contents": "GetDamageDoneToHero(${1:int playerId},${2:int heroId})"},
		{ "trigger": "GetKillsDoneToHero(int playerId,int heroId)", "contents": "GetKillsDoneToHero(${1:int playerId},${2:int heroId})"},
		{ "trigger": "GetSelectedHeroName(int playerId)", "contents": "GetSelectedHeroName(${1:int playerId})"},
		{ "trigger": "GetSelectedHeroID(int playerId)", "contents": "GetSelectedHeroID(${1:int playerId})"},
		{ "trigger": "IsHeroSelected(string heroName)", "contents": "IsHeroSelected(${1:string heroName})"},
		{ "trigger": "WhoSelectedHero(string heroName)", "contents": "WhoSelectedHero(${1:string heroName})"},
		{ "trigger": "GetSelectedHeroEntity(int playerId)", "contents": "GetSelectedHeroEntity(${1:int playerId})"},
		{ "trigger": "HasSelectedHero(int playerId)", "contents": "HasSelectedHero(${1:int playerId})"},
		{ "trigger": "GetPlayer(int playerId)", "contents": "GetPlayer(${1:int playerId})"},
		{ "trigger": "GetNthPlayerIDOnTeam(int index,int team)", "contents": "GetNthPlayerIDOnTeam(${1:int index},${2:int team})"},
		{ "trigger": "IncrementLastHits(int playerId)", "contents": "IncrementLastHits(${1:int playerId})"},
		{ "trigger": "GetLastHits(int playerId)", "contents": "GetLastHits(${1:int playerId})"},
		{ "trigger": "IncrementGoldBagsCollected(int playerId)", "contents": "IncrementGoldBagsCollected(${1:int playerId})"},
		{ "trigger": "GetGoldBagsCollected(int playerId)", "contents": "GetGoldBagsCollected(${1:int playerId})"},
		{ "trigger": "IncrementLastHitStreak(int playerId)", "contents": "IncrementLastHitStreak(${1:int playerId})"},
		{ "trigger": "ClearLastHitStreak(int playerId)", "contents": "ClearLastHitStreak(${1:int playerId})"},
		{ "trigger": "GetLastHitStreak(int playerId)", "contents": "GetLastHitStreak(${1:int playerId})"},
		{ "trigger": "IncrementLastHitMultikill(int playerId)", "contents": "IncrementLastHitMultikill(${1:int playerId})"},
		{ "trigger": "ClearLastHitMultikill(int playerId)", "contents": "ClearLastHitMultikill(${1:int playerId})"},
		{ "trigger": "GetLastHitMultikill(int playerId)", "contents": "GetLastHitMultikill(${1:int playerId})"},
		{ "trigger": "IncrementNearbyCreepDeaths(int playerId)", "contents": "IncrementNearbyCreepDeaths(${1:int playerId})"},
		{ "trigger": "GetNearbyCreepDeaths(int playerId)", "contents": "GetNearbyCreepDeaths(${1:int playerId})"},
		{ "trigger": "IncrementDenies(int playerId)", "contents": "IncrementDenies(${1:int playerId})"},
		{ "trigger": "GetDenies(int playerId)", "contents": "GetDenies(${1:int playerId})"},
		{ "trigger": "IncrementClaimedMisses(int playerId)", "contents": "IncrementClaimedMisses(${1:int playerId})"},
		{ "trigger": "GetClaimedMisses(int playerId)", "contents": "GetClaimedMisses(${1:int playerId})"},
		{ "trigger": "IncrementClaimedDenies(int playerId)", "contents": "IncrementClaimedDenies(${1:int playerId})"},
		{ "trigger": "GetClaimedDenies(int playerId)", "contents": "GetClaimedDenies(${1:int playerId})"},
		{ "trigger": "IncrementMisses(int playerId)", "contents": "IncrementMisses(${1:int playerId})"},
		{ "trigger": "GetMisses(int playerId)", "contents": "GetMisses(${1:int playerId})"},
		{ "trigger": "UpdateTeamSlot(int playerId,int slot)", "contents": "UpdateTeamSlot(${1:int playerId},${2:int slot})"},
		{ "trigger": "GetTeam(int playerId)", "contents": "GetTeam(${1:int playerId})"},
		{ "trigger": "IsBroadcaster(int playerId)", "contents": "IsBroadcaster(${1:int playerId})"},
		{ "trigger": "GetBroadcasterChannel(int playerId)", "contents": "GetBroadcasterChannel(${1:int playerId})"},
		{ "trigger": "GetBroadcasterChannelSlot(int playerId)", "contents": "GetBroadcasterChannelSlot(${1:int playerId})"},
		{ "trigger": "GetSteamAccountID(int playerId)", "contents": "GetSteamAccountID(${1:int playerId})"},
		{ "trigger": "IsFakeClient(int playerId)", "contents": "IsFakeClient(${1:int playerId})"},
		{ "trigger": "HaveAllPlayersJoined()", "contents": "HaveAllPlayersJoined()"},
		{ "trigger": "GetPlayerLoadedCompletely(int playerId)", "contents": "GetPlayerLoadedCompletely(${1:int playerId})"},
		{ "trigger": "SetPlayerReservedState(int playerId,bool reserved)", "contents": "SetPlayerReservedState(${1:int playerId},${2:bool reserved})"},
		{ "trigger": "GetPlayerReservedState(int playerId)", "contents": "GetPlayerReservedState(${1:int playerId})"},
		{ "trigger": "GetConnectionState(int playerId)", "contents": "GetConnectionState(${1:int playerId})"},
		{ "trigger": "HeroLevelUp(int playerId)", "contents": "HeroLevelUp(${1:int playerId})"},
		{ "trigger": "SetLastBuybackTime(int playerId,int time)", "contents": "SetLastBuybackTime(${1:int playerId},${2:int time})"},
		{ "trigger": "GetPlayerName(int playerId)", "contents": "GetPlayerName(${1:int playerId})"},
		{ "trigger": "GetUnitShareMaskForPlayer(int playerId,int otherPlayerId)", "contents": "GetUnitShareMaskForPlayer(${1:int playerId},${2:int otherPlayerId})"},
		{ "trigger": "IsHeroSharedWithPlayerID(int playerId,int otherPlayerId)", "contents": "IsHeroSharedWithPlayerID(${1:int playerId},${2:int otherPlayerId})"},
		{ "trigger": "AreUnitsSharedWithPlayerID(int playerId,int otherPlayerId)", "contents": "AreUnitsSharedWithPlayerID(${1:int playerId},${2:int otherPlayerId})"},
		{ "trigger": "IsDisableHelpSetForPlayerID(int playerId,int otherPlayerId)", "contents": "IsDisableHelpSetForPlayerID(${1:int playerId},${2:int otherPlayerId})"},
		{ "trigger": "SetUnitShareMaskForPlayer(int unKnown,int unKnown , int unKnown , bool unKnown)", "contents": "SetUnitShareMaskForPlayer(${1:int unKnown},${2:int unKnown},${3:int unKnown},${4:bool unKnown})"},
		{ "trigger": "GetNumCouriersForTeam(int team)", "contents": "GetNumCouriersForTeam(${1:int team})"},
		{ "trigger": "GetNthCourierForTeam(int index,int team)", "contents": "GetNthCourierForTeam(${1:int index},${2:int team})"},
		{ "trigger": "SetBuybackCooldownTime(int playerId,float cooldown)", "contents": "SetBuybackCooldownTime(${1:int playerId},${2:float cooldown})"},
		{ "trigger": "SetBuybackGoldLimitTime(int playerId,float buybackGold)", "contents": "SetBuybackGoldLimitTime(${1:int playerId},${2:float buybackGold})"},
		{ "trigger": "ResetBuybackCostTime(int playerId)", "contents": "ResetBuybackCostTime(${1:int playerId})"},
		{ "trigger": "ReplaceHeroWith(int playerId,string heroName , int gold , int exp)", "contents": "ReplaceHeroWith(${1:int playerId},${2:string heroName},${3:int gold},${4:int exp})"},
		{ "trigger": "SetCustomBuybackCost(int playerId,int cost)", "contents": "SetCustomBuybackCost(${1:int playerId},${2:int cost})"},
		{ "trigger": "SetCustomBuybackCooldown(int playerId,float cooldown)", "contents": "SetCustomBuybackCooldown(${1:int playerId},${2:float cooldown})"},
		{ "trigger": "GetCustomBuybackCost(int playerId)", "contents": "GetCustomBuybackCost(${1:int playerId})"},
		{ "trigger": "GetCustomBuybackCooldown(int playerId)", "contents": "GetCustomBuybackCooldown(${1:int playerId})"},
		{ "trigger": "SetCameraTarget(int playerId,hscript target)", "contents": "SetCameraTarget(${1:int playerId},${2:hscript target})"},
		{ "trigger": "GetEventPointsForPlayerID(int playerId)", "contents": "GetEventPointsForPlayerID(${1:int playerId})"},
		{ "trigger": "GetEventPremiumPointsGranted(int playerId)", "contents": "GetEventPremiumPointsGranted(${1:int playerId})"},
		{ "trigger": "GetEventRankGranted(int playerId)", "contents": "GetEventRankGranted(${1:int playerId})"},


		{ "trigger": "CreateTrackingProjectile(hscript projectile)", "contents": "CreateTrackingProjectile(${1:hscript projectile})"},
		{ "trigger": "CreateLinearProjectile(hscript projectile)", "contents": "CreateLinearProjectile(${1:hscript projectile})"},
		{ "trigger": "DestroyLinearProjectile(int projectile)", "contents": "DestroyLinearProjectile(${1:int projectile})"},
		{ "trigger": "ProjectileDodge(hscript projectile)", "contents": "ProjectileDodge(${1:hscript projectile})"},


		{ "trigger": "BeginThink(string thinkName,function func , float intervalInSeconds)", "contents": "BeginThink(${1:string thinkName},${2:function func},${3:float intervalInSeconds})"},
		{ "trigger": "SetContextThink(string thinkName,function func , float intervalInSeconds)", "contents": "SetContextThink(${1:string thinkName},${2:function func},${3:float intervalInSeconds})"},
		{ "trigger": "EndThink(string thinkName)", "contents": "EndThink(${1:string thinkName})"},
		{ "trigger": "SetAlwaysShowPlayerInventory(bool alwaysShow)", "contents": "SetAlwaysShowPlayerInventory(${1:bool alwaysShow})"},
		{ "trigger": "SetGoldSoundDisabled(bool playSound)", "contents": "SetGoldSoundDisabled(${1:bool playSound})"},
		{ "trigger": "SetRecommendedItemsDisabled(bool disableRecItems)", "contents": "SetRecommendedItemsDisabled(${1:bool disableRecItems})"},
		{ "trigger": "SetCameraDistanceOverride(float cameraDistance)", "contents": "SetCameraDistanceOverride(${1:float cameraDistance})"},
		{ "trigger": "SetOverrideSelectionEntity(Unit unit)", "contents": "SetOverrideSelectionEntity(${1:Unit unit})"},
		{ "trigger": "SetRemoveIllusionsOnDeath(bool removeIllusions)", "contents": "SetRemoveIllusionsOnDeath(${1:bool removeIllusions})"},
		{ "trigger": "ClientLoadGridNav()", "contents": "ClientLoadGridNav()"},
		{ "trigger": "SetFogOfWarDisabled(bool enabled)", "contents": "SetFogOfWarDisabled(${1:bool enabled})"},
		{ "trigger": "SetCustomBuybackCostEnabled(bool enabled)", "contents": "SetCustomBuybackCostEnabled(${1:bool enabled})"},
		{ "trigger": "SetCustomBuybackCooldownEnabled(bool enabled)", "contents": "SetCustomBuybackCooldownEnabled(${1:bool enabled})"},
		{ "trigger": "SetTopBarTeamValuesOverride(bool enabled)", "contents": "SetTopBarTeamValuesOverride(${1:bool enabled})"},
		{ "trigger": "SetTopBarTeamValuesVisible(bool visible)", "contents": "SetTopBarTeamValuesVisible(${1:bool visible})"},
		{ "trigger": "SetTopBarTeamValue(int team,int value)", "contents": "SetTopBarTeamValue(${1:int team},${2:int value})"},


		{ "trigger": "LookupAttachment(string attachmentName)", "contents": "LookupAttachment(${1:string attachmentName})"},
		{ "trigger": "GetAttachmentOrigin(int attachmentId)", "contents": "GetAttachmentOrigin(${1:int attachmentId})"},
		{ "trigger": "GetAttachmentAngles(int attachmentId)", "contents": "GetAttachmentAngles(${1:int attachmentId})"},
		{ "trigger": "IsSequenceFinished()", "contents": "IsSequenceFinished()"},
		{ "trigger": "SetBodygroup(int unKnown,int unKnown)", "contents": "SetBodygroup(${1:int unKnown},${2:int unKnown})"},
		{ "trigger": "SetModelScale(float scale,float fadeTimeSeconds)", "contents": "SetModelScale(${1:float scale},${2:float fadeTimeSeconds})"},
		{ "trigger": "GetModelScale()", "contents": "GetModelScale()"},



		{ "trigger": "GetCurrentScene()", "contents": "GetCurrentScene()"},
		{ "trigger": "GetSceneByIndex(int index)", "contents": "GetSceneByIndex(${1:int index})"},



		{ "trigger": "IsAncient()", "contents": "IsAncient()"},
		{ "trigger": "IsNeutralUnitType()", "contents": "IsNeutralUnitType()"},
		{ "trigger": "IsSummoned()", "contents": "IsSummoned()"},
		{ "trigger": "IsCreature()", "contents": "IsCreature()"},
		{ "trigger": "IsHero()", "contents": "IsHero()"},
		{ "trigger": "IsRealHero()", "contents": "IsRealHero()"},
		{ "trigger": "IsTower()", "contents": "IsTower()"},
		{ "trigger": "IsAlive()", "contents": "IsAlive()"},
		{ "trigger": "IsMechanical()", "contents": "IsMechanical()"},
		{ "trigger": "IsPhantom()", "contents": "IsPhantom()"},
		{ "trigger": "SetInitialGoalEntity(Entity goalEntity)", "contents": "SetInitialGoalEntity(${1:Entity goalEntity})"},
		{ "trigger": "GetInitialGoalEntity()", "contents": "GetInitialGoalEntity()"},
		{ "trigger": "SetMustReachEachGoalEntity(bool mustReach)", "contents": "SetMustReachEachGoalEntity(${1:bool mustReach})"},
		{ "trigger": "GetMustReachEachGoalEntity()", "contents": "GetMustReachEachGoalEntity()"},
		{ "trigger": "AddNewModifier(Unit caster,Ability optionalSrcAbility , string modifierName , table modifierData)", "contents": "AddNewModifier(${1:Unit caster},${2:Ability optionalSrcAbility},${3:string modifierName},${4:table modifierData})"},
		{ "trigger": "HasModifier(string modifierName)", "contents": "HasModifier(${1:string modifierName})"},
		{ "trigger": "RemoveModifierByName(string modifierName)", "contents": "RemoveModifierByName(${1:string modifierName})"},
		{ "trigger": "RemoveModifierByNameAndCaster(string name,Unit caster)", "contents": "RemoveModifierByNameAndCaster(${1:string name},${2:Unit caster})"},
		{ "trigger": "AddItem(Item itemName)", "contents": "AddItem(${1:Item itemName})"},
		{ "trigger": "AddAbility(string abilityName)", "contents": "AddAbility(${1:string abilityName})"},
		{ "trigger": "RemoveAbility(string abilityName)", "contents": "RemoveAbility(${1:string abilityName})"},
		{ "trigger": "HasAbility(string abilityName)", "contents": "HasAbility(${1:string abilityName})"},
		{ "trigger": "HasItemInInventory(string itemName)", "contents": "HasItemInInventory(${1:string itemName})"},
		{ "trigger": "FindAbilityByName(string abilityName)", "contents": "FindAbilityByName(${1:string abilityName})"},
		{ "trigger": "GetGoldBounty()", "contents": "GetGoldBounty()"},
		{ "trigger": "SetDeathXP(int xpBounty)", "contents": "SetDeathXP(${1:int xpBounty})"},
		{ "trigger": "GetDeathXP()", "contents": "GetDeathXP()"},
		{ "trigger": "GetUnitName()", "contents": "GetUnitName()"},
		{ "trigger": "GetTeamNumber()", "contents": "GetTeamNumber()"},
		{ "trigger": "GetPlayerOwner()", "contents": "GetPlayerOwner()"},
		{ "trigger": "SetMaximumGoldBounty(int goldBounty)", "contents": "SetMaximumGoldBounty(${1:int goldBounty})"},
		{ "trigger": "SetMinimumGoldBounty(int goldBounty)", "contents": "SetMinimumGoldBounty(${1:int goldBounty})"},
		{ "trigger": "GetTotalPurchasedUpgradeGoldCost()", "contents": "GetTotalPurchasedUpgradeGoldCost()"},
		{ "trigger": "ForceKill(bool playAegisLines)", "contents": "ForceKill(${1:bool playAegisLines})"},
		{ "trigger": "GetBaseDamageMin()", "contents": "GetBaseDamageMin()"},
		{ "trigger": "GetBaseDamageMax()", "contents": "GetBaseDamageMax()"},
		{ "trigger": "Heal(int amount,Unit source)", "contents": "Heal(${1:int amount},${2:Unit source})"},
		{ "trigger": "GetMaxHealth()", "contents": "GetMaxHealth()"},
		{ "trigger": "GetHealthPercent()", "contents": "GetHealthPercent()"},
		{ "trigger": "SetMana(float mana)", "contents": "SetMana(${1:float mana})"},
		{ "trigger": "GetMaxMana()", "contents": "GetMaxMana()"},
		{ "trigger": "RespawnUnit()", "contents": "RespawnUnit()"},
		{ "trigger": "GetLevel()", "contents": "GetLevel()"},
		{ "trigger": "GetItemInSlot(int slotId)", "contents": "GetItemInSlot(${1:int slotId})"},
		{ "trigger": "SetOriginalModel(string originalModel)", "contents": "SetOriginalModel(${1:string originalModel})"},
		{ "trigger": "AddNoDraw()", "contents": "AddNoDraw()"},
		{ "trigger": "RemoveNoDraw()", "contents": "RemoveNoDraw()"},
		{ "trigger": "GetPlayerOwnerID()", "contents": "GetPlayerOwnerID()"},
		{ "trigger": "IsRangedAttacker()", "contents": "IsRangedAttacker()"},
		{ "trigger": "GetCurrentActiveAbility()", "contents": "GetCurrentActiveAbility()"},
		{ "trigger": "MoveToPosition(vector position)", "contents": "MoveToPosition(${1:vector position})"},
		{ "trigger": "MoveToPositionAggressive(vector position)", "contents": "MoveToPositionAggressive(${1:vector position})"},
		{ "trigger": "MoveToNPC(hscript target)", "contents": "MoveToNPC(${1:hscript target})"},
		{ "trigger": "MoveToTargetToAttack(hscript target)", "contents": "MoveToTargetToAttack(${1:hscript target})"},
		{ "trigger": "Hold()", "contents": "Hold()"},
		{ "trigger": "Stop()", "contents": "Stop()"},
		{ "trigger": "CastAbilityToggle(hscript ability,int unKnown)", "contents": "CastAbilityToggle(${1:hscript ability},${2:int unKnown})"},
		{ "trigger": "CastAbilityImmediately(hscript int,int unKnown)", "contents": "CastAbilityImmediately(${1:hscript int},${2:int unKnown})"},
		{ "trigger": "CastAbilityOnPosition(vector vector,hscript ability , int unKnown)", "contents": "CastAbilityOnPosition(${1:vector vector},${2:hscript ability},${3:int unKnown})"},
		{ "trigger": "CastAbilityOnTarget(Unit target,Ability ability , int unKnown)", "contents": "CastAbilityOnTarget(${1:Unit target},${2:Ability ability},${3:int unKnown})"},
		{ "trigger": "CastAbilityNoTarget(Ability ability,int unKnown)", "contents": "CastAbilityNoTarget(${1:Ability ability},${2:int unKnown})"},
		{ "trigger": "DropItemAtPosition(vector vector,hscript item)", "contents": "DropItemAtPosition(${1:vector vector},${2:hscript item})"},
		{ "trigger": "MoveToNPCToGiveItem(hscript target,hscript item)", "contents": "MoveToNPCToGiveItem(${1:hscript target},${2:hscript item})"},
		{ "trigger": "PickupDroppedItem(hscript item)", "contents": "PickupDroppedItem(${1:hscript item})"},
		{ "trigger": "PickupRune(hscript rune)", "contents": "PickupRune(${1:hscript rune})"},
		{ "trigger": "DropItemAtPositionImmediate(hscript item,vector position)", "contents": "DropItemAtPositionImmediate(${1:hscript item},${2:vector position})"},
		{ "trigger": "SetAdditionalBattleMusicWeight(float weight)", "contents": "SetAdditionalBattleMusicWeight(${1:float weight})"},
		{ "trigger": "GetAdditionalBattleMusicWeight()", "contents": "GetAdditionalBattleMusicWeight()"},


		{ "trigger": "GetInvulnCount()", "contents": "GetInvulnCount()"},
		{ "trigger": "SetInvulnCount(int count)", "contents": "SetInvulnCount(${1:int count})"},



		{ "trigger": "CreatureLevelUp(int numLevels)", "contents": "CreatureLevelUp(${1:int numLevels})"},
		{ "trigger": "AddItemDrop(PhysicalItem item)", "contents": "AddItemDrop(${1:PhysicalItem item})"},
		{ "trigger": "SetChampion(bool champion)", "contents": "SetChampion(${1:bool champion})"},
		{ "trigger": "IsChampion()", "contents": "IsChampion()"},
		{ "trigger": "SetHPGain(int hpPerLevel)", "contents": "SetHPGain(${1:int hpPerLevel})"},
		{ "trigger": "SetManaGain(int manaPerLevel)", "contents": "SetManaGain(${1:int manaPerLevel})"},
		{ "trigger": "SetHPRegenGain(float regenPerLevel)", "contents": "SetHPRegenGain(${1:float regenPerLevel})"},
		{ "trigger": "SetManaRegenGain(float manaRegenGain)", "contents": "SetManaRegenGain(${1:float manaRegenGain})"},
		{ "trigger": "SetDamageGain(int damageGain)", "contents": "SetDamageGain(${1:int damageGain})"},
		{ "trigger": "SetArmorGain(float armorGain)", "contents": "SetArmorGain(${1:float armorGain})"},
		{ "trigger": "SetMagicResistanceGain(float magicResistGain)", "contents": "SetMagicResistanceGain(${1:float magicResistGain})"},
		{ "trigger": "SetDisableResistanceGain(float disableResist)", "contents": "SetDisableResistanceGain(${1:float disableResist})"},
		{ "trigger": "SetAttackTimeGain(float attackSpeedGain)", "contents": "SetAttackTimeGain(${1:float attackSpeedGain})"},
		{ "trigger": "SetMoveSpeedGain(int moveSpeedGain)", "contents": "SetMoveSpeedGain(${1:int moveSpeedGain})"},
		{ "trigger": "SetBountyGain(int bountyGain)", "contents": "SetBountyGain(${1:int bountyGain})"},
		{ "trigger": "SetXPGain(int xpGain)", "contents": "SetXPGain(${1:int xpGain})"},


		{ "trigger": "IsHornAlive()", "contents": "IsHornAlive()"},
		{ "trigger": "IsTailAlive()", "contents": "IsTailAlive()"},
		{ "trigger": "GetHorn()", "contents": "GetHorn()"},
		{ "trigger": "GetTail()", "contents": "GetTail()"},


		{ "trigger": "ModifyGold(int goldAmmount,bool reliable , int unKnown)", "contents": "ModifyGold(${1:int goldAmmount},${2:bool reliable},${3:int unKnown})"},
		{ "trigger": "GetGold()", "contents": "GetGold()"},
		{ "trigger": "SetGold(int goldAmmount,bool reliable)", "contents": "SetGold(${1:int goldAmmount},${2:bool reliable})"},
		{ "trigger": "GetCurrentXP()", "contents": "GetCurrentXP()"},
		{ "trigger": "GetPlayerID()", "contents": "GetPlayerID()"},
		{ "trigger": "RespawnHero(bool buyback,bool unKnown , bool unKnown)", "contents": "RespawnHero(${1:bool buyback},${2:bool unKnown},${3:bool unKnown})"},
		{ "trigger": "HeroLevelUp(bool unKnown)", "contents": "HeroLevelUp(${1:bool unKnown})"},
		{ "trigger": "GetAbilityPoints()", "contents": "GetAbilityPoints()"},
		{ "trigger": "SetAbilityPoints(int points)", "contents": "SetAbilityPoints(${1:int points})"},
		{ "trigger": "SetCustomDeathXP(int points)", "contents": "SetCustomDeathXP(${1:int points})"},



		{ "trigger": "GetAbilityName()", "contents": "GetAbilityName()"},
		{ "trigger": "GetSpecialValueFor(string specialValue)", "contents": "GetSpecialValueFor(${1:string specialValue})"},
		{ "trigger": "GetCastRange()", "contents": "GetCastRange()"},
		{ "trigger": "IsFullyCastable()", "contents": "IsFullyCastable()"},
		{ "trigger": "IsChanneling()", "contents": "IsChanneling()"},
		{ "trigger": "IsInAbilityPhase()", "contents": "IsInAbilityPhase()"},
		{ "trigger": "GetCooldown(int level)", "contents": "GetCooldown(${1:int level})"},
		{ "trigger": "EndCooldown()", "contents": "EndCooldown()"},
		{ "trigger": "MarkAbilityButtonDirty()", "contents": "MarkAbilityButtonDirty()"},
		{ "trigger": "SetLevel(int abilityLevel)", "contents": "SetLevel(${1:int abilityLevel})"},


		{ "trigger": "SetPlaybackRate(float playbackrate)", "contents": "SetPlaybackRate(${1:float playbackrate})"},


		{ "trigger": "SetPlaybackRate(float playbackrate)", "contents": "SetPlaybackRate(${1:float playbackrate})"},


		{ "trigger": "SetPlaybackRate(float playbackrate)", "contents": "SetPlaybackRate(${1:float playbackrate})"},


		{ "trigger": "SetPlaybackRate(float playbackrate)", "contents": "SetPlaybackRate(${1:float playbackrate})"},


		{ "trigger": "GetCastCount()", "contents": "GetCastCount()"},


		{ "trigger": "SetTextReplaceValue(int questText,int value)", "contents": "SetTextReplaceValue(${1:int questText},${2:int value})"},
		{ "trigger": "CompleteQuest()", "contents": "CompleteQuest()"},
		{ "trigger": "SetTextReplaceString(string replace)", "contents": "SetTextReplaceString(${1:string replace})"},
		{ "trigger": "AddSubquest(hscript subquest)", "contents": "AddSubquest(${1:hscript subquest})"},
		{ "trigger": "RemoveSubquest(hscript subquest)", "contents": "RemoveSubquest(${1:hscript subquest})"},
		{ "trigger": "GetSubquestByName(string unKnown)", "contents": "GetSubquestByName(${1:string unKnown})"},
		{ "trigger": "GetSubquest(int unKnown)", "contents": "GetSubquest(${1:int unKnown})"},


		{ "trigger": "SetTextReplaceValue(int unKnown,int unKnown)", "contents": "SetTextReplaceValue(${1:int unKnown},${2:int unKnown})"},
		{ "trigger": "CompleteSubquest()", "contents": "CompleteSubquest()"},
		{ "trigger": "SetTextReplaceString(string text)", "contents": "SetTextReplaceString(${1:string text})"},


		{ "trigger": "SetPurchaseTime(float purchaseTime)", "contents": "SetPurchaseTime(${1:float purchaseTime})"},
		{ "trigger": "GetPurchaseTime()", "contents": "GetPurchaseTime()"},
		{ "trigger": "SetPurchaser(Unit unit)", "contents": "SetPurchaser(${1:Unit unit})"},
		{ "trigger": "GetInitialCharges()", "contents": "GetInitialCharges()"},
		{ "trigger": "GetCurrentCharges()", "contents": "GetCurrentCharges()"},
		{ "trigger": "SetCurrentCharges(int charges)", "contents": "SetCurrentCharges(${1:int charges})"},
		{ "trigger": "GetPurchaser()", "contents": "GetPurchaser()"},
		{ "trigger": "Think()", "contents": "Think()"},
		{ "trigger": "IsPermanent()", "contents": "IsPermanent()"},
		{ "trigger": "StacksWithOtherOwners()", "contents": "StacksWithOtherOwners()"},
		{ "trigger": "SetStacksWithOtherOwners(bool stacks)", "contents": "SetStacksWithOtherOwners(${1:bool stacks})"},
		{ "trigger": "GetShareability()", "contents": "GetShareability()"},
		{ "trigger": "GetCost()", "contents": "GetCost()"},
		{ "trigger": "LaunchLoot(bool bool,float float , float float , vector vector)", "contents": "LaunchLoot(${1:bool bool},${2:float float},${3:float float},${4:vector vector})"},
		{ "trigger": "GetContainer()", "contents": "GetContainer()"},


		{ "trigger": "ApplyDataDrivenModifier(hscript hscript,hscript hscript , string string , hscript hscript)", "contents": "ApplyDataDrivenModifier(${1:hscript hscript},${2:hscript hscript},${3:string string},${4:hscript hscript})"},


		{ "trigger": "GetCreationTime()", "contents": "GetCreationTime()"},
		{ "trigger": "GetContainedItem()", "contents": "GetContainedItem()"},
		{ "trigger": "SetContainedItem(Item item)", "contents": "SetContainedItem(${1:Item item})"},


		{ "trigger": "GetPlayerID()", "contents": "GetPlayerID()"},
		{ "trigger": "GetAssignedHero()", "contents": "GetAssignedHero()"},
		{ "trigger": "SetKillCamUnit(hscript unit)", "contents": "SetKillCamUnit(${1:hscript unit})"},
		{ "trigger": "MakeRandomHeroSelection()", "contents": "MakeRandomHeroSelection()"},
		{ "trigger": "SetMusicStatus(int unKnown,float statu)", "contents": "SetMusicStatus(${1:int unKnown},${2:float statu})"},



		{ "trigger": "GetFov()", "contents": "GetFov()"},
		{ "trigger": "SetFov(int degrees,float rate)", "contents": "SetFov(${1:int degrees},${2:float rate})"},
		{ "trigger": "ScreenFade(int int,int int , int int , int int , float float , float float , int int)", "contents": "ScreenFade(${1:int int},${2:int int},${3:int int},${4:int int},${5:float float},${6:float float},${7:int int})"},
		{ "trigger": "Enable()", "contents": "Enable()"},


		{ "trigger": "EstimateLength()", "contents": "EstimateLength()"},
		{ "trigger": "IsPlayingBack()", "contents": "IsPlayingBack()"},
		{ "trigger": "IsPaused()", "contents": "IsPaused()"},
		{ "trigger": "Start(Entity activator)", "contents": "Start(${1:Entity activator})"},
		{ "trigger": "Cancel()", "contents": "Cancel()"},
		{ "trigger": "AddBroadcastTeamTarget(int team)", "contents": "AddBroadcastTeamTarget(${1:int team})"},
		{ "trigger": "RemoveBroadcastTeamTarget(int entityIndex)", "contents": "RemoveBroadcastTeamTarget(${1:int entityIndex})"},
		{ "trigger": "FindNamedEntity(string entityReference)", "contents": "FindNamedEntity(${1:string entityReference})"},
		{ "trigger": "LoadSceneFromString(string sceneName,string vcdFile)", "contents": "LoadSceneFromString(${1:string sceneName},${2:string vcdFile})"},
		{ "trigger": "FindCamera()", "contents": "FindCamera()"},


		{ "trigger": "SetLinearAttenuation(float attenuation)", "contents": "SetLinearAttenuation(${1:float attenuation})"},
		{ "trigger": "SetQuadraticAttenuation(float attenuation)", "contents": "SetQuadraticAttenuation(${1:float attenuation})"},
		{ "trigger": "SetNearRange(float nearRange)", "contents": "SetNearRange(${1:float nearRange})"},
		{ "trigger": "SetFarRange(float farRange)", "contents": "SetFarRange(${1:float farRange})"},
		{ "trigger": "SetVolumetrics(bool on,float intensity , float noise , int planes , float planeOffset)", "contents": "SetVolumetrics(${1:bool on},${2:float intensity},${3:float noise},${4:int planes},${5:float planeOffset})"},


		{ "trigger": "SpawnEntity()", "contents": "SpawnEntity()"},
		{ "trigger": "SpawnEntityAtEntityOrigin(Entity entity)", "contents": "SpawnEntityAtEntityOrigin(${1:Entity entity})"},
		{ "trigger": "SpawnEntityAtNamedEntityOrigin(string entityName)", "contents": "SpawnEntityAtNamedEntityOrigin(${1:string entityName})"},
		{ "trigger": "SpawnEntityAtLocation(vector location,vector orientation)", "contents": "SpawnEntityAtLocation(${1:vector location},${2:vector orientation})"},


		{ "trigger": "StartVote(hscript vote)", "contents": "StartVote(${1:hscript vote})"},


		{ "trigger": "RandomInt(int min,int max)", "contents": "RandomInt(${1:int min},${2:int max})"},
		{ "trigger": "RandomFloat(float min,float max)", "contents": "RandomFloat(${1:float min},${2:float max})"},
		{ "trigger": "RandomVector(float distance)", "contents": "RandomVector(${1:float distance})"},
		{ "trigger": "RollPercentage(int percent)", "contents": "RollPercentage(${1:int percent})"},
		{ "trigger": "DoIncludeScript(string scriptName,hscript unKnown)", "contents": "DoIncludeScript(${1:string scriptName},${2:hscript unKnown})"},
		{ "trigger": "ShowMessage(string message)", "contents": "ShowMessage(${1:string message})"},
		{ "trigger": "GetMapName()", "contents": "GetMapName()"},
		{ "trigger": "SendToConsole(string conCommand)", "contents": "SendToConsole(${1:string conCommand})"},
		{ "trigger": "SendToServerConsole(string conCommand)", "contents": "SendToServerConsole(${1:string conCommand})"},
		{ "trigger": "PrintLinkedConsoleMessage(string message,string conCommand)", "contents": "PrintLinkedConsoleMessage(${1:string message},${2:string conCommand})"},
		{ "trigger": "InitLogFile(string fileName,string log)", "contents": "InitLogFile(${1:string fileName},${2:string log})"},
		{ "trigger": "AppendToLogFile(string message,string log)", "contents": "AppendToLogFile(${1:string message},${2:string log})"},
		{ "trigger": "GetWorldMinX()", "contents": "GetWorldMinX()"},
		{ "trigger": "GetWorldMinY()", "contents": "GetWorldMinY()"},
		{ "trigger": "GetWorldMaxX()", "contents": "GetWorldMaxX()"},
		{ "trigger": "GetWorldMaxY()", "contents": "GetWorldMaxY()"},
		{ "trigger": "Time()", "contents": "Time()"},
		{ "trigger": "GetSystemTime()", "contents": "GetSystemTime()"},
		{ "trigger": "GetSystemDate()", "contents": "GetSystemDate()"},
		{ "trigger": "UTIL_RemoveImmediate(Entity entity)", "contents": "UTIL_RemoveImmediate(${1:Entity entity})"},
		{ "trigger": "DoEntFire(string target,string action , string value , float delay , Entity activator , hscript unKnown)", "contents": "DoEntFire(${1:string target},${2:string action},${3:string value},${4:float delay},${5:Entity activator},${6:hscript unKnown})"},
		{ "trigger": "EntFireByHandle(Entity entity,string target , string value , float delay , Entity activator , hscript unKnown)", "contents": "EntFireByHandle(${1:Entity entity},${2:string target},${3:string value},${4:float delay},${5:Entity activator},${6:hscript unKnown})"},
		{ "trigger": "IsValidEntity(Entity entity)", "contents": "IsValidEntity(${1:Entity entity})"},
		{ "trigger": "IsMarkedForDeletion(Entity entity)", "contents": "IsMarkedForDeletion(${1:Entity entity})"},
		{ "trigger": "DoUniqueString(string uniqueString)", "contents": "DoUniqueString(${1:string uniqueString})"},
		{ "trigger": "ListenToGameEvent(string eventName,function listener , table luaOwner)", "contents": "ListenToGameEvent(${1:string eventName},${2:function listener},${3:table luaOwner})"},
		{ "trigger": "FireGameEvent(string eventName,table params)", "contents": "FireGameEvent(${1:string eventName},${2:table params})"},
		{ "trigger": "FireGameEventLocal(string eventName,table params)", "contents": "FireGameEventLocal(${1:string eventName},${2:table params})"},
		{ "trigger": "PauseGame(bool pause)", "contents": "PauseGame(${1:bool pause})"},
		{ "trigger": "EntIndexToHScript(int entIndex)", "contents": "EntIndexToHScript(${1:int entIndex})"},
		{ "trigger": "PlayerInstanceFromIndex(int playerIndex)", "contents": "PlayerInstanceFromIndex(${1:int playerIndex})"},
		{ "trigger": "GetListenServerHost()", "contents": "GetListenServerHost()"},
		{ "trigger": "ScreenShake(vector center,float aplitude , float frequency , float duration , float radius , int shakeStatus , bool airShake)", "contents": "ScreenShake(${1:vector center},${2:float aplitude},${3:float frequency},${4:float duration},${5:float radius},${6:int shakeStatus},${7:bool airShake})"},
		{ "trigger": "SpawnEntityFromTable(string className,table spawnTable , Entity owner , function spawnCallback , hscript unKnown)", "contents": "SpawnEntityFromTable(${1:string className},${2:table spawnTable},${3:Entity owner},${4:function spawnCallback},${5:hscript unKnown})"},
		{ "trigger": "SpawnEntityGroupFromTable(hscript hscript,bool bool , hscript unKnown)", "contents": "SpawnEntityGroupFromTable(${1:hscript hscript},${2:bool bool},${3:hscript unKnown})"},
		{ "trigger": "PrecacheEntityFromTable(table keyValues)", "contents": "PrecacheEntityFromTable(${1:table keyValues})"},
		{ "trigger": "VectorToAngles(vector vec)", "contents": "VectorToAngles(${1:vector vec})"},
		{ "trigger": "RotatePosition(vector vec,qangle angle , vector origin)", "contents": "RotatePosition(${1:vector vec},${2:qangle angle},${3:vector origin})"},
		{ "trigger": "RotateOrientation(qangle an1,qangle ang2)", "contents": "RotateOrientation(${1:qangle an1},${2:qangle ang2})"},
		{ "trigger": "RotationDelta(qangle ang1,qangle ang2)", "contents": "RotationDelta(${1:qangle ang1},${2:qangle ang2})"},
		{ "trigger": "EmitSoundOn(string soundName,Entity entity)", "contents": "EmitSoundOn(${1:string soundName},${2:Entity entity})"},
		{ "trigger": "EmitSoundOnClient(string soundName,Playerlistening Player)", "contents": "EmitSoundOnClient(${1:string soundName},${2:Playerlistening Player})"},
		{ "trigger": "EmitGlobalSound(string soundName)", "contents": "EmitGlobalSound(${1:string soundName})"},
		{ "trigger": "StopSoundOn(string unKnown,hscript unKnown)", "contents": "StopSoundOn(${1:string unKnown},${2:hscript unKnown})"},
		{ "trigger": "GetPhysVelocity(Entity object)", "contents": "GetPhysVelocity(${1:Entity object})"},
		{ "trigger": "GetPhysAngularVelocity(Entity object)", "contents": "GetPhysAngularVelocity(${1:Entity object})"},
		{ "trigger": "Say(Player from,string text , bool team)", "contents": "Say(${1:Player from},${2:string text},${3:bool team})"},
		{ "trigger": "AddThinkToEnt(Entity entity,string functionName)", "contents": "AddThinkToEnt(${1:Entity entity},${2:string functionName})"},
		{ "trigger": "LoadKeyValues(string file)", "contents": "LoadKeyValues(${1:string file})"},
		{ "trigger": "LoadKeyValuesFromString(string kvString)", "contents": "LoadKeyValuesFromString(${1:string kvString})"},
		{ "trigger": "DebugDrawScreenTextLine(float x,float y , int lineOffset , string text , int r , int g , int b , int a , float duration)", "contents": "DebugDrawScreenTextLine(${1:float x},${2:float y},${3:int lineOffset},${4:string text},${5:int r},${6:int g},${7:int b},${8:int a},${9:float duration})"},
		{ "trigger": "DebugDrawText(vector origin,string text , bool useViewCheck , float duration)", "contents": "DebugDrawText(${1:vector origin},${2:string text},${3:bool useViewCheck},${4:float duration})"},
		{ "trigger": "DebugDrawBox(vector origin,vector min , vector max , int r , int g , int b , int a , float duration)", "contents": "DebugDrawBox(${1:vector origin},${2:vector min},${3:vector max},${4:int r},${5:int g},${6:int b},${7:int a},${8:float duration})"},
		{ "trigger": "DebugDrawLine(vector start,vector end , int r , int g , int b , bool zTest , float duration)", "contents": "DebugDrawLine(${1:vector start},${2:vector end},${3:int r},${4:int g},${5:int b},${6:bool zTest},${7:float duration})"},
		{ "trigger": "DebugDrawCircle(vector center,vector radius , vector rgb , float a , bool ztest , float duration)", "contents": "DebugDrawCircle(${1:vector center},${2:vector radius},${3:vector rgb},${4:float a},${5:bool ztest},${6:float duration})"},
		{ "trigger": "DebugDrawLine_vCol(vector start,vector end , vector rgb , bool ztest , float duration)", "contents": "DebugDrawLine_vCol(${1:vector start},${2:vector end},${3:vector rgb},${4:bool ztest},${5:float duration})"},
		{ "trigger": "DebugDrawBoxDirection(vector center,vector min , vector max , vector forward , vector rgb , float a , float duration)", "contents": "DebugDrawBoxDirection(${1:vector center},${2:vector min},${3:vector max},${4:vector forward},${5:vector rgb},${6:float a},${7:float duration})"},
		{ "trigger": "DebugDrawClear()", "contents": "DebugDrawClear()"},
		{ "trigger": "GetFrameCount()", "contents": "GetFrameCount()"},
		{ "trigger": "IsDedicatedServer()", "contents": "IsDedicatedServer()"},
		{ "trigger": "CreateUnitByName(string name,vector origin , bool findOpenSpot , hscript hscript , int team)", "contents": "CreateUnitByName(${1:string name},${2:vector origin},${3:bool findOpenSpot},${4:hscript hscript},${5:int team})"},
		{ "trigger": "CreateHeroForPlayer(string heroName,PlayerowningPlayer )", "contents": "CreateHeroForPlayer(${1:string heroName},${2:PlayerowningPlayer })"},
		{ "trigger": "CreateItem(string itemName,Unit owningUnit , Unit unitToGetOrigin)", "contents": "CreateItem(${1:string itemName},${2:Unit owningUnit},${3:Unit unitToGetOrigin})"},
		{ "trigger": "vector(position )", "contents": "vector(${1:position })"},
		{ "trigger": "FindClearSpaceForUnit(Unit npc,vector origin , bool )", "contents": "FindClearSpaceForUnit(${1:Unit npc},${2:vector origin},${3:bool })"},
		{ "trigger": "FindUnitsInRadius(int targetTeam,vector position , Entity ent , float radius , int targetTypeTeam , int targetTypeUnit , int x , int y , bool unKnown)", "contents": "FindUnitsInRadius(${1:int targetTeam},${2:vector position},${3:Entity ent},${4:float radius},${5:int targetTypeTeam},${6:int targetTypeUnit},${7:int x},${8:int y},${9:bool unKnown})"},
		{ "trigger": "PrecacheUnit(string unitName)", "contents": "PrecacheUnit(${1:string unitName})"},
		{ "trigger": "GetFrostyPointsForRound(int playerId,int difficulty , int roundNumber)", "contents": "GetFrostyPointsForRound(${1:int playerId},${2:int difficulty},${3:int roundNumber})"},
		{ "trigger": "GetGoldFrostyPointsForRound(int playerId,int difficulty , int roundNumber)", "contents": "GetGoldFrostyPointsForRound(${1:int playerId},${2:int difficulty},${3:int roundNumber})"},
		{ "trigger": "GetFrostyBoostAmount(int playerId,int )", "contents": "GetFrostyBoostAmount(${1:int playerId},${2:int })"},
		{ "trigger": "GetGoldFrostyBoostAmount(int int)", "contents": "GetGoldFrostyBoostAmount(${1:int int})"},
		{ "trigger": "SendFrostyPointsMessageToGC(table data)", "contents": "SendFrostyPointsMessageToGC(${1:table data})"},
		{ "trigger": "SendFrostivusTimeElapsedToGC()", "contents": "SendFrostivusTimeElapsedToGC()"},
		{ "trigger": "ExecuteOrderFromTable(table order)", "contents": "ExecuteOrderFromTable(${1:table order})"},
		{ "trigger": "PrecacheUnitByName(string unitname)", "contents": "PrecacheUnitByName(${1:unitName})"},


		{ "trigger": "szEntityClassName", "contents": "szEntityClassName = \"${1:gaeModeName}\""},
		{ "trigger": "szNativeClassName", "contents": "szEntityClassName = \"${1:dota_base_game_mode}\""},
		{ "trigger": "__index", "contents": "__index = ${1:gameModeArg}"},



































		{ "trigger": "粒子管理器_CreateParticle(string particleName,int ParticleAttach , Entity owningEntity , Player viewingPlayer)", "contents": "${1:ParticleManager}:CreateParticle(${2:string particleName},${3:int ParticleAttach},${4:Entity owningEntity},${5:Player viewingPlayer})"},
		{ "trigger": "粒子管理器_CreateParticleForPlayer(string particleName,int ParticleAttach , Entity owningEntity , Player viewingPlayer)", "contents": "${1:ParticleManager}:CreateParticleForPlayer(${2:string particleName},${3:int ParticleAttach},${4:Entity owningEntity},${5:Player viewingPlayer})"},
		{ "trigger": "粒子管理器_SetParticleControl(int particleId,int controlIndex , vector controlData)", "contents": "${1:ParticleManager}:SetParticleControl(${2:int particleId},${3:int controlIndex},${4:vector controlData})"},
		{ "trigger": "粒子管理器_ReleaseParticleIndex(int particleId)", "contents": "${1:ParticleManager}:ReleaseParticleIndex(${2:int particleId})"},


		{ "trigger": "游戏规则_State_Get()", "contents": "${1:GameRules}:State_Get()"},
		{ "trigger": "游戏规则_GetGameTime()", "contents": "${1:GameRules}:GetGameTime()"},
		{ "trigger": "游戏规则_GetGameModeEntity()", "contents": "${1:GameRules}:GetGameModeEntity()"},
		{ "trigger": "游戏规则_GetDifficulty()", "contents": "${1:GameRules}:GetDifficulty()"},
		{ "trigger": "游戏规则_GetCustomGameDifficulty()", "contents": "${1:GameRules}:GetCustomGameDifficulty()"},
		{ "trigger": "游戏规则_Defeated()", "contents": "${1:GameRules}:Defeated()"},
		{ "trigger": "游戏规则_ResetDefeated()", "contents": "${1:GameRules}:ResetDefeated()"},
		{ "trigger": "游戏规则_SetGameWinner(int team)", "contents": "${1:GameRules}:SetGameWinner(${2:int team})"},
		{ "trigger": "游戏规则_MakeTeamLose(int team)", "contents": "${1:GameRules}:MakeTeamLose(${2:int team})"},
		{ "trigger": "游戏规则_ResetMap(int unKnown)", "contents": "${1:GameRules}:ResetMap(${2:int unKnown})"},
		{ "trigger": "游戏规则_GetDroppedItem(int dropIndex)", "contents": "${1:GameRules}:GetDroppedItem(${2:int dropIndex})"},
		{ "trigger": "游戏规则_NumDroppedItems()", "contents": "${1:GameRules}:NumDroppedItems()"},
		{ "trigger": "游戏规则_SendCustomMessage(string stringText,int unKnown , int unKnown)", "contents": "${1:GameRules}:SendCustomMessage(${2:string stringText},${3:int unKnown},${4:int unKnown})"},
		{ "trigger": "游戏规则_SetHeroRespawnEnabled(bool canRespawn)", "contents": "${1:GameRules}:SetHeroRespawnEnabled(${2:bool canRespawn})"},
		{ "trigger": "游戏规则_Playtesting_UpdateCustomKeyValues()", "contents": "${1:GameRules}:Playtesting_UpdateCustomKeyValues()"},
		{ "trigger": "游戏规则_ResetToHeroSelection()", "contents": "${1:GameRules}:ResetToHeroSelection()"},
		{ "trigger": "游戏规则_SetTreeRegrowTime(float seconds)", "contents": "${1:GameRules}:SetTreeRegrowTime(${2:float seconds})"},
		{ "trigger": "游戏规则_SetHeroSelectionTime(float seconds)", "contents": "${1:GameRules}:SetHeroSelectionTime(${2:float seconds})"},
		{ "trigger": "游戏规则_SetPreGameTime(float seconds)", "contents": "${1:GameRules}:SetPreGameTime(${2:float seconds})"},
		{ "trigger": "游戏规则_SetPostGameTime(float seconds)", "contents": "${1:GameRules}:SetPostGameTime(${2:float seconds})"},
		{ "trigger": "游戏规则_SetRuneSpawnTime(float seconds)", "contents": "${1:GameRules}:SetRuneSpawnTime(${2:float seconds})"},
		{ "trigger": "游戏规则_SetSameHeroSelectionEnabled(bool enabled)", "contents": "${1:GameRules}:SetSameHeroSelectionEnabled(${2:bool enabled})"},
		{ "trigger": "游戏规则_SetUseUniversalShopMode(bool enabled)", "contents": "${1:GameRules}:SetUseUniversalShopMode(${2:bool enabled})"},
		{ "trigger": "游戏规则_SetTimeOfDay(float time)", "contents": "${1:GameRules}:SetTimeOfDay(${2:float time})"},
		{ "trigger": "游戏规则_SetOverlayHealthBarUnit(Unit unit,int style)", "contents": "${1:GameRules}:SetOverlayHealthBarUnit(${2:Unit unit},${3:int style})"},
		{ "trigger": "游戏规则_SetHeroMinimapIconSize(int iconSize)", "contents": "${1:GameRules}:SetHeroMinimapIconSize(${2:int iconSize})"},
		{ "trigger": "游戏规则_SetCreepMinimapIconScale(float creepScale)", "contents": "${1:GameRules}:SetCreepMinimapIconScale(${2:float creepScale})"},
		{ "trigger": "游戏规则_SetRuneMinimapIconScale(float runeScale)", "contents": "${1:GameRules}:SetRuneMinimapIconScale(${2:float runeScale})"},
		{ "trigger": "游戏规则_SetSafeToLeave(bool safeToLeave)", "contents": "${1:GameRules}:SetSafeToLeave(${2:bool safeToLeave})"},
		{ "trigger": "游戏规则_SetUseCustomHeroXPValues(bool unKnown)", "contents": "${1:GameRules}:SetUseCustomHeroXPValues(${2:bool unKnown})"},
		{ "trigger": "游戏规则_SetCustomGameDifficulty(int unKnown)", "contents": "${1:GameRules}:SetCustomGameDifficulty(${2:int unKnown})"},
		{ "trigger": "游戏规则_SetGoldTickTime(float unKnown)", "contents": "${1:GameRules}:SetGoldTickTime(${2:float unKnown})"},
		{ "trigger": "游戏规则_SetGoldPerTick(int unKnown)", "contents": "${1:GameRules}:SetGoldPerTick(${2:int unKnown})"},
		{ "trigger": "游戏规则_SetNianFightStartTime(float unKnown)", "contents": "${1:GameRules}:SetNianFightStartTime(${2:float unKnown})"},
		{ "trigger": "游戏规则_GetNianFightStartTime()", "contents": "${1:GameRules}:GetNianFightStartTime()"},
		{ "trigger": "游戏规则_GetMatchSignoutComplete()", "contents": "${1:GameRules}:GetMatchSignoutComplete()"},
		{ "trigger": "游戏规则_DidMatchSignoutTimeOut()", "contents": "${1:GameRules}:DidMatchSignoutTimeOut()"},
		{ "trigger": "游戏规则_GetNianTotalDamageTaken()", "contents": "${1:GameRules}:GetNianTotalDamageTaken()"},


		{ "trigger": "实体_First()", "contents": "${1:Entities}:First()"},
		{ "trigger": "实体_Next(Entity startFrom)", "contents": "${1:Entities}:Next(${2:Entity startFrom})"},
		{ "trigger": "实体_CreateByClassname(string className)", "contents": "${1:Entities}:CreateByClassname(${2:string className})"},
		{ "trigger": "实体_FindByClassname(Entity startFrom,string className)", "contents": "${1:Entities}:FindByClassname(${2:Entity startFrom},${3:string className})"},
		{ "trigger": "实体_FindAllByClassname(string className)", "contents": "${1:Entities}:FindAllByClassname(${2:string className})"},
		{ "trigger": "实体_FindByName(Entity startFrom,string entName)", "contents": "${1:Entities}:FindByName(${2:Entity startFrom},${3:string entName})"},
		{ "trigger": "实体_FindAllByName(string name)", "contents": "${1:Entities}:FindAllByName(${2:string name})"},
		{ "trigger": "实体_FindInSphere(Entity startFrom,vector origin , float radius)", "contents": "${1:Entities}:FindInSphere(${2:Entity startFrom},${3:vector origin},${4:float radius})"},
		{ "trigger": "实体_FindAllInSphere(vector origin,float radius)", "contents": "${1:Entities}:FindAllInSphere(${2:vector origin},${3:float radius})"},
		{ "trigger": "实体_FindByTarget(Entity startFrom,string targetName)", "contents": "${1:Entities}:FindByTarget(${2:Entity startFrom},${3:string targetName})"},
		{ "trigger": "实体_FindAllByTarget(string targetName)", "contents": "${1:Entities}:FindAllByTarget(${2:string targetName})"},
		{ "trigger": "实体_FindByModel(Entity startFrom,string modelName)", "contents": "${1:Entities}:FindByModel(${2:Entity startFrom},${3:string modelName})"},
		{ "trigger": "实体_FindAllByModel(string modelName)", "contents": "${1:Entities}:FindAllByModel(${2:string modelName})"},
		{ "trigger": "实体_FindByNameNearest(string entityName,vector origin , float radius)", "contents": "${1:Entities}:FindByNameNearest(${2:string entityName},${3:vector origin},${4:float radius})"},
		{ "trigger": "实体_FindByNameWithin(Entity startFrom,string entityName , vector origin , float radius)", "contents": "${1:Entities}:FindByNameWithin(${2:Entity startFrom},${3:string entityName},${4:vector origin},${5:float radius})"},
		{ "trigger": "实体_FindAllByNameWithin(string entityName,vector origin , float radius)", "contents": "${1:Entities}:FindAllByNameWithin(${2:string entityName},${3:vector origin},${4:float radius})"},
		{ "trigger": "实体_FindByClassnameNearest(string className,vector origin , float radius)", "contents": "${1:Entities}:FindByClassnameNearest(${2:string className},${3:vector origin},${4:float radius})"},
		{ "trigger": "实体_FindByClassnameWithin(Entity startFrom,string className , vector origin , float radius)", "contents": "${1:Entities}:FindByClassnameWithin(${2:Entity startFrom},${3:string className},${4:vector origin},${5:float radius})"},
		{ "trigger": "实体_FindAllByClassnameWithin(string className,vector origin , float radius)", "contents": "${1:Entities}:FindAllByClassnameWithin(${2:string className},${3:vector origin},${4:float radius})"},


		{ "trigger": "英雄列表_GetHero(int heroId)", "contents": "${1:CScriptHeroList}:GetHero(${2:int heroId})"},
		{ "trigger": "英雄列表_GetHeroCount()", "contents": "${1:CScriptHeroList}:GetHeroCount()"},
		{ "trigger": "英雄列表_GetAllHeroes()", "contents": "${1:CScriptHeroList}:GetAllHeroes()"},


		{ "trigger": "控制台变量_GetFloat(string varName)", "contents": "${1:ConVars}:GetFloat(${2:string varName})"},
		{ "trigger": "控制台变量_GetStr(string varName)", "contents": "${1:ConVars}:GetStr(${2:string varName})"},
		{ "trigger": "控制台变量_GetBool(string varName)", "contents": "${1:ConVars}:GetBool(${2:string varName})"},
		{ "trigger": "控制台变量_RegisterCommand(string varName,function func , string helpText , int flags)", "contents": "${1:ConVars}:RegisterCommand(${2:string varName},${3:function func},${4:string helpText},${5:int flags})"},
		{ "trigger": "控制台变量_RegisterConvar(string name,string default , string helpText , int flags)", "contents": "${1:ConVars}:RegisterConvar(${2:string name},${3:string default},${4:string helpText},${5:int flags})"},
		{ "trigger": "控制台变量_GetCommandClient()", "contents": "${1:ConVars}:GetCommandClient()"},
		{ "trigger": "控制台变量_GetDOTACommandClient()", "contents": "${1:ConVars}:GetDOTACommandClient()"},


		{ "trigger": "基础实体_ConnectOutput(string unKnown,string unKnown)", "contents": "${1:CBaseEntity}:ConnectOutput(${2:string unKnown},${3:string unKnown})"},
		{ "trigger": "基础实体_DisconnectOutput(string unKnown,string unKnown)", "contents": "${1:CBaseEntity}:DisconnectOutput(${2:string unKnown},${3:string unKnown})"},
		{ "trigger": "基础实体_GetHealth()", "contents": "${1:CBaseEntity}:GetHealth()"},
		{ "trigger": "基础实体_SetHealth(int hp)", "contents": "${1:CBaseEntity}:SetHealth(${2:int hp})"},
		{ "trigger": "基础实体_GetMaxHealth()", "contents": "${1:CBaseEntity}:GetMaxHealth()"},
		{ "trigger": "基础实体_SetMaxHealth(int hp)", "contents": "${1:CBaseEntity}:SetMaxHealth(${2:int hp})"},
		{ "trigger": "基础实体_IsAlive()", "contents": "${1:CBaseEntity}:IsAlive()"},
		{ "trigger": "基础实体_Remove()", "contents": "${1:CBaseEntity}:Remove()"},
		{ "trigger": "基础实体_SetModel(string modelName)", "contents": "${1:CBaseEntity}:SetModel(${2:string modelName})"},
		{ "trigger": "基础实体_GetModelName()", "contents": "${1:CBaseEntity}:GetModelName()"},
		{ "trigger": "基础实体_EmitSound(string soundName)", "contents": "${1:CBaseEntity}:EmitSound(${2:string soundName})"},
		{ "trigger": "基础实体_EmitSoundParams(string soundName,int pitch , float volume)", "contents": "${1:CBaseEntity}:EmitSoundParams(${2:string soundName},${3:int pitch},${4:float volume})"},
		{ "trigger": "基础实体_StopSound(string soundName)", "contents": "${1:CBaseEntity}:StopSound(${2:string soundName})"},
		{ "trigger": "基础实体_PrecacheSoundScript(string soundName)", "contents": "${1:CBaseEntity}:PrecacheSoundScript(${2:string soundName})"},
		{ "trigger": "基础实体_GetSoundDuration(string soundName,string actorModelname)", "contents": "${1:CBaseEntity}:GetSoundDuration(${2:string soundName},${3:string actorModelname})"},
		{ "trigger": "基础实体_GetClassname()", "contents": "${1:CBaseEntity}:GetClassname()"},
		{ "trigger": "基础实体_GetName()", "contents": "${1:CBaseEntity}:GetName()"},
		{ "trigger": "基础实体_GetPreTemplateName()", "contents": "${1:CBaseEntity}:GetPreTemplateName()"},
		{ "trigger": "基础实体_GetAbsOrigin()", "contents": "${1:CBaseEntity}:GetAbsOrigin()"},
		{ "trigger": "基础实体_SetAbsOrigin(vector vec)", "contents": "${1:CBaseEntity}:SetAbsOrigin(${2:vector vec})"},
		{ "trigger": "基础实体_GetOrigin()", "contents": "${1:CBaseEntity}:GetOrigin()"},
		{ "trigger": "基础实体_SetAbsOrigin(vector vec)", "contents": "${1:CBaseEntity}:SetAbsOrigin(${2:vector vec})"},
		{ "trigger": "基础实体_SetOrigin(vector vec)", "contents": "${1:CBaseEntity}:SetOrigin(${2:vector vec})"},
		{ "trigger": "基础实体_GetForwardVector()", "contents": "${1:CBaseEntity}:GetForwardVector()"},
		{ "trigger": "基础实体_GetRightVector()", "contents": "${1:CBaseEntity}:GetRightVector()"},
		{ "trigger": "基础实体_GetUpVector()", "contents": "${1:CBaseEntity}:GetUpVector()"},
		{ "trigger": "基础实体_SetForwardVector(vector forward)", "contents": "${1:CBaseEntity}:SetForwardVector(${2:vector forward})"},
		{ "trigger": "基础实体_GetVelocity()", "contents": "${1:CBaseEntity}:GetVelocity()"},
		{ "trigger": "基础实体_SetVelocity(vector velocity)", "contents": "${1:CBaseEntity}:SetVelocity(${2:vector velocity})"},
		{ "trigger": "基础实体_SetAngularVelocity(float pitch,float yaw , float roll)", "contents": "${1:CBaseEntity}:SetAngularVelocity(${2:float pitch},${3:float yaw},${4:float roll})"},
		{ "trigger": "基础实体_GetAngularVelocity()", "contents": "${1:CBaseEntity}:GetAngularVelocity()"},
		{ "trigger": "基础实体_GetCenter()", "contents": "${1:CBaseEntity}:GetCenter()"},
		{ "trigger": "基础实体_EyePosition()", "contents": "${1:CBaseEntity}:EyePosition()"},
		{ "trigger": "基础实体_SetAngles(float pitch,float yaw , float roll)", "contents": "${1:CBaseEntity}:SetAngles(${2:float pitch},${3:float yaw},${4:float roll})"},
		{ "trigger": "基础实体_GetAngles()", "contents": "${1:CBaseEntity}:GetAngles()"},
		{ "trigger": "基础实体_SetSize(vector vec,vector vec)", "contents": "${1:CBaseEntity}:SetSize(${2:vector vec},${3:vector vec})"},
		{ "trigger": "基础实体_GetBoundingMins()", "contents": "${1:CBaseEntity}:GetBoundingMins()"},
		{ "trigger": "基础实体_GetBoundingMaxs()", "contents": "${1:CBaseEntity}:GetBoundingMaxs()"},
		{ "trigger": "基础实体_Destroy()", "contents": "${1:CBaseEntity}:Destroy()"},
		{ "trigger": "基础实体_SetOwner(Entity parent)", "contents": "${1:CBaseEntity}:SetOwner(${2:Entity parent})"},
		{ "trigger": "基础实体_GetTeam()", "contents": "${1:CBaseEntity}:GetTeam()"},
		{ "trigger": "基础实体_SetTeam(int team)", "contents": "${1:CBaseEntity}:SetTeam(${2:int team})"},
		{ "trigger": "基础实体_GetMoveParent()", "contents": "${1:CBaseEntity}:GetMoveParent()"},
		{ "trigger": "基础实体_GetRootMoveParent()", "contents": "${1:CBaseEntity}:GetRootMoveParent()"},
		{ "trigger": "基础实体_FirstMoveChild()", "contents": "${1:CBaseEntity}:FirstMoveChild()"},
		{ "trigger": "基础实体_NextMovePeer()", "contents": "${1:CBaseEntity}:NextMovePeer()"},
		{ "trigger": "基础实体___KeyValueFromString(string key,string value)", "contents": "${1:CBaseEntity}:__KeyValueFromString(${2:string key},${3:string value})"},
		{ "trigger": "基础实体___KeyValueFromFloat(string key,float value)", "contents": "${1:CBaseEntity}:__KeyValueFromFloat(${2:string key},${3:float value})"},
		{ "trigger": "基础实体___KeyValueFromInt(string key,int value)", "contents": "${1:CBaseEntity}:__KeyValueFromInt(${2:string key},${3:int value})"},
		{ "trigger": "基础实体___KeyValueFromVector(string key,vector value)", "contents": "${1:CBaseEntity}:__KeyValueFromVector(${2:string key},${3:vector value})"},
		{ "trigger": "基础实体_Trigger()", "contents": "${1:CBaseEntity}:Trigger()"},
		{ "trigger": "基础实体_ValidateScriptScope()", "contents": "${1:CBaseEntity}:ValidateScriptScope()"},
		{ "trigger": "基础实体_GetScriptScope()", "contents": "${1:CBaseEntity}:GetScriptScope()"},
		{ "trigger": "基础实体_GetScriptId()", "contents": "${1:CBaseEntity}:GetScriptId()"},
		{ "trigger": "基础实体_GetOwner()", "contents": "${1:CBaseEntity}:GetOwner()"},
		{ "trigger": "基础实体_entindex()", "contents": "${1:CBaseEntity}:entindex()"},


		{ "trigger": "玩家资源_SetHasRepicked(int playerId)", "contents": "${1:PlayerResource}:SetHasRepicked(${2:int playerId})"},
		{ "trigger": "玩家资源_HasRepicked(int playerId)", "contents": "${1:PlayerResource}:HasRepicked(${2:int playerId})"},
		{ "trigger": "玩家资源_SetHasRandomed(int playerId)", "contents": "${1:PlayerResource}:SetHasRandomed(${2:int playerId})"},
		{ "trigger": "玩家资源_HasRandomed(int playerId)", "contents": "${1:PlayerResource}:HasRandomed(${2:int playerId})"},
		{ "trigger": "玩家资源_IsValidTeamPlayerID(int playerId)", "contents": "${1:PlayerResource}:IsValidTeamPlayerID(${2:int playerId})"},
		{ "trigger": "玩家资源_IsValidTeamPlayer(int playerId)", "contents": "${1:PlayerResource}:IsValidTeamPlayer(${2:int playerId})"},
		{ "trigger": "玩家资源_IsValidPlayerID(int playerId)", "contents": "${1:PlayerResource}:IsValidPlayerID(${2:int playerId})"},
		{ "trigger": "玩家资源_IsValidPlayer(int playerId)", "contents": "${1:PlayerResource}:IsValidPlayer(${2:int playerId})"},
		{ "trigger": "玩家资源_GetLevel(int playerId)", "contents": "${1:PlayerResource}:GetLevel(${2:int playerId})"},
		{ "trigger": "玩家资源_IncrementKills(int playerId,int kills)", "contents": "${1:PlayerResource}:IncrementKills(${2:int playerId},${3:int kills})"},
		{ "trigger": "玩家资源_IncrementAssists(int playerId)", "contents": "${1:PlayerResource}:IncrementAssists(${2:int playerId})"},
		{ "trigger": "玩家资源_IncrementDeaths(int playerId)", "contents": "${1:PlayerResource}:IncrementDeaths(${2:int playerId})"},
		{ "trigger": "玩家资源_GetKills(int playerId)", "contents": "${1:PlayerResource}:GetKills(${2:int playerId})"},
		{ "trigger": "玩家资源_GetAssists(int playerId)", "contents": "${1:PlayerResource}:GetAssists(${2:int playerId})"},
		{ "trigger": "玩家资源_GetDeaths(int playerId)", "contents": "${1:PlayerResource}:GetDeaths(${2:int playerId})"},
		{ "trigger": "玩家资源_GetStuns(int playerId)", "contents": "${1:PlayerResource}:GetStuns(${2:int playerId})"},
		{ "trigger": "玩家资源_GetHealing(int playerId)", "contents": "${1:PlayerResource}:GetHealing(${2:int playerId})"},
		{ "trigger": "玩家资源_GetTowerKills(int playerId)", "contents": "${1:PlayerResource}:GetTowerKills(${2:int playerId})"},
		{ "trigger": "玩家资源_GetRoshanKills(int playerId)", "contents": "${1:PlayerResource}:GetRoshanKills(${2:int playerId})"},
		{ "trigger": "玩家资源_GetTeamKills(int playerId)", "contents": "${1:PlayerResource}:GetTeamKills(${2:int playerId})"},
		{ "trigger": "玩家资源_IncrementStreak(int playerId)", "contents": "${1:PlayerResource}:IncrementStreak(${2:int playerId})"},
		{ "trigger": "玩家资源_ClearStreak(int playerId)", "contents": "${1:PlayerResource}:ClearStreak(${2:int playerId})"},
		{ "trigger": "玩家资源_GetStreak(int playerId)", "contents": "${1:PlayerResource}:GetStreak(${2:int playerId})"},
		{ "trigger": "玩家资源_ModifyGold(int playerId,int goldAmt , bool reliable , int unknown)", "contents": "${1:PlayerResource}:ModifyGold(${2:int playerId},${3:int goldAmt},${4:bool reliable},${5:int unknown})"},
		{ "trigger": "玩家资源_SetGold(int playerId,int goldAmt , bool reliable)", "contents": "${1:PlayerResource}:SetGold(${2:int playerId},${3:int goldAmt},${4:bool reliable})"},
		{ "trigger": "玩家资源_SpendGold(int playerId,int amt , int unknown)", "contents": "${1:PlayerResource}:SpendGold(${2:int playerId},${3:int amt},${4:int unknown})"},
		{ "trigger": "玩家资源_GetGold(int playerId)", "contents": "${1:PlayerResource}:GetGold(${2:int playerId})"},
		{ "trigger": "玩家资源_GetReliableGold(int playerId)", "contents": "${1:PlayerResource}:GetReliableGold(${2:int playerId})"},
		{ "trigger": "玩家资源_GetUnreliableGold(int playerId)", "contents": "${1:PlayerResource}:GetUnreliableGold(${2:int playerId})"},
		{ "trigger": "玩家资源_ResetTotalEarnedGold(int playerId)", "contents": "${1:PlayerResource}:ResetTotalEarnedGold(${2:int playerId})"},
		{ "trigger": "玩家资源_GetTotalEarnedGold(int playerId)", "contents": "${1:PlayerResource}:GetTotalEarnedGold(${2:int playerId})"},
		{ "trigger": "玩家资源_GetTotalGoldSpent(int playerId)", "contents": "${1:PlayerResource}:GetTotalGoldSpent(${2:int playerId})"},
		{ "trigger": "玩家资源_AddGoldSpentOnSupport(int unknown,int unknown)", "contents": "${1:PlayerResource}:AddGoldSpentOnSupport(${2:int unknown},${3:int unknown})"},
		{ "trigger": "玩家资源_GetGoldSpentOnSupport(int playerId)", "contents": "${1:PlayerResource}:GetGoldSpentOnSupport(${2:int playerId})"},
		{ "trigger": "玩家资源_GetGoldSpentOnConsumables(int playerId)", "contents": "${1:PlayerResource}:GetGoldSpentOnConsumables(${2:int playerId})"},
		{ "trigger": "玩家资源_GetGoldSpentOnItems(int playerId)", "contents": "${1:PlayerResource}:GetGoldSpentOnItems(${2:int playerId})"},
		{ "trigger": "玩家资源_GetGoldLostToDeath(int playerId)", "contents": "${1:PlayerResource}:GetGoldLostToDeath(${2:int playerId})"},
		{ "trigger": "玩家资源_GetGoldSpentOnBuybacks(int playerId)", "contents": "${1:PlayerResource}:GetGoldSpentOnBuybacks(${2:int playerId})"},
		{ "trigger": "玩家资源_GetGoldPerMin(int playerId)", "contents": "${1:PlayerResource}:GetGoldPerMin(${2:int playerId})"},
		{ "trigger": "玩家资源_GetXPPerMin(int playerId)", "contents": "${1:PlayerResource}:GetXPPerMin(${2:int playerId})"},
		{ "trigger": "玩家资源_GetAegisPickups(int playerId)", "contents": "${1:PlayerResource}:GetAegisPickups(${2:int playerId})"},
		{ "trigger": "玩家资源_AddAegisPickup(int playerId)", "contents": "${1:PlayerResource}:AddAegisPickup(${2:int playerId})"},
		{ "trigger": "玩家资源_GetRunePickups(int playerId)", "contents": "${1:PlayerResource}:GetRunePickups(${2:int playerId})"},
		{ "trigger": "玩家资源_AddRunePickup(int playerId)", "contents": "${1:PlayerResource}:AddRunePickup(${2:int playerId})"},
		{ "trigger": "玩家资源_GetNumConsumablesPurchased(int playerId)", "contents": "${1:PlayerResource}:GetNumConsumablesPurchased(${2:int playerId})"},
		{ "trigger": "玩家资源_GetNumItemsPurchased(int playerId)", "contents": "${1:PlayerResource}:GetNumItemsPurchased(${2:int playerId})"},
		{ "trigger": "玩家资源_GetTimeOfLastItemPurchase(int playerId)", "contents": "${1:PlayerResource}:GetTimeOfLastItemPurchase(${2:int playerId})"},
		{ "trigger": "玩家资源_GetTimeOfLastConsumablePurchase(int playerId)", "contents": "${1:PlayerResource}:GetTimeOfLastConsumablePurchase(${2:int playerId})"},
		{ "trigger": "玩家资源_GetTimeOfLastDeath(int playerId)", "contents": "${1:PlayerResource}:GetTimeOfLastDeath(${2:int playerId})"},
		{ "trigger": "玩家资源_GetRespawnSeconds(int playerId)", "contents": "${1:PlayerResource}:GetRespawnSeconds(${2:int playerId})"},
		{ "trigger": "玩家资源_IncrementTotalEarnedXP(int playerId,int amt)", "contents": "${1:PlayerResource}:IncrementTotalEarnedXP(${2:int playerId},${3:int amt})"},
		{ "trigger": "玩家资源_GetTotalEarnedXP(int playerId)", "contents": "${1:PlayerResource}:GetTotalEarnedXP(${2:int playerId})"},
		{ "trigger": "玩家资源_AddClaimedFarm(int playerId,float farm)", "contents": "${1:PlayerResource}:AddClaimedFarm(${2:int playerId},${3:float farm})"},
		{ "trigger": "玩家资源_GetClaimedFarm(int playerId)", "contents": "${1:PlayerResource}:GetClaimedFarm(${2:int playerId})"},
		{ "trigger": "玩家资源_GetRawPlayerDamage(int playerId)", "contents": "${1:PlayerResource}:GetRawPlayerDamage(${2:int playerId})"},
		{ "trigger": "玩家资源_ClearRawPlayerDamageMatrix(int playerId)", "contents": "${1:PlayerResource}:ClearRawPlayerDamageMatrix(${2:int playerId})"},
		{ "trigger": "玩家资源_ClearKillsMatrix(int playerId)", "contents": "${1:PlayerResource}:ClearKillsMatrix(${2:int playerId})"},
		{ "trigger": "玩家资源_GetTowerDamageTaken(int playerId)", "contents": "${1:PlayerResource}:GetTowerDamageTaken(${2:int playerId})"},
		{ "trigger": "玩家资源_GetCreepDamageTaken(int playerId)", "contents": "${1:PlayerResource}:GetCreepDamageTaken(${2:int playerId})"},
		{ "trigger": "玩家资源_GetHeroDamageTaken(int playerId)", "contents": "${1:PlayerResource}:GetHeroDamageTaken(${2:int playerId})"},
		{ "trigger": "玩家资源_GetDamageDoneToHero(int playerId,int heroId)", "contents": "${1:PlayerResource}:GetDamageDoneToHero(${2:int playerId},${3:int heroId})"},
		{ "trigger": "玩家资源_GetKillsDoneToHero(int playerId,int heroId)", "contents": "${1:PlayerResource}:GetKillsDoneToHero(${2:int playerId},${3:int heroId})"},
		{ "trigger": "玩家资源_GetSelectedHeroName(int playerId)", "contents": "${1:PlayerResource}:GetSelectedHeroName(${2:int playerId})"},
		{ "trigger": "玩家资源_GetSelectedHeroID(int playerId)", "contents": "${1:PlayerResource}:GetSelectedHeroID(${2:int playerId})"},
		{ "trigger": "玩家资源_IsHeroSelected(string heroName)", "contents": "${1:PlayerResource}:IsHeroSelected(${2:string heroName})"},
		{ "trigger": "玩家资源_WhoSelectedHero(string heroName)", "contents": "${1:PlayerResource}:WhoSelectedHero(${2:string heroName})"},
		{ "trigger": "玩家资源_GetSelectedHeroEntity(int playerId)", "contents": "${1:PlayerResource}:GetSelectedHeroEntity(${2:int playerId})"},
		{ "trigger": "玩家资源_HasSelectedHero(int playerId)", "contents": "${1:PlayerResource}:HasSelectedHero(${2:int playerId})"},
		{ "trigger": "玩家资源_GetPlayer(int playerId)", "contents": "${1:PlayerResource}:GetPlayer(${2:int playerId})"},
		{ "trigger": "玩家资源_GetNthPlayerIDOnTeam(int index,int team)", "contents": "${1:PlayerResource}:GetNthPlayerIDOnTeam(${2:int index},${3:int team})"},
		{ "trigger": "玩家资源_IncrementLastHits(int playerId)", "contents": "${1:PlayerResource}:IncrementLastHits(${2:int playerId})"},
		{ "trigger": "玩家资源_GetLastHits(int playerId)", "contents": "${1:PlayerResource}:GetLastHits(${2:int playerId})"},
		{ "trigger": "玩家资源_IncrementGoldBagsCollected(int playerId)", "contents": "${1:PlayerResource}:IncrementGoldBagsCollected(${2:int playerId})"},
		{ "trigger": "玩家资源_GetGoldBagsCollected(int playerId)", "contents": "${1:PlayerResource}:GetGoldBagsCollected(${2:int playerId})"},
		{ "trigger": "玩家资源_IncrementLastHitStreak(int playerId)", "contents": "${1:PlayerResource}:IncrementLastHitStreak(${2:int playerId})"},
		{ "trigger": "玩家资源_ClearLastHitStreak(int playerId)", "contents": "${1:PlayerResource}:ClearLastHitStreak(${2:int playerId})"},
		{ "trigger": "玩家资源_GetLastHitStreak(int playerId)", "contents": "${1:PlayerResource}:GetLastHitStreak(${2:int playerId})"},
		{ "trigger": "玩家资源_IncrementLastHitMultikill(int playerId)", "contents": "${1:PlayerResource}:IncrementLastHitMultikill(${2:int playerId})"},
		{ "trigger": "玩家资源_ClearLastHitMultikill(int playerId)", "contents": "${1:PlayerResource}:ClearLastHitMultikill(${2:int playerId})"},
		{ "trigger": "玩家资源_GetLastHitMultikill(int playerId)", "contents": "${1:PlayerResource}:GetLastHitMultikill(${2:int playerId})"},
		{ "trigger": "玩家资源_IncrementNearbyCreepDeaths(int playerId)", "contents": "${1:PlayerResource}:IncrementNearbyCreepDeaths(${2:int playerId})"},
		{ "trigger": "玩家资源_GetNearbyCreepDeaths(int playerId)", "contents": "${1:PlayerResource}:GetNearbyCreepDeaths(${2:int playerId})"},
		{ "trigger": "玩家资源_IncrementDenies(int playerId)", "contents": "${1:PlayerResource}:IncrementDenies(${2:int playerId})"},
		{ "trigger": "玩家资源_GetDenies(int playerId)", "contents": "${1:PlayerResource}:GetDenies(${2:int playerId})"},
		{ "trigger": "玩家资源_IncrementClaimedMisses(int playerId)", "contents": "${1:PlayerResource}:IncrementClaimedMisses(${2:int playerId})"},
		{ "trigger": "玩家资源_GetClaimedMisses(int playerId)", "contents": "${1:PlayerResource}:GetClaimedMisses(${2:int playerId})"},
		{ "trigger": "玩家资源_IncrementClaimedDenies(int playerId)", "contents": "${1:PlayerResource}:IncrementClaimedDenies(${2:int playerId})"},
		{ "trigger": "玩家资源_GetClaimedDenies(int playerId)", "contents": "${1:PlayerResource}:GetClaimedDenies(${2:int playerId})"},
		{ "trigger": "玩家资源_IncrementMisses(int playerId)", "contents": "${1:PlayerResource}:IncrementMisses(${2:int playerId})"},
		{ "trigger": "玩家资源_GetMisses(int playerId)", "contents": "${1:PlayerResource}:GetMisses(${2:int playerId})"},
		{ "trigger": "玩家资源_UpdateTeamSlot(int playerId,int slot)", "contents": "${1:PlayerResource}:UpdateTeamSlot(${2:int playerId},${3:int slot})"},
		{ "trigger": "玩家资源_GetTeam(int playerId)", "contents": "${1:PlayerResource}:GetTeam(${2:int playerId})"},
		{ "trigger": "玩家资源_IsBroadcaster(int playerId)", "contents": "${1:PlayerResource}:IsBroadcaster(${2:int playerId})"},
		{ "trigger": "玩家资源_GetBroadcasterChannel(int playerId)", "contents": "${1:PlayerResource}:GetBroadcasterChannel(${2:int playerId})"},
		{ "trigger": "玩家资源_GetBroadcasterChannelSlot(int playerId)", "contents": "${1:PlayerResource}:GetBroadcasterChannelSlot(${2:int playerId})"},
		{ "trigger": "玩家资源_GetSteamAccountID(int playerId)", "contents": "${1:PlayerResource}:GetSteamAccountID(${2:int playerId})"},
		{ "trigger": "玩家资源_IsFakeClient(int playerId)", "contents": "${1:PlayerResource}:IsFakeClient(${2:int playerId})"},
		{ "trigger": "玩家资源_HaveAllPlayersJoined()", "contents": "${1:PlayerResource}:HaveAllPlayersJoined()"},
		{ "trigger": "玩家资源_GetPlayerLoadedCompletely(int playerId)", "contents": "${1:PlayerResource}:GetPlayerLoadedCompletely(${2:int playerId})"},
		{ "trigger": "玩家资源_SetPlayerReservedState(int playerId,bool reserved)", "contents": "${1:PlayerResource}:SetPlayerReservedState(${2:int playerId},${3:bool reserved})"},
		{ "trigger": "玩家资源_GetPlayerReservedState(int playerId)", "contents": "${1:PlayerResource}:GetPlayerReservedState(${2:int playerId})"},
		{ "trigger": "玩家资源_GetConnectionState(int playerId)", "contents": "${1:PlayerResource}:GetConnectionState(${2:int playerId})"},
		{ "trigger": "玩家资源_HeroLevelUp(int playerId)", "contents": "${1:PlayerResource}:HeroLevelUp(${2:int playerId})"},
		{ "trigger": "玩家资源_SetLastBuybackTime(int playerId,int time)", "contents": "${1:PlayerResource}:SetLastBuybackTime(${2:int playerId},${3:int time})"},
		{ "trigger": "玩家资源_GetPlayerName(int playerId)", "contents": "${1:PlayerResource}:GetPlayerName(${2:int playerId})"},
		{ "trigger": "玩家资源_GetUnitShareMaskForPlayer(int playerId,int otherPlayerId)", "contents": "${1:PlayerResource}:GetUnitShareMaskForPlayer(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "玩家资源_IsHeroSharedWithPlayerID(int playerId,int otherPlayerId)", "contents": "${1:PlayerResource}:IsHeroSharedWithPlayerID(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "玩家资源_AreUnitsSharedWithPlayerID(int playerId,int otherPlayerId)", "contents": "${1:PlayerResource}:AreUnitsSharedWithPlayerID(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "玩家资源_IsDisableHelpSetForPlayerID(int playerId,int otherPlayerId)", "contents": "${1:PlayerResource}:IsDisableHelpSetForPlayerID(${2:int playerId},${3:int otherPlayerId})"},
		{ "trigger": "玩家资源_SetUnitShareMaskForPlayer(int unKnown,int unKnown , int unKnown , bool unKnown)", "contents": "${1:PlayerResource}:SetUnitShareMaskForPlayer(${2:int unKnown},${3:int unKnown},${4:int unKnown},${5:bool unKnown})"},
		{ "trigger": "玩家资源_GetNumCouriersForTeam(int team)", "contents": "${1:PlayerResource}:GetNumCouriersForTeam(${2:int team})"},
		{ "trigger": "玩家资源_GetNthCourierForTeam(int index,int team)", "contents": "${1:PlayerResource}:GetNthCourierForTeam(${2:int index},${3:int team})"},
		{ "trigger": "玩家资源_SetBuybackCooldownTime(int playerId,float cooldown)", "contents": "${1:PlayerResource}:SetBuybackCooldownTime(${2:int playerId},${3:float cooldown})"},
		{ "trigger": "玩家资源_SetBuybackGoldLimitTime(int playerId,float buybackGold)", "contents": "${1:PlayerResource}:SetBuybackGoldLimitTime(${2:int playerId},${3:float buybackGold})"},
		{ "trigger": "玩家资源_ResetBuybackCostTime(int playerId)", "contents": "${1:PlayerResource}:ResetBuybackCostTime(${2:int playerId})"},
		{ "trigger": "玩家资源_ReplaceHeroWith(int playerId,string heroName , int gold , int exp)", "contents": "${1:PlayerResource}:ReplaceHeroWith(${2:int playerId},${3:string heroName},${4:int gold},${5:int exp})"},
		{ "trigger": "玩家资源_SetCustomBuybackCost(int playerId,int cost)", "contents": "${1:PlayerResource}:SetCustomBuybackCost(${2:int playerId},${3:int cost})"},
		{ "trigger": "玩家资源_SetCustomBuybackCooldown(int playerId,float cooldown)", "contents": "${1:PlayerResource}:SetCustomBuybackCooldown(${2:int playerId},${3:float cooldown})"},
		{ "trigger": "玩家资源_GetCustomBuybackCost(int playerId)", "contents": "${1:PlayerResource}:GetCustomBuybackCost(${2:int playerId})"},
		{ "trigger": "玩家资源_GetCustomBuybackCooldown(int playerId)", "contents": "${1:PlayerResource}:GetCustomBuybackCooldown(${2:int playerId})"},
		{ "trigger": "玩家资源_SetCameraTarget(int playerId,hscript target)", "contents": "${1:PlayerResource}:SetCameraTarget(${2:int playerId},${3:hscript target})"},
		{ "trigger": "玩家资源_GetEventPointsForPlayerID(int playerId)", "contents": "${1:PlayerResource}:GetEventPointsForPlayerID(${2:int playerId})"},
		{ "trigger": "玩家资源_GetEventPremiumPointsGranted(int playerId)", "contents": "${1:PlayerResource}:GetEventPremiumPointsGranted(${2:int playerId})"},
		{ "trigger": "玩家资源_GetEventRankGranted(int playerId)", "contents": "${1:PlayerResource}:GetEventRankGranted(${2:int playerId})"},


		{ "trigger": "子弹管理器_CreateTrackingProjectile(hscript projectile)", "contents": "${1:ProjectileManager}:CreateTrackingProjectile(${2:hscript projectile})"},
		{ "trigger": "子弹管理器_CreateLinearProjectile(hscript projectile)", "contents": "${1:ProjectileManager}:CreateLinearProjectile(${2:hscript projectile})"},
		{ "trigger": "子弹管理器_DestroyLinearProjectile(int projectile)", "contents": "${1:ProjectileManager}:DestroyLinearProjectile(${2:int projectile})"},
		{ "trigger": "子弹管理器_ProjectileDodge(hscript projectile)", "contents": "${1:ProjectileManager}:ProjectileDodge(${2:hscript projectile})"},


		{ "trigger": "基础游戏模式_BeginThink(string thinkName,function func , float intervalInSeconds)", "contents": "${1:CDOTABaseGameMode}:BeginThink(${2:string thinkName},${3:function func},${4:float intervalInSeconds})"},
		{ "trigger": "基础游戏模式_EndThink(string thinkName)", "contents": "${1:CDOTABaseGameMode}:EndThink(${2:string thinkName})"},
		{ "trigger": "基础游戏模式_SetAlwaysShowPlayerInventory(bool alwaysShow)", "contents": "${1:CDOTABaseGameMode}:SetAlwaysShowPlayerInventory(${2:bool alwaysShow})"},
		{ "trigger": "基础游戏模式_SetGoldSoundDisabled(bool playSound)", "contents": "${1:CDOTABaseGameMode}:SetGoldSoundDisabled(${2:bool playSound})"},
		{ "trigger": "基础游戏模式_SetRecommendedItemsDisabled(bool disableRecItems)", "contents": "${1:CDOTABaseGameMode}:SetRecommendedItemsDisabled(${2:bool disableRecItems})"},
		{ "trigger": "基础游戏模式_SetCameraDistanceOverride(float cameraDistance)", "contents": "${1:CDOTABaseGameMode}:SetCameraDistanceOverride(${2:float cameraDistance})"},
		{ "trigger": "基础游戏模式_SetOverrideSelectionEntity(Unit unit)", "contents": "${1:CDOTABaseGameMode}:SetOverrideSelectionEntity(${2:Unit unit})"},
		{ "trigger": "基础游戏模式_SetRemoveIllusionsOnDeath(bool removeIllusions)", "contents": "${1:CDOTABaseGameMode}:SetRemoveIllusionsOnDeath(${2:bool removeIllusions})"},
		{ "trigger": "基础游戏模式_ClientLoadGridNav()", "contents": "${1:CDOTABaseGameMode}:ClientLoadGridNav()"},
		{ "trigger": "基础游戏模式_SetFogOfWarDisabled(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetFogOfWarDisabled(${2:bool enabled})"},
		{ "trigger": "基础游戏模式_SetCustomBuybackCostEnabled(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetCustomBuybackCostEnabled(${2:bool enabled})"},
		{ "trigger": "基础游戏模式_SetCustomBuybackCooldownEnabled(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetCustomBuybackCooldownEnabled(${2:bool enabled})"},
		{ "trigger": "基础游戏模式_SetTopBarTeamValuesOverride(bool enabled)", "contents": "${1:CDOTABaseGameMode}:SetTopBarTeamValuesOverride(${2:bool enabled})"},
		{ "trigger": "基础游戏模式_SetTopBarTeamValuesVisible(bool visible)", "contents": "${1:CDOTABaseGameMode}:SetTopBarTeamValuesVisible(${2:bool visible})"},
		{ "trigger": "基础游戏模式_SetTopBarTeamValue(int team,int value)", "contents": "${1:CDOTABaseGameMode}:SetTopBarTeamValue(${2:int team},${3:int value})"},


		{ "trigger": "基础动画_LookupAttachment(string attachmentName)", "contents": "${1:CBaseAnimating}:LookupAttachment(${2:string attachmentName})"},
		{ "trigger": "基础动画_GetAttachmentOrigin(int attachmentId)", "contents": "${1:CBaseAnimating}:GetAttachmentOrigin(${2:int attachmentId})"},
		{ "trigger": "基础动画_GetAttachmentAngles(int attachmentId)", "contents": "${1:CBaseAnimating}:GetAttachmentAngles(${2:int attachmentId})"},
		{ "trigger": "基础动画_IsSequenceFinished()", "contents": "${1:CBaseAnimating}:IsSequenceFinished()"},
		{ "trigger": "基础动画_SetBodygroup(int unKnown,int unKnown)", "contents": "${1:CBaseAnimating}:SetBodygroup(${2:int unKnown},${3:int unKnown})"},
		{ "trigger": "基础动画_SetModelScale(float scale,float fadeTimeSeconds)", "contents": "${1:CBaseAnimating}:SetModelScale(${2:float scale},${3:float fadeTimeSeconds})"},
		{ "trigger": "基础动画_GetModelScale()", "contents": "${1:CBaseAnimating}:GetModelScale()"},



		{ "trigger": "CBaseFlex_GetCurrentScene()", "contents": "${1:CBaseFlex}:GetCurrentScene()"},
		{ "trigger": "CBaseFlex_GetSceneByIndex(int index)", "contents": "${1:CBaseFlex}:GetSceneByIndex(${2:int index})"},



		{ "trigger": "基础NPC_IsAncient()", "contents": "${1:CDOTA_BaseNPC}:IsAncient()"},
		{ "trigger": "基础NPC_IsNeutralUnitType()", "contents": "${1:CDOTA_BaseNPC}:IsNeutralUnitType()"},
		{ "trigger": "基础NPC_IsSummoned()", "contents": "${1:CDOTA_BaseNPC}:IsSummoned()"},
		{ "trigger": "基础NPC_IsCreature()", "contents": "${1:CDOTA_BaseNPC}:IsCreature()"},
		{ "trigger": "基础NPC_IsHero()", "contents": "${1:CDOTA_BaseNPC}:IsHero()"},
		{ "trigger": "基础NPC_IsRealHero()", "contents": "${1:CDOTA_BaseNPC}:IsRealHero()"},
		{ "trigger": "基础NPC_IsTower()", "contents": "${1:CDOTA_BaseNPC}:IsTower()"},
		{ "trigger": "基础NPC_IsAlive()", "contents": "${1:CDOTA_BaseNPC}:IsAlive()"},
		{ "trigger": "基础NPC_IsMechanical()", "contents": "${1:CDOTA_BaseNPC}:IsMechanical()"},
		{ "trigger": "基础NPC_IsPhantom()", "contents": "${1:CDOTA_BaseNPC}:IsPhantom()"},
		{ "trigger": "基础NPC_SetInitialGoalEntity(Entity goalEntity)", "contents": "${1:CDOTA_BaseNPC}:SetInitialGoalEntity(${2:Entity goalEntity})"},
		{ "trigger": "基础NPC_GetInitialGoalEntity()", "contents": "${1:CDOTA_BaseNPC}:GetInitialGoalEntity()"},
		{ "trigger": "基础NPC_SetMustReachEachGoalEntity(bool mustReach)", "contents": "${1:CDOTA_BaseNPC}:SetMustReachEachGoalEntity(${2:bool mustReach})"},
		{ "trigger": "基础NPC_GetMustReachEachGoalEntity()", "contents": "${1:CDOTA_BaseNPC}:GetMustReachEachGoalEntity()"},
		{ "trigger": "基础NPC_AddNewModifier(Unit caster,Ability optionalSrcAbility , string modifierName , table modifierData)", "contents": "${1:CDOTA_BaseNPC}:AddNewModifier(${2:Unit caster},${3:Ability optionalSrcAbility},${4:string modifierName},${5:table modifierData})"},
		{ "trigger": "基础NPC_HasModifier(string modifierName)", "contents": "${1:CDOTA_BaseNPC}:HasModifier(${2:string modifierName})"},
		{ "trigger": "基础NPC_RemoveModifierByName(string modifierName)", "contents": "${1:CDOTA_BaseNPC}:RemoveModifierByName(${2:string modifierName})"},
		{ "trigger": "基础NPC_RemoveModifierByNameAndCaster(string name,Unit caster)", "contents": "${1:CDOTA_BaseNPC}:RemoveModifierByNameAndCaster(${2:string name},${3:Unit caster})"},
		{ "trigger": "基础NPC_AddItem(Item itemName)", "contents": "${1:CDOTA_BaseNPC}:AddItem(${2:Item itemName})"},
		{ "trigger": "基础NPC_AddAbility(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:AddAbility(${2:string abilityName})"},
		{ "trigger": "基础NPC_RemoveAbility(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:RemoveAbility(${2:string abilityName})"},
		{ "trigger": "基础NPC_HasAbility(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:HasAbility(${2:string abilityName})"},
		{ "trigger": "基础NPC_HasItemInInventory(string itemName)", "contents": "${1:CDOTA_BaseNPC}:HasItemInInventory(${2:string itemName})"},
		{ "trigger": "基础NPC_FindAbilityByName(string abilityName)", "contents": "${1:CDOTA_BaseNPC}:FindAbilityByName(${2:string abilityName})"},
		{ "trigger": "基础NPC_GetGoldBounty()", "contents": "${1:CDOTA_BaseNPC}:GetGoldBounty()"},
		{ "trigger": "基础NPC_SetDeathXP(int xpBounty)", "contents": "${1:CDOTA_BaseNPC}:SetDeathXP(${2:int xpBounty})"},
		{ "trigger": "基础NPC_GetDeathXP()", "contents": "${1:CDOTA_BaseNPC}:GetDeathXP()"},
		{ "trigger": "基础NPC_GetUnitName()", "contents": "${1:CDOTA_BaseNPC}:GetUnitName()"},
		{ "trigger": "基础NPC_GetTeamNumber()", "contents": "${1:CDOTA_BaseNPC}:GetTeamNumber()"},
		{ "trigger": "基础NPC_GetPlayerOwner()", "contents": "${1:CDOTA_BaseNPC}:GetPlayerOwner()"},
		{ "trigger": "基础NPC_SetMaximumGoldBounty(int goldBounty)", "contents": "${1:CDOTA_BaseNPC}:SetMaximumGoldBounty(${2:int goldBounty})"},
		{ "trigger": "基础NPC_SetMinimumGoldBounty(int goldBounty)", "contents": "${1:CDOTA_BaseNPC}:SetMinimumGoldBounty(${2:int goldBounty})"},
		{ "trigger": "基础NPC_GetTotalPurchasedUpgradeGoldCost()", "contents": "${1:CDOTA_BaseNPC}:GetTotalPurchasedUpgradeGoldCost()"},
		{ "trigger": "基础NPC_ForceKill(bool playAegisLines)", "contents": "${1:CDOTA_BaseNPC}:ForceKill(${2:bool playAegisLines})"},
		{ "trigger": "基础NPC_GetBaseDamageMin()", "contents": "${1:CDOTA_BaseNPC}:GetBaseDamageMin()"},
		{ "trigger": "基础NPC_GetBaseDamageMax()", "contents": "${1:CDOTA_BaseNPC}:GetBaseDamageMax()"},
		{ "trigger": "基础NPC_Heal(int amount,Unit source)", "contents": "${1:CDOTA_BaseNPC}:Heal(${2:int amount},${3:Unit source})"},
		{ "trigger": "基础NPC_GetMaxHealth()", "contents": "${1:CDOTA_BaseNPC}:GetMaxHealth()"},
		{ "trigger": "基础NPC_GetHealthPercent()", "contents": "${1:CDOTA_BaseNPC}:GetHealthPercent()"},
		{ "trigger": "基础NPC_SetMana(float mana)", "contents": "${1:CDOTA_BaseNPC}:SetMana(${2:float mana})"},
		{ "trigger": "基础NPC_GetMaxMana()", "contents": "${1:CDOTA_BaseNPC}:GetMaxMana()"},
		{ "trigger": "基础NPC_RespawnUnit()", "contents": "${1:CDOTA_BaseNPC}:RespawnUnit()"},
		{ "trigger": "基础NPC_GetLevel()", "contents": "${1:CDOTA_BaseNPC}:GetLevel()"},
		{ "trigger": "基础NPC_GetItemInSlot(int slotId)", "contents": "${1:CDOTA_BaseNPC}:GetItemInSlot(${2:int slotId})"},
		{ "trigger": "基础NPC_SetOriginalModel(string originalModel)", "contents": "${1:CDOTA_BaseNPC}:SetOriginalModel(${2:string originalModel})"},
		{ "trigger": "基础NPC_AddNoDraw()", "contents": "${1:CDOTA_BaseNPC}:AddNoDraw()"},
		{ "trigger": "基础NPC_RemoveNoDraw()", "contents": "${1:CDOTA_BaseNPC}:RemoveNoDraw()"},
		{ "trigger": "基础NPC_GetPlayerOwnerID()", "contents": "${1:CDOTA_BaseNPC}:GetPlayerOwnerID()"},
		{ "trigger": "基础NPC_IsRangedAttacker()", "contents": "${1:CDOTA_BaseNPC}:IsRangedAttacker()"},
		{ "trigger": "基础NPC_GetCurrentActiveAbility()", "contents": "${1:CDOTA_BaseNPC}:GetCurrentActiveAbility()"},
		{ "trigger": "基础NPC_MoveToPosition(vector position)", "contents": "${1:CDOTA_BaseNPC}:MoveToPosition(${2:vector position})"},
		{ "trigger": "基础NPC_MoveToPositionAggressive(vector position)", "contents": "${1:CDOTA_BaseNPC}:MoveToPositionAggressive(${2:vector position})"},
		{ "trigger": "基础NPC_MoveToNPC(hscript target)", "contents": "${1:CDOTA_BaseNPC}:MoveToNPC(${2:hscript target})"},
		{ "trigger": "基础NPC_MoveToTargetToAttack(hscript target)", "contents": "${1:CDOTA_BaseNPC}:MoveToTargetToAttack(${2:hscript target})"},
		{ "trigger": "基础NPC_Hold()", "contents": "${1:CDOTA_BaseNPC}:Hold()"},
		{ "trigger": "基础NPC_Stop()", "contents": "${1:CDOTA_BaseNPC}:Stop()"},
		{ "trigger": "基础NPC_CastAbilityToggle(hscript ability,int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityToggle(${2:hscript ability},${3:int unKnown})"},
		{ "trigger": "基础NPC_CastAbilityImmediately(hscript int,int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityImmediately(${2:hscript int},${3:int unKnown})"},
		{ "trigger": "基础NPC_CastAbilityOnPosition(vector vector,hscript ability , int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityOnPosition(${2:vector vector},${3:hscript ability},${4:int unKnown})"},
		{ "trigger": "基础NPC_CastAbilityOnTarget(Unit target,Ability ability , int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityOnTarget(${2:Unit target},${3:Ability ability},${4:int unKnown})"},
		{ "trigger": "基础NPC_CastAbilityNoTarget(Ability ability,int unKnown)", "contents": "${1:CDOTA_BaseNPC}:CastAbilityNoTarget(${2:Ability ability},${3:int unKnown})"},
		{ "trigger": "基础NPC_DropItemAtPosition(vector vector,hscript item)", "contents": "${1:CDOTA_BaseNPC}:DropItemAtPosition(${2:vector vector},${3:hscript item})"},
		{ "trigger": "基础NPC_MoveToNPCToGiveItem(hscript target,hscript item)", "contents": "${1:CDOTA_BaseNPC}:MoveToNPCToGiveItem(${2:hscript target},${3:hscript item})"},
		{ "trigger": "基础NPC_PickupDroppedItem(hscript item)", "contents": "${1:CDOTA_BaseNPC}:PickupDroppedItem(${2:hscript item})"},
		{ "trigger": "基础NPC_PickupRune(hscript rune)", "contents": "${1:CDOTA_BaseNPC}:PickupRune(${2:hscript rune})"},
		{ "trigger": "基础NPC_DropItemAtPositionImmediate(hscript item,vector position)", "contents": "${1:CDOTA_BaseNPC}:DropItemAtPositionImmediate(${2:hscript item},${3:vector position})"},
		{ "trigger": "基础NPC_SetAdditionalBattleMusicWeight(float weight)", "contents": "${1:CDOTA_BaseNPC}:SetAdditionalBattleMusicWeight(${2:float weight})"},
		{ "trigger": "基础NPC_GetAdditionalBattleMusicWeight()", "contents": "${1:CDOTA_BaseNPC}:GetAdditionalBattleMusicWeight()"},


		{ "trigger": "基础NPC_建筑_GetInvulnCount()", "contents": "${1:CDOTA_BaseNPC_Building}:GetInvulnCount()"},
		{ "trigger": "基础NPC_建筑_SetInvulnCount(int count)", "contents": "${1:CDOTA_BaseNPC_Building}:SetInvulnCount(${2:int count})"},



		{ "trigger": "基础NPC_生物_CreatureLevelUp(int numLevels)", "contents": "${1:CDOTA_BaseNPC_Creature}:CreatureLevelUp(${2:int numLevels})"},
		{ "trigger": "基础NPC_生物_AddItemDrop(PhysicalItem item)", "contents": "${1:CDOTA_BaseNPC_Creature}:AddItemDrop(${2:PhysicalItem item})"},
		{ "trigger": "基础NPC_生物_SetChampion(bool champion)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetChampion(${2:bool champion})"},
		{ "trigger": "基础NPC_生物_IsChampion()", "contents": "${1:CDOTA_BaseNPC_Creature}:IsChampion()"},
		{ "trigger": "基础NPC_生物_SetHPGain(int hpPerLevel)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetHPGain(${2:int hpPerLevel})"},
		{ "trigger": "基础NPC_生物_SetManaGain(int manaPerLevel)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetManaGain(${2:int manaPerLevel})"},
		{ "trigger": "基础NPC_生物_SetHPRegenGain(float regenPerLevel)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetHPRegenGain(${2:float regenPerLevel})"},
		{ "trigger": "基础NPC_生物_SetManaRegenGain(float manaRegenGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetManaRegenGain(${2:float manaRegenGain})"},
		{ "trigger": "基础NPC_生物_SetDamageGain(int damageGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetDamageGain(${2:int damageGain})"},
		{ "trigger": "基础NPC_生物_SetArmorGain(float armorGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetArmorGain(${2:float armorGain})"},
		{ "trigger": "基础NPC_生物_SetMagicResistanceGain(float magicResistGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetMagicResistanceGain(${2:float magicResistGain})"},
		{ "trigger": "基础NPC_生物_SetDisableResistanceGain(float disableResist)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetDisableResistanceGain(${2:float disableResist})"},
		{ "trigger": "基础NPC_生物_SetAttackTimeGain(float attackSpeedGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetAttackTimeGain(${2:float attackSpeedGain})"},
		{ "trigger": "基础NPC_生物_SetMoveSpeedGain(int moveSpeedGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetMoveSpeedGain(${2:int moveSpeedGain})"},
		{ "trigger": "基础NPC_生物_SetBountyGain(int bountyGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetBountyGain(${2:int bountyGain})"},
		{ "trigger": "基础NPC_生物_SetXPGain(int xpGain)", "contents": "${1:CDOTA_BaseNPC_Creature}:SetXPGain(${2:int xpGain})"},


		{ "trigger": "CDOTA_Unit_Nian_IsHornAlive()", "contents": "${1:CDOTA_Unit_Nian}:IsHornAlive()"},
		{ "trigger": "CDOTA_Unit_Nian_IsTailAlive()", "contents": "${1:CDOTA_Unit_Nian}:IsTailAlive()"},
		{ "trigger": "CDOTA_Unit_Nian_GetHorn()", "contents": "${1:CDOTA_Unit_Nian}:GetHorn()"},
		{ "trigger": "CDOTA_Unit_Nian_GetTail()", "contents": "${1:CDOTA_Unit_Nian}:GetTail()"},


		{ "trigger": "基础NPC_英雄_ModifyGold(int goldAmmount,bool reliable , int unKnown)", "contents": "${1:CDOTA_BaseNPC_Hero}:ModifyGold(${2:int goldAmmount},${3:bool reliable},${4:int unKnown})"},
		{ "trigger": "基础NPC_英雄_GetGold()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetGold()"},
		{ "trigger": "基础NPC_英雄_SetGold(int goldAmmount,bool reliable)", "contents": "${1:CDOTA_BaseNPC_Hero}:SetGold(${2:int goldAmmount},${3:bool reliable})"},
		{ "trigger": "基础NPC_英雄_GetCurrentXP()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetCurrentXP()"},
		{ "trigger": "基础NPC_英雄_GetPlayerID()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetPlayerID()"},
		{ "trigger": "基础NPC_英雄_RespawnHero(bool buyback,bool unKnown , bool unKnown)", "contents": "${1:CDOTA_BaseNPC_Hero}:RespawnHero(${2:bool buyback},${3:bool unKnown},${4:bool unKnown})"},
		{ "trigger": "基础NPC_英雄_HeroLevelUp(bool unKnown)", "contents": "${1:CDOTA_BaseNPC_Hero}:HeroLevelUp(${2:bool unKnown})"},
		{ "trigger": "基础NPC_英雄_GetAbilityPoints()", "contents": "${1:CDOTA_BaseNPC_Hero}:GetAbilityPoints()"},
		{ "trigger": "基础NPC_英雄_SetAbilityPoints(int points)", "contents": "${1:CDOTA_BaseNPC_Hero}:SetAbilityPoints(${2:int points})"},
		{ "trigger": "基础NPC_英雄_SetCustomDeathXP(int points)", "contents": "${1:CDOTA_BaseNPC_Hero}:SetCustomDeathXP(${2:int points})"},



		{ "trigger": "基础_技能GetAbilityName()", "contents": "${1:CDOTABaseAbility}:GetAbilityName()"},
		{ "trigger": "基础_技能GetSpecialValueFor(string specialValue)", "contents": "${1:CDOTABaseAbility}:GetSpecialValueFor(${2:string specialValue})"},
		{ "trigger": "基础_技能GetCastRange()", "contents": "${1:CDOTABaseAbility}:GetCastRange()"},
		{ "trigger": "基础_技能IsFullyCastable()", "contents": "${1:CDOTABaseAbility}:IsFullyCastable()"},
		{ "trigger": "基础_技能IsChanneling()", "contents": "${1:CDOTABaseAbility}:IsChanneling()"},
		{ "trigger": "基础_技能IsInAbilityPhase()", "contents": "${1:CDOTABaseAbility}:IsInAbilityPhase()"},
		{ "trigger": "基础_技能GetCooldown(int level)", "contents": "${1:CDOTABaseAbility}:GetCooldown(${2:int level})"},
		{ "trigger": "基础_技能EndCooldown()", "contents": "${1:CDOTABaseAbility}:EndCooldown()"},
		{ "trigger": "基础_技能MarkAbilityButtonDirty()", "contents": "${1:CDOTABaseAbility}:MarkAbilityButtonDirty()"},
		{ "trigger": "基础_技能SetLevel(int abilityLevel)", "contents": "${1:CDOTABaseAbility}:SetLevel(${2:int abilityLevel})"},


		{ "trigger": "CDOTA_Ability_Animation_Attack_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Animation_Attack}:SetPlaybackRate(${2:float playbackrate})"},


		{ "trigger": "CDOTA_Ability_Animation_Tailspin_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Animation_Tailspin}:SetPlaybackRate(${2:float playbackrate})"},


		{ "trigger": "CDOTA_Ability_Nian_Dive_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Nian_Dive}:SetPlaybackRate(${2:float playbackrate})"},


		{ "trigger": "CDOTA_Ability_Nian_Leap_SetPlaybackRate(float playbackrate)", "contents": "${1:CDOTA_Ability_Nian_Leap}:SetPlaybackRate(${2:float playbackrate})"},


		{ "trigger": "CDOTA_Ability_Nian_Roar_GetCastCount()", "contents": "${1:CDOTA_Ability_Nian_Roar}:GetCastCount()"},


		{ "trigger": "任务系统_SetTextReplaceValue(int questText,int value)", "contents": "${1:CDotaQuest}:SetTextReplaceValue(${2:int questText},${3:int value})"},
		{ "trigger": "任务系统_CompleteQuest()", "contents": "${1:CDotaQuest}:CompleteQuest()"},
		{ "trigger": "任务系统_SetTextReplaceString(string replace)", "contents": "${1:CDotaQuest}:SetTextReplaceString(${2:string replace})"},
		{ "trigger": "任务系统_AddSubquest(hscript subquest)", "contents": "${1:CDotaQuest}:AddSubquest(${2:hscript subquest})"},
		{ "trigger": "任务系统_RemoveSubquest(hscript subquest)", "contents": "${1:CDotaQuest}:RemoveSubquest(${2:hscript subquest})"},
		{ "trigger": "任务系统_GetSubquestByName(string unKnown)", "contents": "${1:CDotaQuest}:GetSubquestByName(${2:string unKnown})"},
		{ "trigger": "任务系统_GetSubquest(int unKnown)", "contents": "${1:CDotaQuest}:GetSubquest(${2:int unKnown})"},


		{ "trigger": "CDotaSubquestBase_SetTextReplaceValue(int unKnown,int unKnown)", "contents": "${1:CDotaSubquestBase}:SetTextReplaceValue(${2:int unKnown},${3:int unKnown})"},
		{ "trigger": "CDotaSubquestBase_CompleteSubquest()", "contents": "${1:CDotaSubquestBase}:CompleteSubquest()"},
		{ "trigger": "CDotaSubquestBase_SetTextReplaceString(string text)", "contents": "${1:CDotaSubquestBase}:SetTextReplaceString(${2:string text})"},


		{ "trigger": "CDOTA_Item_SetPurchaseTime(float purchaseTime)", "contents": "${1:CDOTA_Item}:SetPurchaseTime(${2:float purchaseTime})"},
		{ "trigger": "CDOTA_Item_GetPurchaseTime()", "contents": "${1:CDOTA_Item}:GetPurchaseTime()"},
		{ "trigger": "CDOTA_Item_SetPurchaser(Unit unit)", "contents": "${1:CDOTA_Item}:SetPurchaser(${2:Unit unit})"},
		{ "trigger": "CDOTA_Item_GetInitialCharges()", "contents": "${1:CDOTA_Item}:GetInitialCharges()"},
		{ "trigger": "CDOTA_Item_GetCurrentCharges()", "contents": "${1:CDOTA_Item}:GetCurrentCharges()"},
		{ "trigger": "CDOTA_Item_SetCurrentCharges(int charges)", "contents": "${1:CDOTA_Item}:SetCurrentCharges(${2:int charges})"},
		{ "trigger": "CDOTA_Item_GetPurchaser()", "contents": "${1:CDOTA_Item}:GetPurchaser()"},
		{ "trigger": "CDOTA_Item_Think()", "contents": "${1:CDOTA_Item}:Think()"},
		{ "trigger": "CDOTA_Item_IsPermanent()", "contents": "${1:CDOTA_Item}:IsPermanent()"},
		{ "trigger": "CDOTA_Item_StacksWithOtherOwners()", "contents": "${1:CDOTA_Item}:StacksWithOtherOwners()"},
		{ "trigger": "CDOTA_Item_SetStacksWithOtherOwners(bool stacks)", "contents": "${1:CDOTA_Item}:SetStacksWithOtherOwners(${2:bool stacks})"},
		{ "trigger": "CDOTA_Item_GetShareability()", "contents": "${1:CDOTA_Item}:GetShareability()"},
		{ "trigger": "CDOTA_Item_GetCost()", "contents": "${1:CDOTA_Item}:GetCost()"},
		{ "trigger": "CDOTA_Item_LaunchLoot(bool bool,float float , float float , vector vector)", "contents": "${1:CDOTA_Item}:LaunchLoot(${2:bool bool},${3:float float},${4:float float},${5:vector vector})"},
		{ "trigger": "CDOTA_Item_GetContainer()", "contents": "${1:CDOTA_Item}:GetContainer()"},


		{ "trigger": "CDOTA_Item_DataDriven_ApplyDataDrivenModifier(hscript hscript,hscript hscript , string string , hscript hscript)", "contents": "${1:CDOTA_Item_DataDriven}:ApplyDataDrivenModifier(${2:hscript hscript},${3:hscript hscript},${4:string string},${5:hscript hscript})"},


		{ "trigger": "CDOTA_Item_Physical_GetCreationTime()", "contents": "${1:CDOTA_Item_Physical}:GetCreationTime()"},
		{ "trigger": "CDOTA_Item_Physical_GetContainedItem()", "contents": "${1:CDOTA_Item_Physical}:GetContainedItem()"},
		{ "trigger": "CDOTA_Item_Physical_SetContainedItem(Item item)", "contents": "${1:CDOTA_Item_Physical}:SetContainedItem(${2:Item item})"},


		{ "trigger": "CDOTAPlayer_GetPlayerID()", "contents": "${1:CDOTAPlayer}:GetPlayerID()"},
		{ "trigger": "CDOTAPlayer_GetAssignedHero()", "contents": "${1:CDOTAPlayer}:GetAssignedHero()"},
		{ "trigger": "CDOTAPlayer_SetKillCamUnit(hscript unit)", "contents": "${1:CDOTAPlayer}:SetKillCamUnit(${2:hscript unit})"},
		{ "trigger": "CDOTAPlayer_MakeRandomHeroSelection()", "contents": "${1:CDOTAPlayer}:MakeRandomHeroSelection()"},
		{ "trigger": "CDOTAPlayer_SetMusicStatus(int unKnown,float statu)", "contents": "${1:CDOTAPlayer}:SetMusicStatus(${2:int unKnown},${3:float statu})"},



		{ "trigger": "CTriggerCamera_GetFov()", "contents": "${1:CTriggerCamera}:GetFov()"},
		{ "trigger": "CTriggerCamera_SetFov(int degrees,float rate)", "contents": "${1:CTriggerCamera}:SetFov(${2:int degrees},${3:float rate})"},
		{ "trigger": "CTriggerCamera_ScreenFade(int int,int int , int int , int int , float float , float float , int int)", "contents": "${1:CTriggerCamera}:ScreenFade(${2:int int},${3:int int},${4:int int},${5:int int},${6:float float},${7:float float},${8:int int})"},
		{ "trigger": "CTriggerCamera_Enable()", "contents": "${1:CTriggerCamera}:Enable()"},


		{ "trigger": "CSceneEntity_EstimateLength()", "contents": "${1:CSceneEntity}:EstimateLength()"},
		{ "trigger": "CSceneEntity_IsPlayingBack()", "contents": "${1:CSceneEntity}:IsPlayingBack()"},
		{ "trigger": "CSceneEntity_IsPaused()", "contents": "${1:CSceneEntity}:IsPaused()"},
		{ "trigger": "CSceneEntity_Start(Entity activator)", "contents": "${1:CSceneEntity}:Start(${2:Entity activator})"},
		{ "trigger": "CSceneEntity_Cancel()", "contents": "${1:CSceneEntity}:Cancel()"},
		{ "trigger": "CSceneEntity_AddBroadcastTeamTarget(int team)", "contents": "${1:CSceneEntity}:AddBroadcastTeamTarget(${2:int team})"},
		{ "trigger": "CSceneEntity_RemoveBroadcastTeamTarget(int entityIndex)", "contents": "${1:CSceneEntity}:RemoveBroadcastTeamTarget(${2:int entityIndex})"},
		{ "trigger": "CSceneEntity_FindNamedEntity(string entityReference)", "contents": "${1:CSceneEntity}:FindNamedEntity(${2:string entityReference})"},
		{ "trigger": "CSceneEntity_LoadSceneFromString(string sceneName,string vcdFile)", "contents": "${1:CSceneEntity}:LoadSceneFromString(${2:string sceneName},${3:string vcdFile})"},
		{ "trigger": "CSceneEntity_FindCamera()", "contents": "${1:CSceneEntity}:FindCamera()"},


		{ "trigger": "CEnvProjectedTexture_SetLinearAttenuation(float attenuation)", "contents": "${1:CEnvProjectedTexture}:SetLinearAttenuation(${2:float attenuation})"},
		{ "trigger": "CEnvProjectedTexture_SetQuadraticAttenuation(float attenuation)", "contents": "${1:CEnvProjectedTexture}:SetQuadraticAttenuation(${2:float attenuation})"},
		{ "trigger": "CEnvProjectedTexture_SetNearRange(float nearRange)", "contents": "${1:CEnvProjectedTexture}:SetNearRange(${2:float nearRange})"},
		{ "trigger": "CEnvProjectedTexture_SetFarRange(float farRange)", "contents": "${1:CEnvProjectedTexture}:SetFarRange(${2:float farRange})"},
		{ "trigger": "CEnvProjectedTexture_SetVolumetrics(bool on,float intensity , float noise , int planes , float planeOffset)", "contents": "${1:CEnvProjectedTexture}:SetVolumetrics(${2:bool on},${3:float intensity},${4:float noise},${5:int planes},${6:float planeOffset})"},


		{ "trigger": "CEnvEntityMaker_SpawnEntity()", "contents": "${1:CEnvEntityMaker}:SpawnEntity()"},
		{ "trigger": "CEnvEntityMaker_SpawnEntityAtEntityOrigin(Entity entity)", "contents": "${1:CEnvEntityMaker}:SpawnEntityAtEntityOrigin(${2:Entity entity})"},
		{ "trigger": "CEnvEntityMaker_SpawnEntityAtNamedEntityOrigin(string entityName)", "contents": "${1:CEnvEntityMaker}:SpawnEntityAtNamedEntityOrigin(${2:string entityName})"},
		{ "trigger": "CEnvEntityMaker_SpawnEntityAtLocation(vector location,vector orientation)", "contents": "${1:CEnvEntityMaker}:SpawnEntityAtLocation(${2:vector location},${3:vector orientation})"},


		{ "trigger": "CDOTAVoteSystem_StartVote(hscript vote)", "contents": "${1:CDOTAVoteSystem}:StartVote(${2:hscript vote})"}

	]
}
